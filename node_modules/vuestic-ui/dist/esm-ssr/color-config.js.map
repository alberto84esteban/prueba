{"version":3,"file":"color-config.js","sources":["../../src/services/color-config/color-functions.ts","../../src/services/color-config/color-config.ts"],"sourcesContent":["import { ColorTranslator } from 'colortranslator'\nimport { HSLObject, ColorInput } from 'colortranslator/dist/@types'\n\nexport const colorToRgba = (color: ColorInput, opacity: number) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const getTextColor = (color: ColorInput, darkColor = 'var(--va-dark)', lightColor = 'var(--va-white)') => {\n  const { R, G, B } = new ColorTranslator(color)\n  const isLightBackground = Math.sqrt(R * R * 0.241 + G * G * 0.691 + B * B * 0.068) > 130\n  return isLightBackground ? darkColor : lightColor\n}\n\nexport const getBoxShadowColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.4).RGBA\n}\n\nexport const getHoverColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.2).RGBA\n}\n\nexport const getFocusColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.3).RGBA\n}\n\nexport const shiftHSLAColor = (color: ColorInput, offset: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (offset.h) { result.setH(result.H + offset.h) }\n\n  if (offset.s) { result.setS(result.S + offset.s) }\n\n  if (offset.l) { result.setL(result.L + offset.l) }\n\n  if (offset.a) { result.setA(result.A + offset.a) }\n\n  return result.HSLA\n}\n\nexport const setHSLAColor = (color: ColorInput, newColor: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (newColor.h !== undefined) { result.setH(newColor.h) }\n\n  if (newColor.s !== undefined) { result.setS(newColor.s) }\n\n  if (newColor.l !== undefined) { result.setL(newColor.l) }\n\n  if (newColor.a !== undefined) { result.setA(newColor.a) }\n\n  return result.HSLA\n}\n\n/**\n * This method guesses second color for gradient based on first one.\n * Calculation method should differ for different colors, so we split color circle\n * in zones.\n *\n * @param color\n */\nexport const shiftGradientColor = (color: ColorInput): string => {\n  const newColor = ColorTranslator.toHSLA(color, false) as HSLObject\n\n  // Gray\n  if (newColor.s < 10) {\n    return shiftHSLAColor(newColor, { h: 2, s: 5, l: 10 })\n  }\n  // Unsaturated (too pale, gray-ish, monotone)\n  // For unsaturated color, hue change does nothing.\n  if (newColor.s < 30) {\n    return shiftHSLAColor(newColor, { s: -14, l: 11 })\n  }\n  // Red\n  if ((newColor.h >= 0 && newColor.h < 44) || (newColor.h >= 285)) {\n    return shiftHSLAColor(newColor, { h: 11, s: 27, l: 8 })\n  }\n  // Yellow\n  if (newColor.h >= 44 && newColor.h < 85) {\n    return shiftHSLAColor(newColor, { h: 3, l: 9 })\n  }\n  // Green\n  if (newColor.h >= 85 && newColor.h < 165) {\n    return shiftHSLAColor(newColor, { h: 16, l: 14 })\n  }\n  // Blue\n  if (newColor.h >= 165 && newColor.h < 285) {\n    return shiftHSLAColor(newColor, { h: -15, s: 3, l: 2 })\n  }\n\n  throw new Error('This method should handle all colors. But it didn\\'t for some reason.')\n}\n\nexport const getGradientBackground = (color: string) => {\n  const colorLeft = shiftGradientColor(color)\n  const colorRight = ColorTranslator.toHSLA(color)\n\n  return `linear-gradient(to right, ${colorLeft}, ${colorRight})`\n}\n\n/**\n * Check if color is valid hsl, hsla, rga, rgba or hex color\n * Taken from https://www.regextester.com/103656\n * @param strColor\n */\nexport const isColor = (strColor: string): boolean => {\n  // Need to use Regex instead of DOM methods because we support SSR\n  const cssColorRegex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/\n\n  return cssColorRegex.test(strColor.toLocaleLowerCase())\n}\n\nexport const isCSSVariable = (strColor: string): boolean => /var\\(--.+\\)/.test(strColor)\n","import { GlobalConfig, setGlobalConfig, getGlobalConfig } from '../global-config/global-config'\nimport {\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor,\n  getGradientBackground,\n  isColor,\n  isCSSVariable,\n  getTextColor,\n  shiftHSLAColor,\n  setHSLAColor,\n} from './color-functions'\n\nexport type CssColor = string\nexport type ColorConfig = { [colorName: string]: CssColor }\n\n// Most default color - fallback when nothing else is found.\nexport const DEFAULT_COLOR = '#000000'\n\nexport const setColors = (colors: ColorConfig): void => {\n  setGlobalConfig((config: GlobalConfig) => ({\n    ...config,\n    colors: { ...config.colors, ...colors },\n  }))\n}\n\nexport const getColors = (): ColorConfig => {\n  return getGlobalConfig().colors || {}\n}\n\n/**\n * Returns color from config by name or return prop if color is it's valid hex, hsl, hsla, rgb or rgba color.\n * @param prop - should be color name or color in hex, hsl, hsla, rgb or rgba format\n * @param defaultColor - this color will be used if prop is invalid\n */\nexport const getColor = (prop?: string, defaultColor: string = DEFAULT_COLOR): CssColor => {\n  const colors = getColors()\n\n  if (!prop) {\n    prop = defaultColor\n  }\n\n  if (colors[prop]) {\n    return colors[prop]\n  }\n\n  if (isColor(prop) || isCSSVariable(prop) || CSS.supports('color', prop)) {\n    return prop\n  }\n\n  return defaultColor\n}\n\nexport const colorsToCSSVariable = (colors: { [colorName: string]: string | undefined }, prefix = 'va') => {\n  return Object\n    .keys(colors)\n    .filter((key) => colors[key] !== undefined)\n    .reduce((acc: Record<string, any>, colorName: string) => {\n      acc[`--${prefix}-${colorName}`] = getColor(colors[colorName])\n      return acc\n    }, {})\n}\n\n// Here expose methods that user wants to use in vue component\nexport const useColors = () => ({\n  setColors,\n  getColors,\n  getColor,\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor,\n  getGradientBackground,\n  getTextColor,\n  shiftHSLAColor,\n  setHSLAColor,\n  colorsToCSSVariable,\n})\n"],"names":["colorToRgba","color","opacity","ColorTranslator","setA","RGBA","getTextColor","darkColor","lightColor","R","G","B","Math","sqrt","getBoxShadowColor","getHoverColor","getFocusColor","shiftHSLAColor","offset","result","h","setH","H","s","setS","S","l","setL","L","a","A","HSLA","setHSLAColor","newColor","undefined","getGradientBackground","toHSLA","Error","shiftGradientColor","setColors","colors","setGlobalConfig","config","getColors","getGlobalConfig","getColor","prop","defaultColor","test","toLocaleLowerCase","strColor","isCSSVariable","CSS","supports","colorsToCSSVariable","prefix","Object","keys","filter","key","reduce","acc","colorName","useColors"],"mappings":"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"}