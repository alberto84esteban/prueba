{"version":3,"file":"VaDropdownContent.js","sources":["../../src/components/va-dropdown/VaDropdown.vue","../../src/components/va-dropdown/VaDropdown.vue?vue&type=template&id=6d4e48a8&lang.js","../../src/components/va-dropdown/VaDropdownContent/VaDropdownContent.vue","../../src/components/va-dropdown/VaDropdownContent/VaDropdownContent.vue?vue&type=template&id=4b360faf&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"va-dropdown\"\n    :class=\"classComputed\"\n  >\n    <div\n      class=\"va-dropdown__anchor\"\n      @mouseover=\"onMouseOver()\"\n      @mouseout=\"onMouseOut()\"\n      @click=\"onAnchorClick()\"\n      @keyup.enter.stop.prevent=\"onAnchorClick()\"\n      ref=\"anchor\"\n    >\n      <slot name=\"anchor\" />\n    </div>\n    <template v-if=\"showContent\">\n      <teleport :to=\"attachElement\" :disabled=\"disableAttachment\">\n        <div\n          class=\"va-dropdown__content-wrapper\"\n          @mouseover=\"$props.isContentHoverable && onMouseOver()\"\n          @mouseout=\"onMouseOut()\"\n          @click.stop=\"onDropdownContentClick()\"\n          ref=\"contentWrapper\"\n        >\n          <div :style=\"$props.keepAnchorWidth ? anchorWidthStyles : ''\">\n            <slot />\n          </div>\n        </div>\n      </teleport>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { watch, nextTick } from 'vue'\nimport { Vue, Options, prop, mixins } from 'vue-class-component'\nimport { DebounceLoader } from 'asva-executors'\nimport { createPopper, Instance } from '@popperjs/core'\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\n\ntype PopperInstance = Instance | null\ntype ClickType = 'anchor-click' | 'dropdown-content-click' | 'click-outside'\n\nclass DropdownProps {\n  debugId = prop<string>({ type: String, default: '' })\n  position = prop<string>({ type: String, default: '' })\n  hoverOverTimeout = prop<number>({ type: Number, default: 30 })\n  hoverOutTimeout = prop<number>({ type: Number, default: 200 })\n  modelValue = prop<boolean>({ type: Boolean, default: false })\n  disabled = prop<boolean>({ type: Boolean })\n  attachElement = prop<string>({ type: String, default: 'body' })\n  disableAttachment = prop<boolean>({ type: Boolean })\n  // Means dropdown width should be the same as anchor's width.\n  keepAnchorWidth = prop<boolean>({ type: Boolean })\n  anchorSelector = prop<string>({ type: String, default: '' })\n  closeOnContentClick = prop<boolean>({ type: Boolean, default: true })\n  closeOnClickOutside = prop<boolean>({ type: Boolean, default: true })\n  closeOnAnchorClick = prop<boolean>({ type: Boolean, default: true })\n  isContentHoverable = prop<boolean>({ type: Boolean, default: true })\n  offset = prop<number | number[]>({ type: [Array, Number], default: () => [] })\n  trigger = prop<string>({\n    type: String,\n    default: 'click',\n    validator: (trigger: string) => ['click', 'hover', 'none'].includes(trigger),\n  })\n  stateful = prop<boolean>({ type: Boolean, default: true })\n}\n\nconst DropdownPropsMixin = Vue.with(DropdownProps)\n\n@Options({\n  name: 'VaDropdown',\n  emits: ['update:modelValue', 'anchor-click', 'click-outside', 'dropdown-content-click'],\n})\nexport default class VaDropdown extends mixins(\n  StatefulMixin,\n  DropdownPropsMixin,\n) {\n  popperInstance: PopperInstance = null\n  anchorWidth = 0\n  hoverOverDebounceLoader!: DebounceLoader\n  hoverOutDebounceLoader!: DebounceLoader\n\n  get anchorWidthStyles (): { width: string; maxWidth: string } {\n    return {\n      width: this.anchorWidth + 'px',\n      maxWidth: this.anchorWidth + 'px',\n    }\n  }\n\n  get classComputed () {\n    return {\n      'va-dropdown--disabled': this.$props.disabled,\n    }\n  }\n\n  get showContent (): boolean {\n    return this.valueComputed\n  }\n\n  handlePopperInstance (): void {\n    if (this.popperInstance) {\n      this.removePopper()\n    }\n\n    if (!this.showContent) {\n      return\n    }\n\n    this.updateAnchorWidth()\n\n    nextTick(() => {\n      this.initPopper()\n    })\n  }\n\n  handleClick (emitName: ClickType, toClose: boolean): void {\n    this.$emit(emitName)\n    if (toClose) {\n      this.hide()\n    }\n  }\n\n  onDropdownContentClick (): void {\n    this.handleClick('dropdown-content-click', this.closeOnContentClick)\n  }\n\n  onClickOutside (): void {\n    this.handleClick('click-outside', this.closeOnClickOutside)\n  }\n\n  onAnchorClick (): void {\n    if (this.$props.disabled) {\n      return\n    }\n    if (this.$props.trigger === 'click') {\n      if (this.valueComputed) {\n        this.handleClick('anchor-click', this.closeOnAnchorClick)\n        return\n      }\n      this.valueComputed = true\n    }\n    this.$emit('anchor-click')\n  }\n\n  // Kinda complex logic here.\n  // We want to achieve 2 things:\n  // * Fast mouse-over shouldn't trigger dropdown.\n  // * Dropdown shouldn't close when you move mouse from anchor to content (even with offset).\n  onMouseOver (): void {\n    if (this.$props.disabled || this.$props.trigger !== 'hover') {\n      return\n    }\n    if (!this.valueComputed) {\n      this.hoverOverDebounceLoader.run()\n    }\n    this.hoverOutDebounceLoader.reset()\n  }\n\n  onMouseOut (): void {\n    if (this.$props.trigger !== 'hover') {\n      return\n    }\n    if (this.isContentHoverable) {\n      this.hoverOutDebounceLoader.run()\n    } else {\n      this.valueComputed = false\n    }\n    this.hoverOverDebounceLoader.reset()\n  }\n\n  registerClickOutsideListener (): void {\n    document.addEventListener('click', event => this.handleDocumentClick(event), false)\n  }\n\n  unregisterClickOutsideListener (): void {\n    document.removeEventListener('click', event => this.handleDocumentClick(event), false)\n  }\n\n  handleDocumentClick (event: any): void {\n    let el = event.target\n    const clickedElements = [] // Array because dropdowns can be nested.\n    // TODO Make DOM walk-over global, so that each dropdown doesn't have to do it.\n    while (el) {\n      clickedElements.push(el)\n      el = el.parentNode\n    }\n    const isCurrentDropdownClicked = clickedElements.includes(this.$refs.anchor) || clickedElements.includes(this.$refs.contentWrapper)\n    if (isCurrentDropdownClicked) {\n      return\n    }\n    if (this.showContent) {\n      this.onClickOutside()\n    }\n  }\n\n  updateAnchorWidth (): void {\n    if (this.keepAnchorWidth) {\n      this.anchorWidth = (this as any).$refs.anchor.offsetWidth\n    }\n    if (this.popperInstance) {\n      this.popperInstance.forceUpdate()\n    }\n  }\n\n  /** @public */\n  hide (): void {\n    this.valueComputed = false\n  }\n\n  initPopper (): void {\n    const options: any = {\n      placement: this.position || 'bottom',\n      modifiers: [],\n      // strategy: this.fixed ? 'fixed' : undefined,\n      onFirstUpdate: () => {\n        this.valueComputed = true\n      },\n    }\n\n    if (this.offset) {\n      options.modifiers.push({\n        name: 'offset',\n        options: {\n          offset: Array.isArray(this.offset) ? this.offset : [this.offset],\n        },\n      })\n      // options.modifiers.keepTogether = { enabled: false }\n      // options.modifiers.arrow = { enabled: false }\n    }\n\n    const anchor = this.$props.anchorSelector\n      ? (this.$refs.anchor as Element).querySelector(this.$props.anchorSelector) || this.$refs.anchor\n      : this.$refs.anchor\n\n    this.popperInstance = createPopper(\n      anchor as Element,\n      this.$refs.contentWrapper as HTMLElement,\n      options,\n    )\n  }\n\n  removePopper (): void {\n    this.valueComputed = false\n\n    if (!this.popperInstance) {\n      return\n    }\n    this.popperInstance.destroy()\n    this.popperInstance = null\n  }\n\n  created (): void {\n    watch(() => this.showContent, () => {\n      this.handlePopperInstance()\n    })\n    this.hoverOverDebounceLoader = new DebounceLoader(\n      async () => {\n        this.valueComputed = true\n      },\n      this.hoverOverTimeout,\n    )\n    this.hoverOutDebounceLoader = new DebounceLoader(\n      async () => {\n        this.valueComputed = false\n      },\n      this.hoverOutTimeout,\n    )\n    // nuxt fix\n    if ((this as any).$isServer) {\n      return\n    }\n    this.registerClickOutsideListener()\n  }\n\n  mounted (): void {\n    this.handlePopperInstance()\n  }\n\n  beforeUnmount (): void {\n    this.unregisterClickOutsideListener()\n    this.removePopper()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n@import 'variables';\n\n.va-dropdown {\n  /* Solved the alignment problem (if we try to align inline and block elements) */\n  line-height: var(--va-dropdown-line-height);\n  font-family: var(--va-font-family);\n\n  &--disabled {\n    @include va-disabled;\n  }\n\n  &__content-wrapper {\n    /* overflow: hidden; */\n    z-index: var(--va-dropdown-content-wrapper-z-index);\n  }\n}\n</style>\n","<template>\n  <div\n    class=\"va-dropdown\"\n    :class=\"classComputed\"\n  >\n    <div\n      class=\"va-dropdown__anchor\"\n      @mouseover=\"onMouseOver()\"\n      @mouseout=\"onMouseOut()\"\n      @click=\"onAnchorClick()\"\n      @keyup.enter.stop.prevent=\"onAnchorClick()\"\n      ref=\"anchor\"\n    >\n      <slot name=\"anchor\" />\n    </div>\n    <template v-if=\"showContent\">\n      <teleport :to=\"attachElement\" :disabled=\"disableAttachment\">\n        <div\n          class=\"va-dropdown__content-wrapper\"\n          @mouseover=\"$props.isContentHoverable && onMouseOver()\"\n          @mouseout=\"onMouseOut()\"\n          @click.stop=\"onDropdownContentClick()\"\n          ref=\"contentWrapper\"\n        >\n          <div :style=\"$props.keepAnchorWidth ? anchorWidthStyles : ''\">\n            <slot />\n          </div>\n        </div>\n      </teleport>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { watch, nextTick } from 'vue'\nimport { Vue, Options, prop, mixins } from 'vue-class-component'\nimport { DebounceLoader } from 'asva-executors'\nimport { createPopper, Instance } from '@popperjs/core'\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\n\ntype PopperInstance = Instance | null\ntype ClickType = 'anchor-click' | 'dropdown-content-click' | 'click-outside'\n\nclass DropdownProps {\n  debugId = prop<string>({ type: String, default: '' })\n  position = prop<string>({ type: String, default: '' })\n  hoverOverTimeout = prop<number>({ type: Number, default: 30 })\n  hoverOutTimeout = prop<number>({ type: Number, default: 200 })\n  modelValue = prop<boolean>({ type: Boolean, default: false })\n  disabled = prop<boolean>({ type: Boolean })\n  attachElement = prop<string>({ type: String, default: 'body' })\n  disableAttachment = prop<boolean>({ type: Boolean })\n  // Means dropdown width should be the same as anchor's width.\n  keepAnchorWidth = prop<boolean>({ type: Boolean })\n  anchorSelector = prop<string>({ type: String, default: '' })\n  closeOnContentClick = prop<boolean>({ type: Boolean, default: true })\n  closeOnClickOutside = prop<boolean>({ type: Boolean, default: true })\n  closeOnAnchorClick = prop<boolean>({ type: Boolean, default: true })\n  isContentHoverable = prop<boolean>({ type: Boolean, default: true })\n  offset = prop<number | number[]>({ type: [Array, Number], default: () => [] })\n  trigger = prop<string>({\n    type: String,\n    default: 'click',\n    validator: (trigger: string) => ['click', 'hover', 'none'].includes(trigger),\n  })\n  stateful = prop<boolean>({ type: Boolean, default: true })\n}\n\nconst DropdownPropsMixin = Vue.with(DropdownProps)\n\n@Options({\n  name: 'VaDropdown',\n  emits: ['update:modelValue', 'anchor-click', 'click-outside', 'dropdown-content-click'],\n})\nexport default class VaDropdown extends mixins(\n  StatefulMixin,\n  DropdownPropsMixin,\n) {\n  popperInstance: PopperInstance = null\n  anchorWidth = 0\n  hoverOverDebounceLoader!: DebounceLoader\n  hoverOutDebounceLoader!: DebounceLoader\n\n  get anchorWidthStyles (): { width: string; maxWidth: string } {\n    return {\n      width: this.anchorWidth + 'px',\n      maxWidth: this.anchorWidth + 'px',\n    }\n  }\n\n  get classComputed () {\n    return {\n      'va-dropdown--disabled': this.$props.disabled,\n    }\n  }\n\n  get showContent (): boolean {\n    return this.valueComputed\n  }\n\n  handlePopperInstance (): void {\n    if (this.popperInstance) {\n      this.removePopper()\n    }\n\n    if (!this.showContent) {\n      return\n    }\n\n    this.updateAnchorWidth()\n\n    nextTick(() => {\n      this.initPopper()\n    })\n  }\n\n  handleClick (emitName: ClickType, toClose: boolean): void {\n    this.$emit(emitName)\n    if (toClose) {\n      this.hide()\n    }\n  }\n\n  onDropdownContentClick (): void {\n    this.handleClick('dropdown-content-click', this.closeOnContentClick)\n  }\n\n  onClickOutside (): void {\n    this.handleClick('click-outside', this.closeOnClickOutside)\n  }\n\n  onAnchorClick (): void {\n    if (this.$props.disabled) {\n      return\n    }\n    if (this.$props.trigger === 'click') {\n      if (this.valueComputed) {\n        this.handleClick('anchor-click', this.closeOnAnchorClick)\n        return\n      }\n      this.valueComputed = true\n    }\n    this.$emit('anchor-click')\n  }\n\n  // Kinda complex logic here.\n  // We want to achieve 2 things:\n  // * Fast mouse-over shouldn't trigger dropdown.\n  // * Dropdown shouldn't close when you move mouse from anchor to content (even with offset).\n  onMouseOver (): void {\n    if (this.$props.disabled || this.$props.trigger !== 'hover') {\n      return\n    }\n    if (!this.valueComputed) {\n      this.hoverOverDebounceLoader.run()\n    }\n    this.hoverOutDebounceLoader.reset()\n  }\n\n  onMouseOut (): void {\n    if (this.$props.trigger !== 'hover') {\n      return\n    }\n    if (this.isContentHoverable) {\n      this.hoverOutDebounceLoader.run()\n    } else {\n      this.valueComputed = false\n    }\n    this.hoverOverDebounceLoader.reset()\n  }\n\n  registerClickOutsideListener (): void {\n    document.addEventListener('click', event => this.handleDocumentClick(event), false)\n  }\n\n  unregisterClickOutsideListener (): void {\n    document.removeEventListener('click', event => this.handleDocumentClick(event), false)\n  }\n\n  handleDocumentClick (event: any): void {\n    let el = event.target\n    const clickedElements = [] // Array because dropdowns can be nested.\n    // TODO Make DOM walk-over global, so that each dropdown doesn't have to do it.\n    while (el) {\n      clickedElements.push(el)\n      el = el.parentNode\n    }\n    const isCurrentDropdownClicked = clickedElements.includes(this.$refs.anchor) || clickedElements.includes(this.$refs.contentWrapper)\n    if (isCurrentDropdownClicked) {\n      return\n    }\n    if (this.showContent) {\n      this.onClickOutside()\n    }\n  }\n\n  updateAnchorWidth (): void {\n    if (this.keepAnchorWidth) {\n      this.anchorWidth = (this as any).$refs.anchor.offsetWidth\n    }\n    if (this.popperInstance) {\n      this.popperInstance.forceUpdate()\n    }\n  }\n\n  /** @public */\n  hide (): void {\n    this.valueComputed = false\n  }\n\n  initPopper (): void {\n    const options: any = {\n      placement: this.position || 'bottom',\n      modifiers: [],\n      // strategy: this.fixed ? 'fixed' : undefined,\n      onFirstUpdate: () => {\n        this.valueComputed = true\n      },\n    }\n\n    if (this.offset) {\n      options.modifiers.push({\n        name: 'offset',\n        options: {\n          offset: Array.isArray(this.offset) ? this.offset : [this.offset],\n        },\n      })\n      // options.modifiers.keepTogether = { enabled: false }\n      // options.modifiers.arrow = { enabled: false }\n    }\n\n    const anchor = this.$props.anchorSelector\n      ? (this.$refs.anchor as Element).querySelector(this.$props.anchorSelector) || this.$refs.anchor\n      : this.$refs.anchor\n\n    this.popperInstance = createPopper(\n      anchor as Element,\n      this.$refs.contentWrapper as HTMLElement,\n      options,\n    )\n  }\n\n  removePopper (): void {\n    this.valueComputed = false\n\n    if (!this.popperInstance) {\n      return\n    }\n    this.popperInstance.destroy()\n    this.popperInstance = null\n  }\n\n  created (): void {\n    watch(() => this.showContent, () => {\n      this.handlePopperInstance()\n    })\n    this.hoverOverDebounceLoader = new DebounceLoader(\n      async () => {\n        this.valueComputed = true\n      },\n      this.hoverOverTimeout,\n    )\n    this.hoverOutDebounceLoader = new DebounceLoader(\n      async () => {\n        this.valueComputed = false\n      },\n      this.hoverOutTimeout,\n    )\n    // nuxt fix\n    if ((this as any).$isServer) {\n      return\n    }\n    this.registerClickOutsideListener()\n  }\n\n  mounted (): void {\n    this.handlePopperInstance()\n  }\n\n  beforeUnmount (): void {\n    this.unregisterClickOutsideListener()\n    this.removePopper()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n@import 'variables';\n\n.va-dropdown {\n  /* Solved the alignment problem (if we try to align inline and block elements) */\n  line-height: var(--va-dropdown-line-height);\n  font-family: var(--va-font-family);\n\n  &--disabled {\n    @include va-disabled;\n  }\n\n  &__content-wrapper {\n    /* overflow: hidden; */\n    z-index: var(--va-dropdown-content-wrapper-z-index);\n  }\n}\n</style>\n","<template>\n  <div class=\"va-dropdown__content\" :style=\"noPadding && { padding: 0 }\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'VaDropdownContent',\n  props: {\n    noPadding: { type: Boolean, default: false },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n  @import \"variables\";\n\n  .va-dropdown {\n    &__content {\n      background: var(--va-dropdown-content-background);\n      padding: var(--va-dropdown-content-padding);\n      box-shadow: var(--va-dropdown-content-box-shadow);\n      border-radius: var(--va-dropdown-content-border-radius);\n      font-family: var(--va-font-family);\n    }\n  }\n</style>\n","<template>\n  <div class=\"va-dropdown__content\" :style=\"noPadding && { padding: 0 }\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'VaDropdownContent',\n  props: {\n    noPadding: { type: Boolean, default: false },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n  @import \"variables\";\n\n  .va-dropdown {\n    &__content {\n      background: var(--va-dropdown-content-background);\n      padding: var(--va-dropdown-content-padding);\n      box-shadow: var(--va-dropdown-content-box-shadow);\n      border-radius: var(--va-dropdown-content-border-radius);\n      font-family: var(--va-font-family);\n    }\n  }\n</style>\n"],"names":["DropdownPropsMixin","Vue","with","DropdownProps","constructor","this","prop","type","String","default","Number","Boolean","Array","validator","trigger","includes","VaDropdown","mixins","StatefulMixin","anchorWidthStyles","width","anchorWidth","maxWidth","classComputed","$props","disabled","showContent","valueComputed","handlePopperInstance","popperInstance","removePopper","updateAnchorWidth","nextTick","initPopper","handleClick","emitName","toClose","$emit","hide","onDropdownContentClick","closeOnContentClick","onClickOutside","closeOnClickOutside","onAnchorClick","closeOnAnchorClick","onMouseOver","hoverOverDebounceLoader","run","hoverOutDebounceLoader","reset","onMouseOut","isContentHoverable","registerClickOutsideListener","document","addEventListener","event","handleDocumentClick","unregisterClickOutsideListener","removeEventListener","el","target","clickedElements","push","parentNode","$refs","anchor","contentWrapper","keepAnchorWidth","offsetWidth","forceUpdate","options","placement","position","modifiers","onFirstUpdate","offset","name","isArray","anchorSelector","querySelector","createPopper","destroy","created","watch","DebounceLoader","async","hoverOverTimeout","hoverOutTimeout","$isServer","mounted","beforeUnmount","Options","emits","_mergeProps","class","_ctx","defineComponent","props","noPadding","style"],"mappings":"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"}