{"version":3,"file":"index11.js","sources":["../../src/components/va-button-toggle/VaButtonToggle.vue","../../src/components/va-button-toggle/VaButtonToggle.vue?vue&type=template&id=39f0c05a&lang.js","../../src/components/va-button-toggle/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        v-bind=\"getButtonProps(option.value)\"\n        :key=\"option.value\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        :class=\"getButtonClass(option.value)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { getTextColor, shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport VaButton from '../va-button'\nimport VaButtonGroup from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: { type: Array as PropType<any[]>, default: () => [] },\n    color: { type: String as PropType<string>, default: 'primary' },\n    textColor: { type: String as PropType<string>, default: undefined },\n    activeButtonTextColor: { type: String as PropType<string>, default: 'var(--va-white)' },\n    modelValue: { type: [String, Number] as PropType<string | number>, default: '' },\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    rounded: { type: Boolean as PropType<boolean>, default: true },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    size: {\n      type: String as PropType<string>,\n      default: 'medium',\n      validator: (modelValue: 'medium' | 'small' | 'large') => ['medium', 'small', 'large'].includes(modelValue),\n    },\n\n    toggleColor: { type: String as PropType<string>, default: '' },\n    gradient: { type: Boolean as PropType<boolean>, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleColorComputed = computed(() => getColor(props.toggleColor))\n\n    const getButtonProps = (buttonValue: any) => {\n      if (buttonValue !== props.modelValue) { return }\n\n      if (props.outline || props.flat) {\n        return {\n          textColor: props.activeButtonTextColor,\n          color: props.toggleColor ? toggleColorComputed.value : colorComputed.value,\n          outline: false,\n          flat: false,\n        }\n      }\n\n      return {\n        textColor: props.activeButtonTextColor ? props.activeButtonTextColor : getTextColor(colorComputed.value),\n        color: props.toggleColor ? toggleColorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': buttonValue === props.modelValue })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        v-bind=\"getButtonProps(option.value)\"\n        :key=\"option.value\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        :class=\"getButtonClass(option.value)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { getTextColor, shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport VaButton from '../va-button'\nimport VaButtonGroup from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: { type: Array as PropType<any[]>, default: () => [] },\n    color: { type: String as PropType<string>, default: 'primary' },\n    textColor: { type: String as PropType<string>, default: undefined },\n    activeButtonTextColor: { type: String as PropType<string>, default: 'var(--va-white)' },\n    modelValue: { type: [String, Number] as PropType<string | number>, default: '' },\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    rounded: { type: Boolean as PropType<boolean>, default: true },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    size: {\n      type: String as PropType<string>,\n      default: 'medium',\n      validator: (modelValue: 'medium' | 'small' | 'large') => ['medium', 'small', 'large'].includes(modelValue),\n    },\n\n    toggleColor: { type: String as PropType<string>, default: '' },\n    gradient: { type: Boolean as PropType<boolean>, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleColorComputed = computed(() => getColor(props.toggleColor))\n\n    const getButtonProps = (buttonValue: any) => {\n      if (buttonValue !== props.modelValue) { return }\n\n      if (props.outline || props.flat) {\n        return {\n          textColor: props.activeButtonTextColor,\n          color: props.toggleColor ? toggleColorComputed.value : colorComputed.value,\n          outline: false,\n          flat: false,\n        }\n      }\n\n      return {\n        textColor: props.activeButtonTextColor ? props.activeButtonTextColor : getTextColor(colorComputed.value),\n        color: props.toggleColor ? toggleColorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': buttonValue === props.modelValue })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaButtonToggle from './VaButtonToggle.vue'\n\nexport default withConfigTransport(VaButtonToggle)\n"],"names":["defineComponent","name","components","VaButtonGroup","VaButton","emits","props","options","type","Array","default","color","String","textColor","undefined","activeButtonTextColor","modelValue","Number","outline","Boolean","flat","rounded","disabled","size","validator","includes","toggleColor","gradient","setup","emit","getColor","useColors","colorComputed","computed","toggleColorComputed","getButtonProps","buttonValue","value","getTextColor","shiftHSLAColor","l","getButtonClass","changeValue","_mergeProps","class","_ctx","_createBlock","option","key","onClick","label","withConfigTransport","VaButtonToggle"],"mappings":"6wBAiCA,MAAeA,EAAgB,CAC7BC,KAAM,iBACNC,WAAY,CACVC,cAAAA,EACAC,SAAAA,GAEFC,MAAO,CAAC,qBACRC,MAAO,CACLC,QAAS,CAAEC,KAAMC,MAA0BC,QAAS,IAAM,IAC1DC,MAAO,CAAEH,KAAMI,OAA4BF,QAAS,WACpDG,UAAW,CAAEL,KAAMI,OAA4BF,aAASI,GACxDC,sBAAuB,CAAEP,KAAMI,OAA4BF,QAAS,mBACpEM,WAAY,CAAER,KAAM,CAACI,OAAQK,QAAsCP,QAAS,IAC5EQ,QAAS,CAAEV,KAAMW,QAA8BT,SAAS,GACxDU,KAAM,CAAEZ,KAAMW,QAA8BT,SAAS,GACrDW,QAAS,CAAEb,KAAMW,QAA8BT,SAAS,GACxDY,SAAU,CAAEd,KAAMW,QAA8BT,SAAS,GACzDa,KAAM,CACJf,KAAMI,OACNF,QAAS,SACTc,UAAYR,GAA6C,CAAC,SAAU,QAAS,SAASS,SAAST,IAGjGU,YAAa,CAAElB,KAAMI,OAA4BF,QAAS,IAC1DiB,SAAU,CAAEnB,KAAMW,QAA8BT,SAAS,IAE3DkB,MAAOtB,GAAOuB,KAAEA,IACd,MAAMC,SAAEA,GAAaC,IACfC,EAAgBC,GAAS,IAAMH,EAASxB,EAAMK,SAC9CuB,EAAsBD,GAAS,IAAMH,EAASxB,EAAMoB,eAwB1D,MAAO,CACLS,eAvBsBC,IACtB,GAAIA,IAAgB9B,EAAMU,WAE1B,OAAIV,EAAMY,SAAWZ,EAAMc,KAClB,CACLP,UAAWP,EAAMS,sBACjBJ,MAAOL,EAAMoB,YAAcQ,EAAoBG,MAAQL,EAAcK,MACrEnB,SAAS,EACTE,MAAM,GAIH,CACLP,UAAWP,EAAMS,sBAAwBT,EAAMS,sBAAwBuB,EAAaN,EAAcK,OAClG1B,MAAOL,EAAMoB,YAAcQ,EAAoBG,MAAQE,EAAeP,EAAcK,MAAO,CAAEG,GAAI,MAUnGC,eANsBL,KAAwB,oBAAqBA,IAAgB9B,EAAMU,aAOzF0B,YALmBL,GAAeR,EAAK,oBAAqBQ,sNCnFhEM,GAAKC,MAAM,mCAENjC,MAAOkC,QACPhC,UAAWgC,YACXxB,QAASwB,UACT3B,QAAS2B,UACTzB,KAAMyB,OACNlB,SAAUkB,wBANb,gCAQEC,WACmBD,WAAVE,QADTD,IAAAH,mBAEyBI,EAAOV,QAC7BW,IAAKD,EAAOV,MACZf,SAAUuB,WACVtB,KAAMsB,OACND,MAAOC,iBAAeE,EAAOV,OAC7BY,WAAOJ,cAAYE,EAAOV,qBAE3B,SAAGU,EAAOG,8FAROL,WAAVE,UADTJ,EAEUE,iBAAeE,EAAOV,QAC7BW,IAAKD,EAAOV,MACZf,SAAUuB,WACVtB,KAAMsB,OACND,MAAOC,iBAAeE,EAAOV,qBANhC,6BASKU,EAAOG,kBAAPH,EAAOG,sIChBlB,MAAeC,EAAoBC"}