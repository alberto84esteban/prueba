{"version":3,"file":"index51.js","sources":["../../src/components/va-option-list/VaOptionList.vue","../../src/components/va-option-list/VaOptionList.vue?vue&type=template&id=69ca68d9&lang.js","../../src/components/va-option-list/index.ts"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"$props.errorCount\"\n  >\n    <ul\n      class=\"va-option-list__list\"\n      :id=\"String($props.id)\"\n    >\n      <li\n        v-for=\"(option, index) in $props.options\"\n        :key=\"getKey(option)\"\n      >\n        <slot\n          :props=\"{\n            option,\n            isDisabled,\n            name: $props.name,\n            color: $props.color,\n            leftLabel: $props.leftLabel,\n            getText,\n            selectedValue,\n            index\n          }\"\n        >\n          <va-radio\n            v-if=\"$props.type === 'radio'\"\n            ref=\"input\"\n            :option=\"getValue(option)\"\n            :disabled=\"isDisabled(option)\"\n            :name=\"$props.name\"\n            :color=\"$props.color\"\n            :left-label=\"$props.leftLabel\"\n            :label=\"getText(option)\"\n            v-model=\"selectedValue\"\n            :tabindex=\"index\"\n          />\n          <va-checkbox\n            v-else-if=\"$props.type === 'checkbox'\"\n            ref=\"input\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :left-label=\"$props.leftLabel\"\n            :array-value=\"getValue(option)\"\n            :color=\"$props.color\"\n            :name=\"$props.name\"\n          />\n          <va-switch\n            v-else\n            ref=\"input\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :left-label=\"$props.leftLabel\"\n            :array-value=\"getValue(option)\"\n            :color=\"$props.color\"\n            :name=\"$props.name\"\n          />\n        </slot>\n      </li>\n    </ul>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, defineComponent, PropType, onMounted } from 'vue'\n\nimport { generateUniqueId } from '../../services/utils'\nimport { useSelectableList, useSelectableListProps, SelectableOption } from '../../composables/useSelectableList'\nimport { useValidation, useValidationProps } from '../../composables/useValidation'\nimport { useStateful, statefulComponentOptions } from '../../mixins/StatefulMixin/cStatefulMixin'\nimport { VaMessageListWrapper } from '../va-input'\nimport VaCheckbox from '../va-checkbox'\nimport VaRadio from '../va-radio'\nimport VaSwitch from '../va-switch'\n\ntype OptionListValue = SelectableOption | SelectableOption[] | null\n\nexport default defineComponent({\n  name: 'VaOptionList',\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper,\n  },\n  emits: [...statefulComponentOptions.emits],\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...statefulComponentOptions.props,\n    type: {\n      type: String as PropType<'radio' | 'checkbox' | 'switch'>,\n      default: 'checkbox',\n      validator: (type: any) => ['radio', 'checkbox', 'switch'].includes(type),\n    },\n    disabled: ({ type: Boolean as PropType<boolean>, default: false }),\n    readonly: ({ type: Boolean as PropType<boolean>, default: false }),\n    defaultValue: ({ type: [String, Number, Object, Array] as PropType<OptionListValue | null> }),\n    name: ({ type: String as PropType<string>, default: generateUniqueId }),\n    color: ({ type: String as PropType<string>, default: 'primary' }),\n    leftLabel: ({ type: Boolean, default: false }),\n    modelValue: ({ type: [String, Number, Object, Array] as PropType<OptionListValue | null> }),\n  },\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit)\n    const { getValue, getText, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const input = ref<HTMLElement>()\n\n    const isRadio = computed(() => {\n      return props.type === 'radio'\n    })\n\n    const selectedValue = computed({\n      get () {\n        const value = isRadio.value ? null : []\n\n        return valueComputed.value || props.defaultValue || value as OptionListValue\n      },\n      set (value: OptionListValue) {\n        if (props.readonly) { return }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value\n        } else {\n          valueComputed.value = Array.isArray(value)\n            ? value.map(getValue)\n            : [value ? getValue(value) : value]\n        }\n      },\n    })\n\n    const getKey = (option: any) => getTrackBy(option)\n\n    const isDisabled = (option: any) => props.disabled || getDisabled(option)\n\n    const reset = () => { valueComputed.value = undefined }\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(input.value) && input.value.find(el => !el.disabled)\n\n      if (firstActiveEl && typeof firstActiveEl.focus === 'function') {\n        firstActiveEl.focus()\n      }\n    }\n\n    const { computedError, computedErrorMessages } = useValidation(props, emit, reset, focus)\n\n    onMounted(() => {\n      if (!valueComputed.value && props.defaultValue) {\n        selectedValue.value = props.defaultValue\n      }\n    })\n\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getKey,\n      isDisabled,\n      reset,\n      focus,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-option-list {\n  &__list {\n    line-height: var(--va-option-list-line-height);\n  }\n}\n</style>\n","<template>\n  <VaMessageListWrapper\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"$props.errorCount\"\n  >\n    <ul\n      class=\"va-option-list__list\"\n      :id=\"String($props.id)\"\n    >\n      <li\n        v-for=\"(option, index) in $props.options\"\n        :key=\"getKey(option)\"\n      >\n        <slot\n          :props=\"{\n            option,\n            isDisabled,\n            name: $props.name,\n            color: $props.color,\n            leftLabel: $props.leftLabel,\n            getText,\n            selectedValue,\n            index\n          }\"\n        >\n          <va-radio\n            v-if=\"$props.type === 'radio'\"\n            ref=\"input\"\n            :option=\"getValue(option)\"\n            :disabled=\"isDisabled(option)\"\n            :name=\"$props.name\"\n            :color=\"$props.color\"\n            :left-label=\"$props.leftLabel\"\n            :label=\"getText(option)\"\n            v-model=\"selectedValue\"\n            :tabindex=\"index\"\n          />\n          <va-checkbox\n            v-else-if=\"$props.type === 'checkbox'\"\n            ref=\"input\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :left-label=\"$props.leftLabel\"\n            :array-value=\"getValue(option)\"\n            :color=\"$props.color\"\n            :name=\"$props.name\"\n          />\n          <va-switch\n            v-else\n            ref=\"input\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :left-label=\"$props.leftLabel\"\n            :array-value=\"getValue(option)\"\n            :color=\"$props.color\"\n            :name=\"$props.name\"\n          />\n        </slot>\n      </li>\n    </ul>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, defineComponent, PropType, onMounted } from 'vue'\n\nimport { generateUniqueId } from '../../services/utils'\nimport { useSelectableList, useSelectableListProps, SelectableOption } from '../../composables/useSelectableList'\nimport { useValidation, useValidationProps } from '../../composables/useValidation'\nimport { useStateful, statefulComponentOptions } from '../../mixins/StatefulMixin/cStatefulMixin'\nimport { VaMessageListWrapper } from '../va-input'\nimport VaCheckbox from '../va-checkbox'\nimport VaRadio from '../va-radio'\nimport VaSwitch from '../va-switch'\n\ntype OptionListValue = SelectableOption | SelectableOption[] | null\n\nexport default defineComponent({\n  name: 'VaOptionList',\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper,\n  },\n  emits: [...statefulComponentOptions.emits],\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...statefulComponentOptions.props,\n    type: {\n      type: String as PropType<'radio' | 'checkbox' | 'switch'>,\n      default: 'checkbox',\n      validator: (type: any) => ['radio', 'checkbox', 'switch'].includes(type),\n    },\n    disabled: ({ type: Boolean as PropType<boolean>, default: false }),\n    readonly: ({ type: Boolean as PropType<boolean>, default: false }),\n    defaultValue: ({ type: [String, Number, Object, Array] as PropType<OptionListValue | null> }),\n    name: ({ type: String as PropType<string>, default: generateUniqueId }),\n    color: ({ type: String as PropType<string>, default: 'primary' }),\n    leftLabel: ({ type: Boolean, default: false }),\n    modelValue: ({ type: [String, Number, Object, Array] as PropType<OptionListValue | null> }),\n  },\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit)\n    const { getValue, getText, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const input = ref<HTMLElement>()\n\n    const isRadio = computed(() => {\n      return props.type === 'radio'\n    })\n\n    const selectedValue = computed({\n      get () {\n        const value = isRadio.value ? null : []\n\n        return valueComputed.value || props.defaultValue || value as OptionListValue\n      },\n      set (value: OptionListValue) {\n        if (props.readonly) { return }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value\n        } else {\n          valueComputed.value = Array.isArray(value)\n            ? value.map(getValue)\n            : [value ? getValue(value) : value]\n        }\n      },\n    })\n\n    const getKey = (option: any) => getTrackBy(option)\n\n    const isDisabled = (option: any) => props.disabled || getDisabled(option)\n\n    const reset = () => { valueComputed.value = undefined }\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(input.value) && input.value.find(el => !el.disabled)\n\n      if (firstActiveEl && typeof firstActiveEl.focus === 'function') {\n        firstActiveEl.focus()\n      }\n    }\n\n    const { computedError, computedErrorMessages } = useValidation(props, emit, reset, focus)\n\n    onMounted(() => {\n      if (!valueComputed.value && props.defaultValue) {\n        selectedValue.value = props.defaultValue\n      }\n    })\n\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getKey,\n      isDisabled,\n      reset,\n      focus,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-option-list {\n  &__list {\n    line-height: var(--va-option-list-line-height);\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaOptionList from './VaOptionList.vue'\n\nexport default withConfigTransport(VaOptionList)\n"],"names":["defineComponent","name","components","VaRadio","VaCheckbox","VaSwitch","VaMessageListWrapper","emits","statefulComponentOptions","props","useSelectableListProps","useValidationProps","type","String","default","validator","includes","disabled","Boolean","readonly","defaultValue","Number","Object","Array","generateUniqueId","color","leftLabel","modelValue","setup","emit","valueComputed","useStateful","getValue","getText","getTrackBy","getDisabled","useSelectableList","input","ref","isRadio","computed","selectedValue","get","value","set","isArray","map","reset","undefined","focus","firstActiveEl","find","el","computedError","computedErrorMessages","useValidation","onMounted","getKey","option","isDisabled","_mergeProps","error","_ctx","errorCount","_createVNode","class","id","_createBlock","options","index","key","_renderSlot","label","tabindex","withConfigTransport","VaOptionList"],"mappings":"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"}