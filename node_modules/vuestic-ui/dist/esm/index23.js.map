{"version":3,"file":"index23.js","sources":["../../src/components/va-date-input/hooks/range-model-value-guard.ts","../../src/components/va-date-input/hooks/date-text-parser.ts","../../src/components/va-date-input/VaDateInput.vue","../../src/components/va-date-picker/hooks/sync-prop.ts","../../src/components/va-date-input/VaDateInput.vue?vue&type=template&id=139365e2&lang.js","../../src/components/va-date-input/index.ts"],"sourcesContent":["import { computed, Ref, ref, watch } from 'vue'\nimport { isRange } from '../../va-date-picker/hooks/model-value-helper'\nimport { VaDatePickerModelValue } from '../../va-date-picker/types/types'\n\nexport type useRangeModelValueGuardProps = {\n  clearValue: VaDatePickerModelValue | undefined\n  [prop: string]: unknown\n}\n\n/**\n * This guard is used to prevent updating modelValue if range end is not specified.\n * This guard provides reset method, that allow us to reset VaDateInput value if dropdown is closed.\n */\nexport const useRangeModelValueGuard = (\n  modelValue: Ref<VaDatePickerModelValue | undefined>,\n  disabled: Ref<boolean>,\n) => {\n  const bufferValue = ref<VaDatePickerModelValue | undefined>(modelValue.value)\n\n  const valueComputed = computed<VaDatePickerModelValue | undefined>({\n    get: () => bufferValue.value,\n    set: (value) => {\n      if (disabled.value) {\n        bufferValue.value = value\n        modelValue.value = value\n      }\n\n      if (!value) {\n        modelValue.value = value\n        bufferValue.value = value\n        return\n      }\n\n      if (isRange(value)) {\n        if (value.end !== null) {\n          modelValue.value = value\n        }\n      } else {\n        modelValue.value = value\n      }\n\n      bufferValue.value = value\n    },\n  })\n\n  watch(modelValue, (newValue) => {\n    bufferValue.value = newValue\n  })\n\n  const reset = () => {\n    if (bufferValue.value && isRange(bufferValue.value)) {\n      bufferValue.value = modelValue.value\n    }\n  }\n\n  return {\n    valueComputed,\n    reset,\n  }\n}\n","import { Ref, ref } from 'vue'\nimport { VaDatePickerModelValue } from '../../va-date-picker/types/types'\n\nconst defaultParseDateFunction = (text: string) => new Date(Date.parse(text))\n\nconst isInvalidDate = (d: Date) => !d || (d instanceof Date && isNaN(d.getTime()))\n\nexport const useDateParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => VaDatePickerModelValue,\n  parseDate?: (input: string) => Date,\n  delimiter: string,\n  rangeDelimiter: string,\n}) => {\n  const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parseDate || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (isInvalidDate(result)) {\n      isValid.value = false\n    }\n\n    return result\n  }\n\n  const parseDateInputValue = (text: string) => {\n    isValid.value = true\n\n    if (props.parse) {\n      return props.parse(text, isValid)\n    }\n\n    if (isTextIsMultipleDates(text)) {\n      return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    }\n\n    if (isTextIsDateRange(text)) {\n      const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n      return { start, end }\n    }\n\n    return parseDate(text)\n  }\n\n  return {\n    parseDateInputValue,\n    isValid,\n  }\n}\n","<template>\n  <div class=\"va-date-input\">\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\" :disabled=\"disabled\">\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\n          <va-input\n            v-bind=\"inputProps\"\n            ref=\"input\"\n            class=\"va-date-input__input\"\n            :model-value=\"valueText\"\n            :error=\"hasError\"\n            :error-messages=\"computedErrorMessages\"\n            :readonly=\"readonly || !manualInput\"\n            @change=\"onInputTextChanged\"\n          >\n            <template\n              v-for=\"name in filterSlots\"\n              v-slot:[name]=\"slotScope\"\n              :key=\"name\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n\n            <template #prependInner=\"slotScope\">\n              <slot name=\"prependInner\" v-bind=\"slotScope\" />\n              <va-icon\n                v-if=\"$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n\n            <template #icon>\n              <va-icon\n                v-if=\"canBeCleared\"\n                v-bind=\"clearIconProps\"\n                @click.stop=\"reset()\"\n              />\n              <va-icon\n                v-else-if=\"!$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker\n            v-bind=\"datePickerProps\"\n            v-model=\"valueComputed\"\n            @click:day=\"$emit('click:day', $event)\"\n            @click:month=\"$emit('click:month', $event)\"\n            @click:year=\"$emit('click:year', $event)\"\n            @hover:day=\"$emit('hover:day', $event)\"\n            @hover:month=\"$emit('hover:month', $event)\"\n            @hover:year=\"$emit('hover:year', $event)\"\n            @update:view=\"$emit('update:view', $event)\"\n        >\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch, ref } from 'vue'\nimport { useClearableProps, useClearableEmits, useClearable } from '../../composables/useClearable'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useStateful } from '../../composables/useStateful'\nimport { useFormProps } from '../../composables/useForm'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/date-text-parser'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport vaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaInput from '../va-input'\nimport VaIcon from '../va-icon'\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\n\nconst VaInputProps = {\n  ...useValidationProps,\n  ...useFormProps,\n\n  label: { type: String, required: false },\n  color: { type: String, default: 'primary' },\n  placeholder: { type: String, default: '' },\n  tabindex: { type: Number, default: 0 },\n  outline: { Boolean, default: false },\n  bordered: { type: Boolean, default: false },\n}\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    vaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInput,\n    VaIcon,\n  },\n\n  props: {\n    ...extractComponentProps(VaDatePicker),\n    ...VaInputProps,\n\n    ...useClearableProps,\n    clearValue: { type: Date as PropType<VaDatePickerModelValue>, default: undefined },\n\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean },\n\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: () => (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => VaDatePickerModelValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'calendar_today' },\n  },\n\n  emits: [\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit, slots }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const input = ref<InstanceType<typeof VaInput> | undefined>()\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return props.clearValue\n      }\n\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (!valueComputed.value) {\n        return props.clearValue\n      }\n\n      if (isDates(valueComputed.value)) {\n        return valueComputed.value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(valueComputed.value)) {\n        return props.formatDate(valueComputed.value)\n      }\n      if (isRange(valueComputed.value)) {\n        return dateOrNothing(valueComputed.value.start) + props.rangeDelimiter + dateOrNothing(valueComputed.value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    })\n\n    const onInputTextChanged = ({ target } : { target: HTMLInputElement }) => {\n      const parsedValue = parseDateInputValue(target.value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = (): void => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    // Will be used later, after fix 'withConfigTransport'\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const {\n      isFocused,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueComputed, isFocused, hasError)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n      class: 'va-date-input__icon',\n    }))\n\n    const computedInputProps = filterComponentProps(\n      props,\n      extractComponentProps(VaInput, ['rules', 'error', 'errorMessages', 'clearable']),\n    )\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n      hasError,\n      computedErrorMessages,\n\n      input,\n\n      inputProps: computedInputProps,\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      reset,\n\n      // Will be used later, after fix 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { (this as any).input?.focus() },\n    blur () { (this as any).input?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-date-input {\n  display: flex;\n  font-family: var(--va-font-family);\n\n  &__icon {\n    cursor: pointer;\n  }\n\n  &__input.va-input_readonly {\n    cursor: pointer;\n  }\n\n  --va-date-picker-cell-size: 28px;\n\n  .va-dropdown {\n    width: 100%;\n  }\n}\n</style>\n","import { ref, computed, Ref, UnwrapRef } from 'vue'\n\nexport function useSyncProp<T, PropName extends string> (propRef: Ref<T> | undefined, propName: PropName, emit: (event: any, newValue: T) => any, defaultValue?: T) {\n  if (defaultValue === undefined) {\n    return {\n      syncProp: computed({\n        set (value: T) {\n          emit(`update:${propName}`, value)\n        },\n        get (): T {\n          return propRef!.value\n        },\n      }),\n    }\n  }\n\n  const statefulValue = ref<T>(defaultValue)\n\n  return {\n    syncProp: computed<NonNullable<T>>({\n      set (value: NonNullable<T>) {\n        statefulValue.value = value as UnwrapRef<NonNullable<T>>\n        emit(`update:${propName}`, value)\n      },\n      get (): NonNullable<T> {\n        return (propRef?.value === undefined ? (statefulValue.value) : propRef.value) as NonNullable<T>\n      },\n    }),\n  }\n}\n","<template>\n  <div class=\"va-date-input\">\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\" :disabled=\"disabled\">\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\n          <va-input\n            v-bind=\"inputProps\"\n            ref=\"input\"\n            class=\"va-date-input__input\"\n            :model-value=\"valueText\"\n            :error=\"hasError\"\n            :error-messages=\"computedErrorMessages\"\n            :readonly=\"readonly || !manualInput\"\n            @change=\"onInputTextChanged\"\n          >\n            <template\n              v-for=\"name in filterSlots\"\n              v-slot:[name]=\"slotScope\"\n              :key=\"name\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n\n            <template #prependInner=\"slotScope\">\n              <slot name=\"prependInner\" v-bind=\"slotScope\" />\n              <va-icon\n                v-if=\"$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n\n            <template #icon>\n              <va-icon\n                v-if=\"canBeCleared\"\n                v-bind=\"clearIconProps\"\n                @click.stop=\"reset()\"\n              />\n              <va-icon\n                v-else-if=\"!$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker\n            v-bind=\"datePickerProps\"\n            v-model=\"valueComputed\"\n            @click:day=\"$emit('click:day', $event)\"\n            @click:month=\"$emit('click:month', $event)\"\n            @click:year=\"$emit('click:year', $event)\"\n            @hover:day=\"$emit('hover:day', $event)\"\n            @hover:month=\"$emit('hover:month', $event)\"\n            @hover:year=\"$emit('hover:year', $event)\"\n            @update:view=\"$emit('update:view', $event)\"\n        >\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch, ref } from 'vue'\nimport { useClearableProps, useClearableEmits, useClearable } from '../../composables/useClearable'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useStateful } from '../../composables/useStateful'\nimport { useFormProps } from '../../composables/useForm'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/date-text-parser'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport vaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaInput from '../va-input'\nimport VaIcon from '../va-icon'\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\n\nconst VaInputProps = {\n  ...useValidationProps,\n  ...useFormProps,\n\n  label: { type: String, required: false },\n  color: { type: String, default: 'primary' },\n  placeholder: { type: String, default: '' },\n  tabindex: { type: Number, default: 0 },\n  outline: { Boolean, default: false },\n  bordered: { type: Boolean, default: false },\n}\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    vaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInput,\n    VaIcon,\n  },\n\n  props: {\n    ...extractComponentProps(VaDatePicker),\n    ...VaInputProps,\n\n    ...useClearableProps,\n    clearValue: { type: Date as PropType<VaDatePickerModelValue>, default: undefined },\n\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean },\n\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: () => (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => VaDatePickerModelValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'calendar_today' },\n  },\n\n  emits: [\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit, slots }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const input = ref<InstanceType<typeof VaInput> | undefined>()\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return props.clearValue\n      }\n\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (!valueComputed.value) {\n        return props.clearValue\n      }\n\n      if (isDates(valueComputed.value)) {\n        return valueComputed.value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(valueComputed.value)) {\n        return props.formatDate(valueComputed.value)\n      }\n      if (isRange(valueComputed.value)) {\n        return dateOrNothing(valueComputed.value.start) + props.rangeDelimiter + dateOrNothing(valueComputed.value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    })\n\n    const onInputTextChanged = ({ target } : { target: HTMLInputElement }) => {\n      const parsedValue = parseDateInputValue(target.value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = (): void => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    // Will be used later, after fix 'withConfigTransport'\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const {\n      isFocused,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueComputed, isFocused, hasError)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n      class: 'va-date-input__icon',\n    }))\n\n    const computedInputProps = filterComponentProps(\n      props,\n      extractComponentProps(VaInput, ['rules', 'error', 'errorMessages', 'clearable']),\n    )\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n      hasError,\n      computedErrorMessages,\n\n      input,\n\n      inputProps: computedInputProps,\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      reset,\n\n      // Will be used later, after fix 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { (this as any).input?.focus() },\n    blur () { (this as any).input?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-date-input {\n  display: flex;\n  font-family: var(--va-font-family);\n\n  &__icon {\n    cursor: pointer;\n  }\n\n  &__input.va-input_readonly {\n    cursor: pointer;\n  }\n\n  --va-date-picker-cell-size: 28px;\n\n  .va-dropdown {\n    width: 100%;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaDateInputComponent from '../va-date-input/VaDateInput.vue'\n\nexport const VaDateInput = withConfigTransport(VaDateInputComponent)\n"],"names":["defaultParseDateFunction","text","Date","parse","useDateParser","props","isValid","ref","parseDate","result","d","isNaN","getTime","value","parseDateInputValue","includes","delimiter","isTextIsMultipleDates","split","map","dateText","rangeDelimiter","isTextIsDateRange","start","end","VaInputProps","useValidationProps","useFormProps","label","type","String","required","color","default","placeholder","tabindex","Number","outline","Boolean","bordered","defineComponent","name","components","vaDropdown","VaDropdownContent","VaDatePicker","VaInput","VaIcon","extractComponentProps","useClearableProps","clearValue","undefined","resetOnClose","isOpen","format","Function","formatDate","toLocaleDateString","manualInput","leftIcon","icon","emits","extractComponentEmits","useClearableEmits","useValidationEmits","setup","emit","slots","toRefs","valueComputed","statefulValue","useStateful","syncProp","isOpenSync","useSyncProp","propRef","propName","defaultValue","computed","set","get","isRangeModelValueGuardDisabled","reset","resetInvalidRange","modelValue","disabled","bufferValue","isRange","watch","newValue","useRangeModelValueGuard","isOpened","dateOrNothing","date","input","valueText","isDates","join","isSingleDate","Error","isFocused","computedError","computedErrorMessages","useValidation","focus","hasError","filterSlots","slotsWithIcons","clearable","Object","keys","filter","slot","canBeCleared","clearIconProps","useClearable","iconProps","size","class","computedInputProps","filterComponentProps","onInputTextChanged","target","parsedValue","inputProps","datePickerProps","methods","this","blur","_createElementBlock","_hoisted_1","_createVNode","_ctx","offset","anchor","_renderSlot","_mergeProps","error","readonly","onChange","prependInner","slotScope","_createBlock","onClick","$event","_","bind","VaDateInput","withConfigTransport","VaDateInputComponent"],"mappings":"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"}