{"version":3,"file":"useSelectableList.js","sources":["../../src/composables/useSelectableList.ts"],"sourcesContent":["// It's another implementation of SelectableListMixin functionality but for Composition API usage\n\nimport { getProp } from '../services/utils'\nimport { PropType } from 'vue'\n\nexport type SelectableOption = string | number | Record<string, unknown>\n\ntype StringOrFunction = string | ((option: SelectableOption) => string)\n\nexport type SelectableListProps = {\n  options: SelectableOption[]\n  textBy: StringOrFunction\n  valueBy: StringOrFunction\n  trackBy: StringOrFunction\n  disabledBy: StringOrFunction\n  groupBy: StringOrFunction\n}\n\nexport const useSelectableListProps = {\n  options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\n  groupBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'group' },\n}\n\nexport function useSelectableList (props: SelectableListProps) {\n  const isSelectableListComponent = true\n\n  const isStringOrNumber = (option: SelectableOption): option is (string | number) => {\n    const typeOfOption = typeof option\n    return typeOfOption === 'string' || typeOfOption === 'number'\n  }\n\n  const getOptionProperty = (option: SelectableOption, selector: StringOrFunction) => {\n    if (!selector) { return option }\n\n    return isStringOrNumber(option)\n      ? option\n      : getProp(option, selector)\n  }\n\n  const getValue = (option: SelectableOption) => getOptionProperty(option, props.valueBy)\n  const getOptionByValue = (value: SelectableOption) => {\n    if (!props.valueBy) { return value }\n\n    return props.options.find((option: SelectableOption) => value === getValue(option)) || value\n  }\n  const getText = (option: SelectableOption) => getOptionProperty(option, props.textBy)\n  const getDisabled = (option: SelectableOption) => getOptionProperty(option, props.disabledBy)\n  const getTrackBy = (option: SelectableOption) => getOptionProperty(option, props.trackBy)\n  const getGroupBy = (option: SelectableOption) => getOptionProperty(option, props.groupBy)\n\n  return {\n    isSelectableListComponent,\n    getValue,\n    getOptionByValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy,\n  }\n}\n"],"names":["useSelectableListProps","options","type","Array","default","textBy","String","Function","valueBy","trackBy","disabledBy","groupBy","useSelectableList","props","getOptionProperty","option","selector","typeOfOption","isStringOrNumber","getProp","getValue","isSelectableListComponent","getOptionByValue","value","find","getText","getDisabled","getTrackBy","getGroupBy"],"mappings":"qCAkBaA,EAAyB,CACpCC,QAAS,CAAEC,KAAMC,MAAuCC,QAAS,IAAM,IACvEC,OAAQ,CAAEH,KAAM,CAACI,OAAQC,UAAyCH,QAAS,QAC3EI,QAAS,CAAEN,KAAM,CAACI,OAAQC,UAAyCH,QAAS,IAC5EK,QAAS,CAAEP,KAAM,CAACI,OAAQC,UAAyCH,QAAS,SAC5EM,WAAY,CAAER,KAAM,CAACI,OAAQC,UAAyCH,QAAS,YAC/EO,QAAS,CAAET,KAAM,CAACI,OAAQC,UAAyCH,QAAS,mBAG9DQ,kBAAmBC,GACjC,MAOMC,kBAAoB,CAACC,EAA0BC,IAC9CA,EANkB,CAACD,IACxB,MAAME,SAAsBF,EAC5B,MAAwB,WAAjBE,GAA8C,WAAjBA,GAM7BC,CAAiBH,GACpBA,EACAI,EAAQJ,EAAQC,GAJID,EAOpBK,SAAYL,GAA6BD,kBAAkBC,EAAQF,EAAML,SAW/E,MAAO,CACLa,2BA3BgC,EA4BhCD,SAAAA,SACAE,iBAbwBC,GACnBV,EAAML,SAEJK,EAAMZ,QAAQuB,MAAMT,GAA6BQ,IAAUH,SAASL,MAF9CQ,EAa7BE,QATeV,GAA6BD,kBAAkBC,EAAQF,EAAMR,QAU5EqB,YATmBX,GAA6BD,kBAAkBC,EAAQF,EAAMH,YAUhFiB,WATkBZ,GAA6BD,kBAAkBC,EAAQF,EAAMJ,SAU/EmB,WATkBb,GAA6BD,kBAAkBC,EAAQF,EAAMF"}