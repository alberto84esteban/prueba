{"version":3,"file":"global-config-plugin.js","sources":["../../src/components/va-dropdown/dropdown-popover-subplugin.ts","../../src/components/va-toast/install.ts","../../src/utils/ssr-utils.ts","../../src/services/color-config/color-css-variables-updater.ts","../../src/services/global-config/global-config-plugin.ts"],"sourcesContent":["import { App } from 'vue'\n\nexport default {\n  install (app: App) {\n    app.config.globalProperties.$closeDropdown = function () {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let vm = this\n      // Hide first parent dropdown.\n      while ((vm = vm.$parent)) {\n        const name = vm.$options.name\n        if (name === 'VaDropdown') {\n          vm.hide()\n          break\n        }\n      }\n    }\n  },\n}\n","import { App } from 'vue'\nimport Notification from './index'\n\nexport default {\n  install (app: App) {\n    app.config.globalProperties.$vaToast = new Notification(app)\n  },\n}\n","export const isServer = () => typeof window === 'undefined'\nexport const isClient = () => !isServer()\n","import { watch } from 'vue'\nimport { useGlobalConfig } from '../global-config/global-config'\nimport { isServer } from '../../utils/ssr-utils'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(`--va-${name}`, value)\n}\n\nconst ColorHelpersPlugin = {\n  install () {\n    if (isServer()) { return }\n\n    const { globalConfig } = useGlobalConfig()\n\n    const root = document.documentElement\n\n    watch(() => globalConfig.value.colors, (newValue) => {\n      if (!newValue) { return }\n\n      const colorNames = Object.keys(newValue)\n      colorNames.forEach((key) => {\n        setCSSVariable(key, newValue[key], root)\n      })\n    }, { immediate: true, deep: true })\n  },\n}\n\nexport default ColorHelpersPlugin\n","import { App } from 'vue'\nimport { getGlobalConfig, setGlobalConfig, mergeGlobalConfig } from './global-config'\nimport { GlobalConfig } from './types'\n\nexport const GLOBAL_CONFIG = Symbol('GLOBAL_CONFIG')\n\ntype ProvidedGlobalConfig = { get: typeof getGlobalConfig, set: typeof setGlobalConfig, merge: typeof mergeGlobalConfig }\n\nexport const GlobalConfigPlugin = {\n  install (app: App, options?: GlobalConfig) {\n    if (options) { mergeGlobalConfig(options) }\n\n    const config = { get: getGlobalConfig, set: setGlobalConfig, merge: mergeGlobalConfig }\n\n    app.provide<ProvidedGlobalConfig>(GLOBAL_CONFIG, config)\n  },\n}\n"],"names":["install","app","config","globalProperties","$closeDropdown","vm","this","$parent","$options","name","hide","$vaToast","Notification","ColorHelpersPlugin","window","globalConfig","useGlobalConfig","root","document","documentElement","watch","value","colors","newValue","Object","keys","forEach","key","style","setProperty","setCSSVariable","immediate","deep","GLOBAL_CONFIG","Symbol","GlobalConfigPlugin","options","mergeGlobalConfig","get","getGlobalConfig","set","setGlobalConfig","merge","provide"],"mappings":"0HAEA,MAAe,CACbA,QAASC,GACPA,EAAIC,OAAOC,iBAAiBC,eAAiB,WAE3C,IAAIC,EAAKC,KAET,KAAQD,EAAKA,EAAGE,SAAU,CAExB,GAAa,eADAF,EAAGG,SAASC,KACE,CACzBJ,EAAGK,OACH,aCTK,CACbV,QAASC,GACPA,EAAIC,OAAOC,iBAAiBQ,SAAW,IAAIC,EAAaX,KCLrD,MCQDY,EAAqB,CACzBb,UACE,GDV4C,oBAAXc,OCUf,OAElB,MAAMC,aAAEA,GAAiBC,IAEnBC,EAAOC,SAASC,gBAEtBC,GAAM,IAAML,EAAaM,MAAMC,SAASC,IACtC,IAAKA,EAAY,OAEEC,OAAOC,KAAKF,GACpBG,SAASC,IAhBI,EAAClB,EAAcY,EAAeJ,KAC1DA,EAAKW,MAAMC,YAAY,QAAQpB,IAAQY,IAgBjCS,CAAeH,EAAKJ,EAASI,GAAMV,QAEpC,CAAEc,WAAW,EAAMC,MAAM,MCnBnBC,EAAgBC,OAAO,iBAIvBC,EAAqB,CAChCnC,QAASC,EAAUmC,GACbA,GAAWC,EAAkBD,GAEjC,MAAMlC,EAAS,CAAEoC,IAAKC,EAAiBC,IAAKC,EAAiBC,MAAOL,GAEpEpC,EAAI0C,QAA8BV,EAAe/B"}