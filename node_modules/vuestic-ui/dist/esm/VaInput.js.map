{"version":3,"file":"VaInput.js","sources":["../../src/components/va-input/hooks/useCleave.ts","../../src/components/va-input/components/VaInputWrapper.vue","../../src/composables/useBem.ts","../../src/components/va-input/components/VaInputWrapper.vue?vue&type=template&id=6c3205d6&lang.js","../../src/composables/useClearable.ts","../../src/components/va-input/components/VaTextarea/useTextareaRowHeight.ts","../../src/components/va-input/components/VaTextarea/VaTextarea.vue","../../src/components/va-input/components/VaTextarea/VaTextarea.vue?vue&type=template&id=150a9286&lang.js","../../src/components/va-input/VaInput.vue","../../src/components/va-input/VaInput.vue?vue&type=template&id=db73a230&lang.js"],"sourcesContent":["import Cleave from 'cleave.js'\nimport { CleaveOptions } from 'cleave.js/options'\nimport { computed, onBeforeUnmount, onMounted, ref, Ref, watch } from 'vue'\n\nconst DEFAULT_MASK_TOKENS: Record<string, Record<string, unknown>> = {\n  creditCard: {\n    creditCard: true,\n  },\n  date: {\n    date: true,\n    datePattern: ['d', 'm', 'Y'],\n  },\n  time: {\n    time: true,\n    timePattern: ['h', 'm'],\n    timeFormat: '24',\n  },\n  numeral: {\n    numeral: true,\n    numeralThousandsGroupStyle: 'thousand',\n  },\n}\n\nexport const useCleaveProps = {\n  mask: { type: [String, Object], default: '' },\n  returnRaw: { type: Boolean, default: true },\n  modelValue: { type: String },\n}\n\ntype Props = {\n  mask: string | Record<string, string>,\n  returnRaw: boolean,\n  modelValue: string | number,\n}\n\nexport const useCleave = (\n  element: Ref<HTMLInputElement | undefined>,\n  props: Props,\n  emit: (event: 'update:modelValue' | any, ...args: any[]) => any,\n) => {\n  const cleave = ref<Cleave>()\n\n  const getMask = (mask: CleaveOptions | string) => {\n    if (typeof mask === 'string') {\n      return DEFAULT_MASK_TOKENS[mask] ? { ...DEFAULT_MASK_TOKENS[mask] } : {}\n    }\n    return { ...mask }\n  }\n\n  const destroyCleave = () => {\n    if (cleave.value) { cleave.value.destroy() }\n  }\n\n  const initCleave = () => {\n    destroyCleave()\n\n    if (!element.value) { return }\n\n    cleave.value = new Cleave(element.value, getMask(props.mask))\n  }\n\n  onMounted(() => { initCleave() })\n  onBeforeUnmount(() => { destroyCleave() })\n\n  watch(() => [element.value, props.mask], () => { initCleave() })\n\n  const computedValue = computed<string | number>(() => {\n    if (cleave.value) {\n      if (props.returnRaw && props.modelValue === cleave.value.getRawValue()) {\n        return cleave.value.getFormattedValue()\n      }\n    }\n\n    return props.modelValue\n  })\n\n  const onInput = (event: Event) => {\n    const value = (event.target as HTMLInputElement).value\n\n    if (props.mask !== 'string' && !Object.keys(props.mask).length) {\n      emit('update:modelValue', value)\n      return\n    }\n\n    if (cleave.value) {\n      cleave.value.setRawValue(value)\n      if (props.returnRaw) {\n        emit('update:modelValue', cleave.value.getRawValue())\n        return\n      }\n    }\n\n    emit('update:modelValue', value)\n  }\n\n  return {\n    cleave,\n    computedValue,\n    onInput,\n  }\n}\n","<template>\n  <div\n    class=\"va-input-wrapper\"\n    :class=\"wrapperClass\"\n    @click=\"$emit('click', $event)\"\n  >\n    <div class=\"va-input-wrapper__input\">\n      <div\n        v-if=\"$slots.prepend\"\n        class=\"va-input-wrapper__prepend-inner\"\n        @click=\"$emit('click-prepend')\"\n      >\n        <slot name=\"prepend\" />\n      </div>\n\n      <div class=\"va-input-wrapper__content\">\n        <div\n          class=\"va-input__container\"\n          ref=\"container\"\n          :style=\"{ borderColor: borderColorComputed }\"\n        >\n          <div\n            v-if=\"$slots.prependInner\"\n            class=\"va-input__prepend-inner\"\n            @click=\"$emit('click-prepend-inner', $event)\"\n          >\n            <slot name=\"prependInner\" />\n          </div>\n\n          <div class=\"va-input__content-wrapper\">\n            <div class=\"va-input__content\">\n              <label\n                v-if=\"label\"\n                aria-hidden=\"true\"\n                class=\"va-input__label\"\n                :style=\"{ color: colorComputed }\"\n              >\n                {{ label }}\n                <span\n                  v-if=\"requiredMark\"\n                  class=\"va-input__required-mark\"\n                >\n                  *\n                </span>\n              </label>\n\n              <div v-if=\"$slots.content\" class=\"va-input__content__input\">\n                <slot name=\"content\" />\n              </div>\n\n              <slot />\n            </div>\n          </div>\n\n          <div\n            v-if=\"$slots.icon\"\n            class=\"va-input__icons\"\n            @click=\"$emit('click-icon', $event)\"\n          >\n            <slot name=\"icon\" />\n          </div>\n\n          <div\n            v-if=\"$slots.appendInner\"\n            class=\"va-input__append-inner\"\n            @click=\"$emit('click-append-inner', $event)\"\n          >\n            <slot name=\"appendInner\" />\n          </div>\n        </div>\n\n        <div\n          v-if=\"bordered\"\n          class=\"va-input--bordered__border\"\n          :style=\"{ borderColor: borderColorComputed }\"\n        />\n      </div>\n\n      <div\n        v-if=\"$slots.append\"\n        class=\"va-input-wrapper__append-inner\"\n        @click=\"$emit('click-append')\"\n      >\n        <slot name=\"append\" />\n      </div>\n    </div>\n\n    <div class=\"va-input-wrapper__message-list-wrapper\">\n      <slot name=\"messages\" v-bind=\"{ messages: messagesComputed, errorLimit, color: messagesColor }\">\n        <va-message-list\n          :color=\"messagesColor\"\n          :model-value=\"messagesComputed\"\n          :limit=\"errorLimit\"\n        />\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { useBem } from '../../../composables/useBem'\nimport { useFormProps } from '../../../composables/useForm'\nimport { useValidationProps } from '../../../composables/useValidation'\nimport { getColor } from '../../../services/color-config/color-config'\nimport VaMessageList from './VaMessageList'\n\nexport default defineComponent({\n  name: 'VaInputWrapper',\n\n  components: { VaMessageList },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps,\n\n    label: { type: String, default: '' },\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    focused: { type: Boolean, default: false },\n    error: { type: Boolean, default: false },\n    success: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'click',\n    'click-prepend',\n    'click-append',\n    'click-prepend-inner',\n    'click-append-inner',\n    'click-icon',\n  ],\n\n  setup (props) {\n    const { createModifiersClasses } = useBem('va-input')\n\n    const colorComputed = computed(() => getColor(props.color))\n\n    return {\n      wrapperClass: createModifiersClasses(() => ({\n        outline: props.outline,\n        bordered: props.bordered,\n        solid: !props.outline && !props.bordered,\n        disabled: props.disabled,\n        readonly: props.readonly,\n        labeled: !!props.label,\n        success: props.success,\n        focused: props.focused,\n        error: props.error,\n      })),\n\n      colorComputed,\n      borderColorComputed: computed(() => props.focused ? colorComputed.value : undefined),\n\n      messagesColor: computed(() => {\n        if (props.error) { return 'danger' }\n        if (props.success) { return 'success' }\n\n        return ''\n      }),\n      messagesComputed: computed(() => props.error ? props.errorMessages : props.messages),\n      errorLimit: computed(() => props.error ? props.errorCount : 99),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../../styles/resources/index.scss';\n@import '../variables';\n\n.va-input {\n  position: relative;\n  color: var(--va-input-text-color);\n  cursor: var(--va-input-cursor);\n  font-family: var(--va-font-family);\n\n  &--readonly {\n    cursor: default;\n  }\n\n  &--disabled {\n    @include va-disabled;\n  }\n\n  &__container {\n    display: flex;\n    position: relative;\n    align-items: center;\n    width: 100%;\n    min-height: var(--va-input-min-height);\n    border-color: var(--va-input-color);\n    border-style: solid;\n    border-width: var(--va-input-border-width);\n    overflow: hidden;\n    padding: 0 var(--va-input-content-horizontal-padding);\n\n    /* Creates gap between prepend, content, validation icons, append */\n    & > * {\n      padding-right: var(--va-input-content-items-gap);\n      line-height: 0;\n\n      &:last-child {\n        padding-right: 0;\n      }\n    }\n  }\n\n  &-wrapper__input {\n    display: flex;\n    align-items: center;\n  }\n\n  &-wrapper__message-list-wrapper {\n    margin-top: 2px;\n  }\n\n  &-wrapper__content {\n    position: relative;\n    flex-grow: 1;\n  }\n\n  &-wrapper__prepend-inner,\n  &-wrapper__append-inner,\n  &__prepend-inner,\n  &__append-inner {\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    align-items: center;\n  }\n\n  &__content-wrapper {\n    display: flex;\n    align-items: center;\n    width: 100%;\n\n    .va-input__content {\n      width: 100%;\n      position: relative;\n\n      input {\n        cursor: inherit;\n      }\n\n      &__input {\n        @include va-scroll(var(--va-input-scroll-color));\n\n        width: 100%;\n        // Use line-height as min-height for empty content slot\n        min-height: var(--va-input-line-height);\n        color: var(--va-input-text-color);\n        background-color: transparent;\n        border-style: none;\n        outline: none;\n        line-height: var(--va-input-line-height);\n        font-size: var(--va-input-font-size);\n        font-family: inherit;\n        font-weight: var(--va-input-font-weight);\n        font-style: var(--va-input-font-style);\n        font-stretch: var(--va-input-font-stretch);\n        letter-spacing: var(--va-input-letter-spacing);\n        transform: translateY(-1px);\n\n        &::-webkit-scrollbar {\n          width: 10px;\n        }\n\n        &::placeholder {\n          color: var(--va-input-placeholder-text-color);\n        }\n\n        &:disabled {\n          opacity: var(--va-input-disabled-opacity);\n        }\n      }\n    }\n  }\n\n  &__icons {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    & > * {\n      margin-right: calc(var(--va-input-content-items-gap) / 4);\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  &__required-mark {\n    transform: translate(0, -2px);\n    color: var(--va-danger);\n    font-size: 18px;\n    font-weight: var(--va-input-container-label-font-weight);\n  }\n\n  textarea {\n    margin: 12px 0;\n    resize: vertical;\n  }\n\n  &--labeled {\n    .va-input__content-wrapper {\n      padding-top: 12px;\n      height: 100%;\n      align-items: flex-end;\n    }\n\n    .va-input__label {\n      @include va-ellipsis();\n\n      height: 12px;\n      transform: translateY(-100%);\n      position: absolute;\n      left: 0;\n      top: 0;\n      display: flex;\n      padding-top: 1px;\n      max-width: var(--va-input-container-label-max-width);\n      color: var(--va-input-container-label-color);\n      font-size: var(--va-input-container-label-font-size);\n      letter-spacing: var(--va-input-container-label-letter-spacing, var(--va-letter-spacing));\n      line-height: var(--va-input-container-label-line-height);\n      font-weight: var(--va-input-container-label-font-weight);\n      text-transform: var(--va-input-container-label-text-transform);\n      transform-origin: top left;\n    }\n\n    textarea {\n      margin-top: 0;\n    }\n  }\n\n  /* We have 3 styles and two states for each style separately */\n  &--solid {\n    .va-input__container {\n      background: var(--va-input-color);\n      border-color: var(--va-input-color);\n      border-radius: var(--va-input-border-radius);\n    }\n\n    &.va-input--success {\n      .va-input__container {\n        background: var(--va-input-success-background);\n        border-color: var(--va-input-success-color);\n      }\n    }\n\n    &.va-input--error {\n      .va-input__container {\n        background: var(--va-input-error-background);\n        border-color: var(--va-input-error-color);\n      }\n    }\n  }\n\n  &--outline {\n    .va-input__container {\n      border-radius: 0;\n      border-color: var(--va-input-bordered-color);\n    }\n\n    &.va-input--success {\n      .va-input__container {\n        background: var(--va-input-success-background);\n        border-color: var(--va-input-success-color);\n      }\n    }\n\n    &.va-input--error {\n      .va-input__container {\n        background: var(--va-input-error-background);\n        border-color: var(--va-input-error-color);\n      }\n    }\n  }\n\n  &--bordered {\n    /*\n      We can not just set border-bottom, because we also have border on the other sides.\n      We also can not use after or before, because we need to set border-color according to\n      color prop\n    */\n    &__border {\n      border-color: var(--va-input-bordered-color);\n      position: absolute;\n      height: 0;\n      border-bottom-width: var(--va-input-border-width);\n      border-bottom-style: solid;\n      width: 100%;\n      bottom: 0;\n    }\n\n    .va-input__container {\n      background: var(--va-input-color);\n      border-top-left-radius: var(--va-input-border-radius);\n      border-top-right-radius: var(--va-input-border-radius);\n      border-color: transparent !important;\n    }\n\n    &.va-input--success {\n      .va-input__container {\n        background: var(--va-input-success-background);\n      }\n\n      .va-input_bordered__border {\n        border-color: var(--va-input-success-color);\n      }\n    }\n\n    &.va-input--error {\n      .va-input__container {\n        background: var(--va-input-error-background);\n      }\n\n      .va-input_bordered__border {\n        border-color: var(--va-input-error-color);\n      }\n    }\n  }\n}\n</style>\n","import { computed, Ref, unref } from 'vue'\n\nexport const useBem = (baseClass: string) => {\n  const createModifiersClasses = (modifiersCb: () => Record<string, boolean>, classes: string[] | Ref<string[]> = []) => {\n    return computed(() => {\n      const modifiers = modifiersCb()\n      return [\n        baseClass,\n        ...unref(classes),\n        ...Object\n          .keys(modifiers)\n          .filter((modifierName) => modifiers[modifierName])\n          .map((modifierName) => `${baseClass}--${modifierName}`),\n      ]\n    })\n  }\n\n  return {\n    createModifiersClasses,\n  }\n}\n","<template>\n  <div\n    class=\"va-input-wrapper\"\n    :class=\"wrapperClass\"\n    @click=\"$emit('click', $event)\"\n  >\n    <div class=\"va-input-wrapper__input\">\n      <div\n        v-if=\"$slots.prepend\"\n        class=\"va-input-wrapper__prepend-inner\"\n        @click=\"$emit('click-prepend')\"\n      >\n        <slot name=\"prepend\" />\n      </div>\n\n      <div class=\"va-input-wrapper__content\">\n        <div\n          class=\"va-input__container\"\n          ref=\"container\"\n          :style=\"{ borderColor: borderColorComputed }\"\n        >\n          <div\n            v-if=\"$slots.prependInner\"\n            class=\"va-input__prepend-inner\"\n            @click=\"$emit('click-prepend-inner', $event)\"\n          >\n            <slot name=\"prependInner\" />\n          </div>\n\n          <div class=\"va-input__content-wrapper\">\n            <div class=\"va-input__content\">\n              <label\n                v-if=\"label\"\n                aria-hidden=\"true\"\n                class=\"va-input__label\"\n                :style=\"{ color: colorComputed }\"\n              >\n                {{ label }}\n                <span\n                  v-if=\"requiredMark\"\n                  class=\"va-input__required-mark\"\n                >\n                  *\n                </span>\n              </label>\n\n              <div v-if=\"$slots.content\" class=\"va-input__content__input\">\n                <slot name=\"content\" />\n              </div>\n\n              <slot />\n            </div>\n          </div>\n\n          <div\n            v-if=\"$slots.icon\"\n            class=\"va-input__icons\"\n            @click=\"$emit('click-icon', $event)\"\n          >\n            <slot name=\"icon\" />\n          </div>\n\n          <div\n            v-if=\"$slots.appendInner\"\n            class=\"va-input__append-inner\"\n            @click=\"$emit('click-append-inner', $event)\"\n          >\n            <slot name=\"appendInner\" />\n          </div>\n        </div>\n\n        <div\n          v-if=\"bordered\"\n          class=\"va-input--bordered__border\"\n          :style=\"{ borderColor: borderColorComputed }\"\n        />\n      </div>\n\n      <div\n        v-if=\"$slots.append\"\n        class=\"va-input-wrapper__append-inner\"\n        @click=\"$emit('click-append')\"\n      >\n        <slot name=\"append\" />\n      </div>\n    </div>\n\n    <div class=\"va-input-wrapper__message-list-wrapper\">\n      <slot name=\"messages\" v-bind=\"{ messages: messagesComputed, errorLimit, color: messagesColor }\">\n        <va-message-list\n          :color=\"messagesColor\"\n          :model-value=\"messagesComputed\"\n          :limit=\"errorLimit\"\n        />\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { useBem } from '../../../composables/useBem'\nimport { useFormProps } from '../../../composables/useForm'\nimport { useValidationProps } from '../../../composables/useValidation'\nimport { getColor } from '../../../services/color-config/color-config'\nimport VaMessageList from './VaMessageList'\n\nexport default defineComponent({\n  name: 'VaInputWrapper',\n\n  components: { VaMessageList },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps,\n\n    label: { type: String, default: '' },\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    focused: { type: Boolean, default: false },\n    error: { type: Boolean, default: false },\n    success: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'click',\n    'click-prepend',\n    'click-append',\n    'click-prepend-inner',\n    'click-append-inner',\n    'click-icon',\n  ],\n\n  setup (props) {\n    const { createModifiersClasses } = useBem('va-input')\n\n    const colorComputed = computed(() => getColor(props.color))\n\n    return {\n      wrapperClass: createModifiersClasses(() => ({\n        outline: props.outline,\n        bordered: props.bordered,\n        solid: !props.outline && !props.bordered,\n        disabled: props.disabled,\n        readonly: props.readonly,\n        labeled: !!props.label,\n        success: props.success,\n        focused: props.focused,\n        error: props.error,\n      })),\n\n      colorComputed,\n      borderColorComputed: computed(() => props.focused ? colorComputed.value : undefined),\n\n      messagesColor: computed(() => {\n        if (props.error) { return 'danger' }\n        if (props.success) { return 'success' }\n\n        return ''\n      }),\n      messagesComputed: computed(() => props.error ? props.errorMessages : props.messages),\n      errorLimit: computed(() => props.error ? props.errorCount : 99),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../../styles/resources/index.scss';\n@import '../variables';\n\n.va-input {\n  position: relative;\n  color: var(--va-input-text-color);\n  cursor: var(--va-input-cursor);\n  font-family: var(--va-font-family);\n\n  &--readonly {\n    cursor: default;\n  }\n\n  &--disabled {\n    @include va-disabled;\n  }\n\n  &__container {\n    display: flex;\n    position: relative;\n    align-items: center;\n    width: 100%;\n    min-height: var(--va-input-min-height);\n    border-color: var(--va-input-color);\n    border-style: solid;\n    border-width: var(--va-input-border-width);\n    overflow: hidden;\n    padding: 0 var(--va-input-content-horizontal-padding);\n\n    /* Creates gap between prepend, content, validation icons, append */\n    & > * {\n      padding-right: var(--va-input-content-items-gap);\n      line-height: 0;\n\n      &:last-child {\n        padding-right: 0;\n      }\n    }\n  }\n\n  &-wrapper__input {\n    display: flex;\n    align-items: center;\n  }\n\n  &-wrapper__message-list-wrapper {\n    margin-top: 2px;\n  }\n\n  &-wrapper__content {\n    position: relative;\n    flex-grow: 1;\n  }\n\n  &-wrapper__prepend-inner,\n  &-wrapper__append-inner,\n  &__prepend-inner,\n  &__append-inner {\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    align-items: center;\n  }\n\n  &__content-wrapper {\n    display: flex;\n    align-items: center;\n    width: 100%;\n\n    .va-input__content {\n      width: 100%;\n      position: relative;\n\n      input {\n        cursor: inherit;\n      }\n\n      &__input {\n        @include va-scroll(var(--va-input-scroll-color));\n\n        width: 100%;\n        // Use line-height as min-height for empty content slot\n        min-height: var(--va-input-line-height);\n        color: var(--va-input-text-color);\n        background-color: transparent;\n        border-style: none;\n        outline: none;\n        line-height: var(--va-input-line-height);\n        font-size: var(--va-input-font-size);\n        font-family: inherit;\n        font-weight: var(--va-input-font-weight);\n        font-style: var(--va-input-font-style);\n        font-stretch: var(--va-input-font-stretch);\n        letter-spacing: var(--va-input-letter-spacing);\n        transform: translateY(-1px);\n\n        &::-webkit-scrollbar {\n          width: 10px;\n        }\n\n        &::placeholder {\n          color: var(--va-input-placeholder-text-color);\n        }\n\n        &:disabled {\n          opacity: var(--va-input-disabled-opacity);\n        }\n      }\n    }\n  }\n\n  &__icons {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    & > * {\n      margin-right: calc(var(--va-input-content-items-gap) / 4);\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  &__required-mark {\n    transform: translate(0, -2px);\n    color: var(--va-danger);\n    font-size: 18px;\n    font-weight: var(--va-input-container-label-font-weight);\n  }\n\n  textarea {\n    margin: 12px 0;\n    resize: vertical;\n  }\n\n  &--labeled {\n    .va-input__content-wrapper {\n      padding-top: 12px;\n      height: 100%;\n      align-items: flex-end;\n    }\n\n    .va-input__label {\n      @include va-ellipsis();\n\n      height: 12px;\n      transform: translateY(-100%);\n      position: absolute;\n      left: 0;\n      top: 0;\n      display: flex;\n      padding-top: 1px;\n      max-width: var(--va-input-container-label-max-width);\n      color: var(--va-input-container-label-color);\n      font-size: var(--va-input-container-label-font-size);\n      letter-spacing: var(--va-input-container-label-letter-spacing, var(--va-letter-spacing));\n      line-height: var(--va-input-container-label-line-height);\n      font-weight: var(--va-input-container-label-font-weight);\n      text-transform: var(--va-input-container-label-text-transform);\n      transform-origin: top left;\n    }\n\n    textarea {\n      margin-top: 0;\n    }\n  }\n\n  /* We have 3 styles and two states for each style separately */\n  &--solid {\n    .va-input__container {\n      background: var(--va-input-color);\n      border-color: var(--va-input-color);\n      border-radius: var(--va-input-border-radius);\n    }\n\n    &.va-input--success {\n      .va-input__container {\n        background: var(--va-input-success-background);\n        border-color: var(--va-input-success-color);\n      }\n    }\n\n    &.va-input--error {\n      .va-input__container {\n        background: var(--va-input-error-background);\n        border-color: var(--va-input-error-color);\n      }\n    }\n  }\n\n  &--outline {\n    .va-input__container {\n      border-radius: 0;\n      border-color: var(--va-input-bordered-color);\n    }\n\n    &.va-input--success {\n      .va-input__container {\n        background: var(--va-input-success-background);\n        border-color: var(--va-input-success-color);\n      }\n    }\n\n    &.va-input--error {\n      .va-input__container {\n        background: var(--va-input-error-background);\n        border-color: var(--va-input-error-color);\n      }\n    }\n  }\n\n  &--bordered {\n    /*\n      We can not just set border-bottom, because we also have border on the other sides.\n      We also can not use after or before, because we need to set border-color according to\n      color prop\n    */\n    &__border {\n      border-color: var(--va-input-bordered-color);\n      position: absolute;\n      height: 0;\n      border-bottom-width: var(--va-input-border-width);\n      border-bottom-style: solid;\n      width: 100%;\n      bottom: 0;\n    }\n\n    .va-input__container {\n      background: var(--va-input-color);\n      border-top-left-radius: var(--va-input-border-radius);\n      border-top-right-radius: var(--va-input-border-radius);\n      border-color: transparent !important;\n    }\n\n    &.va-input--success {\n      .va-input__container {\n        background: var(--va-input-success-background);\n      }\n\n      .va-input_bordered__border {\n        border-color: var(--va-input-success-color);\n      }\n    }\n\n    &.va-input--error {\n      .va-input__container {\n        background: var(--va-input-error-background);\n      }\n\n      .va-input_bordered__border {\n        border-color: var(--va-input-error-color);\n      }\n    }\n  }\n}\n</style>\n","import { computed, Ref } from 'vue'\n\ninterface ClearableProps {\n  clearable: boolean\n  clearableIcon: string\n  clearValue: any\n  disabled?: boolean\n  readonly?: boolean\n  success?: boolean\n  color?: string\n}\n\nexport const useClearableProps = {\n  clearable: { type: Boolean, default: false },\n  clearableIcon: { type: String, default: 'highlight_off' },\n  clearValue: { type: String, default: '' },\n}\n\nexport const useClearableEmits = ['clear']\n\nexport const useClearable = (\n  props: ClearableProps,\n  inputValue: Ref<any>,\n  isFocused?: Ref<boolean>,\n  hasError?: Ref<boolean>,\n) => {\n  const clearedValues = [null, undefined, props.clearValue]\n\n  const canBeCleared = computed(() => (\n    props.clearable &&\n    !props.disabled &&\n    !props.readonly &&\n    !clearedValues.includes(inputValue.value)\n  ))\n\n  const clearIconColor = computed(() => {\n    if (isFocused?.value) { return props.color || 'primary' }\n    if (hasError?.value) { return 'danger' }\n    if (props.success) { return 'success' }\n\n    return 'gray'\n  })\n\n  const clearIconProps = computed(() => ({\n    name: props.clearableIcon,\n    color: clearIconColor.value,\n    size: 'small',\n  }))\n\n  return {\n    canBeCleared,\n    clearIconColor,\n    clearIconProps,\n  }\n}\n","import { Ref } from 'vue'\n\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`\n\nconst SIZING_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\nconst getNodeHeightStyles = (node: HTMLElement) => {\n  const style = window.getComputedStyle(node)\n\n  return {\n    boxSizing:\n      style.getPropertyValue('box-sizing') ||\n      style.getPropertyValue('-moz-box-sizing') ||\n      style.getPropertyValue('-webkit-box-sizing'),\n    padding:\n      parseFloat(style.getPropertyValue('padding-bottom')) +\n      parseFloat(style.getPropertyValue('padding-top')),\n    border:\n      parseFloat(style.getPropertyValue('border-bottom-width')) +\n      parseFloat(style.getPropertyValue('border-top-width')),\n    styles:\n      SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';') + ';',\n    lineHeight:\n      parseInt(style.getPropertyValue('line-height')),\n  }\n}\n\nlet textarea: null | HTMLTextAreaElement = null\n\nconst createHiddenTextarea = (original: HTMLTextAreaElement, styles: string) => {\n  if (!textarea) {\n    textarea = document.createElement('textarea')\n  }\n\n  textarea.setAttribute('style', styles + HIDDEN_TEXTAREA_STYLE)\n  textarea.value = original.value || original.placeholder || ''\n  const wrap = original.getAttribute('wrap')\n\n  if (wrap !== null) {\n    textarea.setAttribute('wrap', wrap)\n  } else {\n    textarea.removeAttribute('wrap')\n  }\n\n  return textarea\n}\n\nexport const useTextareaRowHeight = (textarea: Ref<HTMLTextAreaElement | undefined>) => {\n  const calculateRowHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    return getNodeHeightStyles(textarea.value).lineHeight\n  }\n\n  const calculateHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    const { boxSizing, padding, border, styles } = getNodeHeightStyles(textarea.value)\n    const hiddenTextarea = createHiddenTextarea(textarea.value, styles)\n    document.body.appendChild(hiddenTextarea)\n    let height = hiddenTextarea.scrollHeight\n\n    if (boxSizing === 'border-box') {\n      height += border\n    } else if (boxSizing === 'content-box') {\n      height -= padding\n    }\n\n    document.body.removeChild(hiddenTextarea)\n\n    return height\n  }\n\n  return {\n    calculateRowHeight,\n    calculateHeight,\n  }\n}\n","<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n    :style=\"computedStyle\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick } from 'vue'\nimport pick from 'lodash/pick'\nimport { useFormProps } from '../../../../composables/useForm'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\nimport { useEmitProxy } from '../../../../composables/useEmitProxy'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = ref<HTMLTextAreaElement | undefined>()\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return (props.autosize || props.maxRows || props.minRows !== 1) && textarea.value\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows && (rowHeight.value * props.maxRows + 'px'),\n      height: height.value + 'px',\n      resize: isResizable.value && 'none',\n    }))\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n\n      // will used after fix 'useConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we use this while we have problem with 'useConfigTransport'\n  methods: {\n    focus () { this.textarea?.focus() },\n    blur () { this.textarea?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n    :style=\"computedStyle\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick } from 'vue'\nimport pick from 'lodash/pick'\nimport { useFormProps } from '../../../../composables/useForm'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\nimport { useEmitProxy } from '../../../../composables/useEmitProxy'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = ref<HTMLTextAreaElement | undefined>()\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return (props.autosize || props.maxRows || props.minRows !== 1) && textarea.value\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows && (rowHeight.value * props.maxRows + 'px'),\n      height: height.value + 'px',\n      resize: isResizable.value && 'none',\n    }))\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n\n      // will used after fix 'useConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we use this while we have problem with 'useConfigTransport'\n  methods: {\n    focus () { this.textarea?.focus() },\n    blur () { this.textarea?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <VaInputWrapper\n    v-bind=\"fieldListeners\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"color\"\n    :readonly=\"readonly\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"label\"\n    :bordered=\"bordered\"\n    :outline=\"outline\"\n    :focused=\"isFocused\"\n    :requiredMark=\"requiredMark\"\n    @click=\"input && input.focus()\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"success\"\n        color=\"success\"\n        name=\"check_circle\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"computedError\"\n        color=\"danger\"\n        name=\"warning\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"canBeCleared\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset()\"\n      />\n      <va-icon\n        v-if=\"loading\"\n        :color=\"color\"\n        size=\"small\"\n        name=\"loop\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, ref, toRefs } from 'vue'\nimport { useFormProps } from '../../composables/useForm'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\nimport { useEmitProxy } from '../../composables/useEmitProxy'\nimport VaInputWrapper from './components/VaInputWrapper.vue'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n  'click-icon',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as PropType<'text' | 'textarea'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = ref<HTMLInputElement | InstanceType<typeof VaTextarea> | undefined>()\n\n    const reset = () => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      isFocused,\n      listeners: validationListeners,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, isFocused, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => {\n      return props.type === 'textarea'\n        ? undefined\n        : input.value as HTMLInputElement | undefined\n    })\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'tabindex', 'disabled', 'readonly', 'placeholder']),\n    }) as InputHTMLAttributes)\n\n    return {\n      input,\n      inputEvents,\n\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(props, VaTextareaProps),\n      computedValue,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      reset,\n      filterSlots,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { this.input?.focus() },\n    blur () { this.input?.blur() },\n  },\n})\n</script>\n","<template>\n  <VaInputWrapper\n    v-bind=\"fieldListeners\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"color\"\n    :readonly=\"readonly\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"label\"\n    :bordered=\"bordered\"\n    :outline=\"outline\"\n    :focused=\"isFocused\"\n    :requiredMark=\"requiredMark\"\n    @click=\"input && input.focus()\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"success\"\n        color=\"success\"\n        name=\"check_circle\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"computedError\"\n        color=\"danger\"\n        name=\"warning\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"canBeCleared\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset()\"\n      />\n      <va-icon\n        v-if=\"loading\"\n        :color=\"color\"\n        size=\"small\"\n        name=\"loop\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, ref, toRefs } from 'vue'\nimport { useFormProps } from '../../composables/useForm'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\nimport { useEmitProxy } from '../../composables/useEmitProxy'\nimport VaInputWrapper from './components/VaInputWrapper.vue'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n  'click-icon',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as PropType<'text' | 'textarea'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = ref<HTMLInputElement | InstanceType<typeof VaTextarea> | undefined>()\n\n    const reset = () => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      isFocused,\n      listeners: validationListeners,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, isFocused, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => {\n      return props.type === 'textarea'\n        ? undefined\n        : input.value as HTMLInputElement | undefined\n    })\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'tabindex', 'disabled', 'readonly', 'placeholder']),\n    }) as InputHTMLAttributes)\n\n    return {\n      input,\n      inputEvents,\n\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(props, VaTextareaProps),\n      computedValue,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      reset,\n      filterSlots,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { this.input?.focus() },\n    blur () { this.input?.blur() },\n  },\n})\n</script>\n"],"names":["DEFAULT_MASK_TOKENS","creditCard","date","datePattern","time","timePattern","timeFormat","numeral","numeralThousandsGroupStyle","useCleaveProps","mask","type","String","Object","default","returnRaw","Boolean","modelValue","useCleave","element","props","emit","cleave","ref","destroyCleave","value","destroy","initCleave","Cleave","onMounted","onBeforeUnmount","watch","computedValue","computed","getRawValue","getFormattedValue","onInput","event","target","keys","length","setRawValue","defineComponent","name","components","VaMessageList","useFormProps","useValidationProps","label","color","outline","bordered","focused","error","success","requiredMark","emits","setup","createModifiersClasses","baseClass","modifiersCb","classes","modifiers","unref","filter","modifierName","map","colorComputed","getColor","wrapperClass","solid","disabled","readonly","labeled","borderColorComputed","undefined","messagesColor","messagesComputed","errorMessages","messages","errorLimit","errorCount","class","_createElementBlock","_ctx","onClick","$event","_createElementVNode","_hoisted_1","_renderSlot","_hoisted_2","style","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createVNode","limit","useClearableProps","clearable","clearableIcon","clearValue","useClearableEmits","useClearable","inputValue","isFocused","hasError","clearedValues","canBeCleared","includes","clearIconColor","clearIconProps","size","SIZING_STYLE","getNodeHeightStyles","node","window","getComputedStyle","boxSizing","getPropertyValue","padding","parseFloat","border","styles","join","lineHeight","parseInt","textarea","createHiddenTextarea","original","document","createElement","setAttribute","placeholder","wrap","getAttribute","removeAttribute","positiveNumberValidator","val","Error","createEmits","createListeners","useEmitProxy","Number","autosize","minRows","validator","maxRows","rowHeight","height","calculateRowHeight","calculateHeight","hiddenTextarea","body","appendChild","scrollHeight","removeChild","useTextareaRowHeight","isResizable","updateHeight","nextTick","computedStyle","minHeight","maxHeight","resize","computedProps","pick","listeners","methods","focus","this","blur","_mergeProps","VaTextareaProps","extractComponentProps","VaTextarea","createInputEmits","createInputListeners","createFieldEmits","createFieldListeners","VaInputWrapper","VaIcon","tabindex","loading","useValidationEmits","inheritAttrs","attrs","slots","input","reset","filterSlots","iconSlot","slot","validationListeners","computedError","computedErrorMessages","useValidation","toRefs","computedCleaveTarget","inputListeners","inputEvents","onFocus","e","onBlur","computedChildAttributes","ariaLabel","omit","computedInputAttributes","textareaProps","filterComponentProps","fieldListeners","_createBlock","icon","spin","slotScope","content"],"mappings":"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"}