{"ast":null,"code":"import { watch as e, inject as s, onMounted as r, onBeforeUnmount as a, defineComponent as t, computed as o, openBlock as l, createElementBlock as i, normalizeStyle as u, Fragment as n, renderList as m, toDisplayString as d, createCommentVNode as c } from \"vue\";\nimport { f as p } from \"./flatten.js\";\nimport { v as g, i as f, x as v, y, w as V } from \"./withConfigTransport.js\";\nimport { u as S } from \"./useSyncProp.js\";\nimport { F as j } from \"./consts.js\";\nimport { u as M } from \"./useFocus.js\";\nimport { u as h } from \"./useColor.js\";\nimport { s as A } from \"./style-inject.es.js\";\nvar C = g,\n    F = f,\n    _ = v;\n\nvar B = function isString(e) {\n  return \"string\" == typeof e || !F(e) && _(e) && \"[object String]\" == C(e);\n};\n\nconst b = {\n  modelValue: {\n    required: !1\n  },\n  error: {\n    type: Boolean,\n    default: void 0\n  },\n  errorMessages: {\n    type: [Array, String],\n    default: void 0\n  },\n  errorCount: {\n    type: [String, Number],\n    default: 1\n  },\n  rules: {\n    type: Array,\n    default: () => []\n  },\n  success: {\n    type: Boolean,\n    default: !1\n  },\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  immediateValidation: {\n    type: Boolean,\n    default: !1\n  }\n},\n      E = [\"update:error\", \"update:errorMessages\"],\n      useValidation = (t, o, l, i) => {\n  const {\n    isFocused: u,\n    onFocus: n,\n    onBlur: m\n  } = M(),\n        [d] = S(\"error\", t, o, !1),\n        [c] = S(\"errorMessages\", t, o, []),\n        resetValidation = () => {\n    d.value = !1, c.value = [];\n  },\n        validate = () => {\n    if (!t.rules || !t.rules.length) return !0;\n    let e = !1,\n        s = [];\n    return ((e = [], s = null) => (B(e) && (e = [e]), e.map(e => y(e) ? e(s) : e)))(p(t.rules), t.modelValue).forEach(r => {\n      B(r) ? (s = [...s, r], e = !0) : !1 === r && (e = !0);\n    }), c.value = s, d.value = e, !e;\n  };\n\n  e(u, e => !1 === e && validate()), e(() => t.modelValue, () => validate(), {\n    immediate: t.immediateValidation\n  });\n  const g = {\n    resetValidation: resetValidation,\n    focus: i,\n    validate: validate,\n    reset: l,\n    hasError: () => d.value\n  },\n        f = s(j, void 0);\n  return r(() => {\n    null == f || f.onChildMounted(g);\n  }), a(() => {\n    null == f || f.onChildUnmounted(g);\n  }), {\n    isFocused: u,\n    computedError: d,\n    computedErrorMessages: c,\n    listeners: {\n      onFocus: n,\n      onBlur: m\n    },\n    validate: validate,\n    resetValidation: resetValidation\n  };\n};\n\nvar L = t({\n  name: \"VaMessageList\",\n  props: {\n    modelValue: {\n      type: [String, Array],\n      default: \"\"\n    },\n    limit: {\n      type: Number,\n      default: 1\n    },\n    color: {\n      type: String\n    }\n  },\n\n  setup(e) {\n    const {\n      colorComputed: s\n    } = h(e);\n    return {\n      messages: o(() => e.modelValue ? Array.isArray(e.modelValue) ? e.modelValue.slice(0, e.limit) : [e.modelValue] : []),\n      computedStyle: o(() => e.color ? {\n        color: s.value\n      } : {})\n    };\n  }\n\n});\nA(\".va-message-list{color:var(--va-message-list-color)}.va-message-list__message{font-size:.8rem;vertical-align:middle}\"), L.render = function render(e, s, r, a, t, o) {\n  return e.messages.length ? (l(), i(\"div\", {\n    key: 0,\n    class: \"va-message-list\",\n    style: u(e.computedStyle)\n  }, [(l(!0), i(n, null, m(e.messages, (e, s) => (l(), i(\"div\", {\n    key: s,\n    class: \"va-message-list__message\"\n  }, d(e), 1))), 128))], 4)) : c(\"v-if\", !0);\n}, L.__file = \"src/components/va-input/components/VaMessageList/VaMessageList.vue\";\nvar k = V(L);\nexport { k as V, E as a, useValidation as b, B as i, b as u };","map":{"version":3,"mappings":"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","names":["baseGetTag","require$$0","isArray","require$$1","isObjectLike","require$$2","isString_1","isString","value","useValidationProps","modelValue","required","error","type","Boolean","default","undefined","errorMessages","Array","String","errorCount","Number","rules","success","messages","immediateValidation","useValidationEmits","useValidation","props","emit","reset","focus","isFocused","onFocus","onBlur","useFocus","computedError","useSyncProp","computedErrorMessages","resetValidation","validate","length","callArguments","map","rule","isFunction","flatten","forEach","validationResult","watch","newVal","immediate","context","hasError","form","inject","FormServiceKey","onMounted","onChildMounted","onBeforeUnmount","onChildUnmounted","listeners","defineComponent","name","limit","color","setup","colorComputed","useColor","computed","slice","computedStyle","A","_ctx","l","_createElementBlock","class","style","message","index","key","d","withConfigTransport","VaMessageList"],"sources":["../../../../node_modules/lodash/isString.js","../../src/composables/useValidation.ts","../../src/components/va-input/components/VaMessageList/VaMessageList.vue","../../src/components/va-input/components/VaMessageList/VaMessageList.vue?vue&type=template&id=878736da&lang.js","../../src/components/va-input/components/VaMessageList/index.ts"],"sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","import { inject, onBeforeUnmount, onMounted, PropType, watch } from 'vue'\nimport flatten from 'lodash/flatten'\nimport isFunction from 'lodash/isFunction'\nimport isString from 'lodash/isString'\nimport { useSyncProp } from './useSyncProp'\nimport { FormServiceKey } from '../components/va-form/consts'\nimport { useFocus } from './useFocus'\n\ntype ValidationRule = (() => any | string)\n\nexport interface ValidationProps {\n  modelValue: unknown\n  error?: boolean\n  errorMessages?: string[] | string\n  errorCount: string | number\n  rules: ValidationRule[]\n  success: boolean\n  messages: string[] | string\n  immediateValidation: boolean\n  [prop: string]: unknown\n}\n\nexport const useValidationProps = {\n  modelValue: { required: false },\n  error: { type: Boolean, default: undefined },\n  errorMessages: { type: [Array, String] as PropType<string[] | string>, default: undefined },\n  errorCount: { type: [String, Number], default: 1 },\n  rules: { type: Array as PropType<ValidationRule[]>, default: () => [] },\n  success: { type: Boolean, default: false },\n  messages: { type: [Array, String] as PropType<string[] | string>, default: () => [] },\n  immediateValidation: { type: Boolean, default: false },\n}\n\nexport const useValidationEmits = ['update:error', 'update:errorMessages']\n\nconst normalizeValidationRules = (rules: string | ValidationRule[] = [], callArguments: unknown = null) => {\n  if (isString(rules)) { rules = [rules] as any }\n\n  return (rules as ValidationRule[])\n    .map((rule) => isFunction(rule) ? rule(callArguments) : rule)\n}\n\nexport const useValidation = (\n  props: ValidationProps,\n  emit: (event: any, ...args: any[]) => void,\n  reset: () => any,\n  focus: () => any,\n) => {\n  const { isFocused, onFocus, onBlur } = useFocus()\n\n  const [computedError] = useSyncProp('error', props, emit, false)\n  const [computedErrorMessages] = useSyncProp('errorMessages', props, emit, [])\n\n  const resetValidation = () => {\n    computedError.value = false\n    computedErrorMessages.value = []\n  }\n\n  const validate = (): boolean => {\n    if (!props.rules || !props.rules.length) {\n      return true\n    }\n\n    let error = false\n    let errorMessages: string[] = []\n\n    const rules = flatten(props.rules)\n\n    normalizeValidationRules(rules, props.modelValue)\n      .forEach((validationResult: boolean | string) => {\n        if (isString(validationResult)) {\n          errorMessages = [...errorMessages, validationResult]\n          error = true\n        } else if (validationResult === false) {\n          error = true\n        }\n      })\n\n    computedErrorMessages.value = errorMessages\n    computedError.value = error\n\n    return !error\n  }\n\n  watch(isFocused, (newVal) => newVal === false && validate())\n\n  watch(() => props.modelValue, () => validate(), { immediate: props.immediateValidation })\n\n  const context = {\n    resetValidation,\n    focus,\n    validate,\n    reset,\n    hasError: () => computedError.value,\n  }\n\n  const form = inject(FormServiceKey, undefined)\n\n  onMounted(() => {\n    form?.onChildMounted(context)\n  })\n\n  onBeforeUnmount(() => {\n    form?.onChildUnmounted(context)\n  })\n\n  return {\n    isFocused,\n    computedError,\n    computedErrorMessages,\n    listeners: { onFocus, onBlur },\n    validate,\n    resetValidation,\n  }\n}\n","<template>\n  <div\n    v-if=\"messages.length\"\n    class=\"va-message-list\"\n    :style=\"computedStyle\"\n  >\n    <div\n      v-for=\"(message, index) in messages\"\n      :key=\"index\"\n      class=\"va-message-list__message\"\n    >\n      {{ message }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType } from 'vue'\nimport { useColor } from '../../../../composables/useColor'\n\nexport default defineComponent({\n  name: 'VaMessageList',\n\n  props: {\n    modelValue: {\n      type: [String, Array] as PropType<string | string[]>,\n      default: '',\n    },\n    limit: { type: Number, default: 1 },\n    color: { type: String },\n  },\n\n  setup (props) {\n    const { colorComputed } = useColor(props)\n\n    return {\n      messages: computed<string[]>(() => {\n        if (!props.modelValue) { return [] }\n        if (!Array.isArray(props.modelValue)) { return [props.modelValue] }\n\n        return props.modelValue.slice(0, props.limit)\n      }),\n      computedStyle: computed(() => props.color ? { color: colorComputed.value } : {}),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../../styles/resources/index.scss\";\n\n.va-message-list {\n  color: var(--va-message-list-color);\n\n  &__message {\n    vertical-align: middle;\n    font-size: $font-size-mini;\n  }\n}\n</style>\n","<template>\n  <div\n    v-if=\"messages.length\"\n    class=\"va-message-list\"\n    :style=\"computedStyle\"\n  >\n    <div\n      v-for=\"(message, index) in messages\"\n      :key=\"index\"\n      class=\"va-message-list__message\"\n    >\n      {{ message }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType } from 'vue'\nimport { useColor } from '../../../../composables/useColor'\n\nexport default defineComponent({\n  name: 'VaMessageList',\n\n  props: {\n    modelValue: {\n      type: [String, Array] as PropType<string | string[]>,\n      default: '',\n    },\n    limit: { type: Number, default: 1 },\n    color: { type: String },\n  },\n\n  setup (props) {\n    const { colorComputed } = useColor(props)\n\n    return {\n      messages: computed<string[]>(() => {\n        if (!props.modelValue) { return [] }\n        if (!Array.isArray(props.modelValue)) { return [props.modelValue] }\n\n        return props.modelValue.slice(0, props.limit)\n      }),\n      computedStyle: computed(() => props.color ? { color: colorComputed.value } : {}),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../../styles/resources/index.scss\";\n\n.va-message-list {\n  color: var(--va-message-list-color);\n\n  &__message {\n    vertical-align: middle;\n    font-size: $font-size-mini;\n  }\n}\n</style>\n","import withConfigTransport from '../../../../services/config-transport/withConfigTransport'\nimport VaMessageList from './VaMessageList.vue'\n\nexport default withConfigTransport(VaMessageList)\n"]},"metadata":{},"sourceType":"module"}