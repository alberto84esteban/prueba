{"ast":null,"code":"import { computed as e } from \"vue\";\n\nconst a = {\n  disabled: {\n    type: Boolean,\n    default: !1\n  },\n  readonly: {\n    type: Boolean,\n    default: !1\n  }\n},\n      useForm = a => ({\n  createComputedClass: d => e(() => ({\n    [`${d}--disabled`]: a.disabled,\n    [`${d}--readonly`]: a.readonly\n  })),\n  createComputedClassArray: d => e(() => [a.disabled && `${d}--disabled`, a.readonly && `${d}--readonly`].filter(e => Boolean(e)))\n});\n\nexport { useForm as a, a as u };","map":{"version":3,"mappings":";;MASaA,IAAe;AAC1BC,YAAU;AAAEC,UAAMC,OAAR;AAAiBC,cAAS;AAA1B,GADgB;AAE1BC,YAAU;AAAEH,UAAMC,OAAR;AAAiBC,cAAS;AAA1B;AAFgB;MAWfE,UAAWC,MAmBf;AACLC,uBAfkDC,KAAmBC,EAAS;AAC9E,KAAC,GAAGD,aAAJ,GAAyBF,EAAMN,QAD+C;AAE9E,KAAC,GAAGQ,aAAJ,GAAyBF,EAAMF;AAF+C,IAATK,CAchE;AAELC,4BAPuDF,KAAmBC,EAAS,MACnF,CAACH,EAAMN,QAANM,IAAkB,GAAGE,aAAtB,EAA0CF,EAAMF,QAANE,IAAkB,GAAGE,aAA/D,EACGG,MADH,CACWC,KAAMV,QAAQU,CAARV,CADjB,CAD0EO;AAKrE,CAnBeH;;AAgBKM","names":["useFormProps","disabled","type","Boolean","default","readonly","useForm","props","createComputedClass","prefix","computed","createComputedClassArray","filter","c"],"sources":["../../src/composables/useForm.ts"],"sourcesContent":["import { computed, PropType } from 'vue'\n\nexport interface UseFormProps {\n  disabled: boolean;\n  readonly: boolean;\n  id?: string | number;\n  name?: string | number;\n}\n\nexport const useFormProps = {\n  disabled: { type: Boolean, default: false },\n  readonly: { type: Boolean, default: false },\n}\n\nexport const useFormPropsWithId = {\n  ...useFormProps,\n  id: { type: [String, Number] as PropType<string | number>, default: undefined },\n  name: { type: [String, Number] as PropType<string | number>, default: undefined },\n}\n\nexport const useForm = (props: UseFormProps) => {\n  /**\n   * Create readonly and disabled BEM modifiers.\n   * @returns Object with classes which starts with `prefix` and ends with form state BEM modifier.\n   */\n  const createComputedClass = <Prefix extends string>(prefix: Prefix) => computed(() => ({\n    [`${prefix}--disabled`]: props.disabled,\n    [`${prefix}--readonly`]: props.readonly,\n  }) as Record<`${Prefix}--disabled` | `${Prefix}--readonly`, boolean>)\n\n  /**\n   * Create readonly and disabled BEM modifiers.\n   * @returns Object with classes which starts with `prefix` and ends with form state BEM modifier.\n   */\n  const createComputedClassArray = <Prefix extends string>(prefix: Prefix) => computed(() => (\n    [props.disabled && `${prefix}--disabled`, props.readonly && `${prefix}--readonly`]\n      .filter((c) => Boolean(c))\n  ) as Array<`${Prefix}--disabled` | `${Prefix}--readonly`>)\n\n  return {\n    createComputedClass,\n    createComputedClassArray,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}