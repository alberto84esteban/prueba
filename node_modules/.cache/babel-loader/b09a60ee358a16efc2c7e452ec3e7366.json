{"ast":null,"code":"import o from \"./index55.js\";\nimport { watch as e } from \"vue\";\nimport { u as t, m as s, g as n, s as r } from \"./withConfigTransport.js\";\nvar a = {\n  install(o) {\n    o.config.globalProperties.$closeDropdown = function () {\n      let o = this;\n\n      for (; o = o.$parent;) {\n        if (\"VaDropdown\" === o.$options.name) {\n          o.hide();\n          break;\n        }\n      }\n    };\n  }\n\n},\n    i = {\n  install(e) {\n    e.config.globalProperties.$vaToast = new o(e);\n  }\n\n};\nconst l = {\n  install() {\n    if (\"undefined\" == typeof window) return;\n    const {\n      globalConfig: o\n    } = t(),\n          s = document.documentElement;\n    e(() => o.value.colors, o => {\n      if (!o) return;\n      Object.keys(o).forEach(e => {\n        ((o, e, t) => {\n          t.style.setProperty(`--va-${o}`, e);\n        })(e, o[e], s);\n      });\n    }, {\n      immediate: !0,\n      deep: !0\n    });\n  }\n\n},\n      f = Symbol(\"GLOBAL_CONFIG\"),\n      m = {\n  install(o, e) {\n    e && s(e);\n    const t = {\n      get: n,\n      set: r,\n      merge: s\n    };\n    o.provide(f, t);\n  }\n\n};\nexport { l as C, a as D, m as G, i as T };","map":{"version":3,"mappings":";;;AAEA,QAAe;AACbA,UAASC,CAATD,EAASC;AACPA,MAAIC,MAAJD,CAAWE,gBAAXF,CAA4BG,cAA5BH,GAA6C;AAE3C,UAAII,IAAKC,IAAT;;AAEA,aAAQD,IAAKA,EAAGE,OAAhB,GAA0B;AAExB,YAAa,iBADAF,EAAGG,QAAHH,CAAYI,IACzB,EAA2B;AACzBJ,YAAGK,IAAHL;AACA;AAAA;AAAA;AAAA,KARNJ;AAQM;;AAVK,CAAf;AAAA,IAUUU,ICTK;AACbX,UAASC,CAATD,EAASC;AACPA,MAAIC,MAAJD,CAAWE,gBAAXF,CAA4BW,QAA5BX,GAAuC,IAAIY,CAAJ,CAAiBZ,CAAjB,CAAvCA;AAAwDA;;AAF7C,CDDf;AEFO,MCQDa,IAAqB;AACzBd;AACE,QDV4C,sBAAXe,MCUjC,EAAkB;AAElB;AAAMC,oBAAEA;AAAR,QAAyBC,GAAzB;AAAA,UAEMC,IAAOC,SAASC,eAFtB;AAIAC,MAAM,MAAML,EAAaM,KAAbN,CAAmBO,MAA/BF,EAAwCG;AACtC,WAAKA,CAAL,EAAiB;AAEEC,aAAOC,IAAPD,CAAYD,CAAZC,EACRE,OADQF,CACCG;AAhBI,UAACnB,CAAD,EAAea,CAAf,EAA8BJ,CAA9B,KAA8BA;AAC1DA,YAAKW,KAALX,CAAWY,WAAXZ,CAAuB,QAAQT,GAA/BS,EAAuCI,CAAvCJ;AAAuCI,SADX,EAiBPM,CAjBO,EAiBFJ,EAASI,CAATJ,CAjBE,EAiBaN,CAjBb;AAiBaA,OAFlBO;AAEkBP,KALvCG,EAOG;AAAEU,kBAAW,CAAb;AAAmBC,aAAM;AAAzB,KAPHX;AAO4B;;AAfL,CDRpB;AAAA,MEIMY,IAAgBC,OAAO,eAAPA,CFJtB;AAAA,MEQMC,IAAqB;AAChCnC,UAASC,CAATD,EAAmBoC,CAAnBpC,EAAmBoC;AACbA,SAAWC,EAAkBD,CAAlBC,CAAXD;AAEJ,UAAMlC,IAAS;AAAEoC,WAAKC,CAAP;AAAwBC,WAAKC,CAA7B;AAA8CC,aAAOL;AAArD,KAAf;AAEApC,MAAI0C,OAAJ1C,CAAkCgC,CAAlChC,EAAiDC,CAAjDD;AAAiDC;;AANnB,CFR3B;AEc8CA","names":["install","app","config","globalProperties","$closeDropdown","vm","this","$parent","$options","name","hide","i","$vaToast","Notification","ColorHelpersPlugin","window","globalConfig","useGlobalConfig","root","document","documentElement","watch","value","colors","newValue","Object","keys","forEach","key","style","setProperty","immediate","deep","GLOBAL_CONFIG","Symbol","GlobalConfigPlugin","options","mergeGlobalConfig","get","getGlobalConfig","set","setGlobalConfig","merge","provide"],"sources":["../../src/components/va-dropdown/dropdown-popover-subplugin.ts","../../src/components/va-toast/install.ts","../../src/utils/ssr-utils.ts","../../src/services/color-config/color-css-variables-updater.ts","../../src/services/global-config/global-config-plugin.ts"],"sourcesContent":["import { App } from 'vue'\n\nexport default {\n  install (app: App) {\n    app.config.globalProperties.$closeDropdown = function () {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let vm = this\n      // Hide first parent dropdown.\n      while ((vm = vm.$parent)) {\n        const name = vm.$options.name\n        if (name === 'VaDropdown') {\n          vm.hide()\n          break\n        }\n      }\n    }\n  },\n}\n","import { App } from 'vue'\nimport Notification from './index'\n\nexport default {\n  install (app: App) {\n    app.config.globalProperties.$vaToast = new Notification(app)\n  },\n}\n","export const isServer = () => typeof window === 'undefined'\nexport const isClient = () => !isServer()\n","import { watch } from 'vue'\nimport { useGlobalConfig } from '../global-config/global-config'\nimport { isServer } from '../../utils/ssr-utils'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(`--va-${name}`, value)\n}\n\nconst ColorHelpersPlugin = {\n  install () {\n    if (isServer()) { return }\n\n    const { globalConfig } = useGlobalConfig()\n\n    const root = document.documentElement\n\n    watch(() => globalConfig.value.colors, (newValue) => {\n      if (!newValue) { return }\n\n      const colorNames = Object.keys(newValue)\n      colorNames.forEach((key) => {\n        setCSSVariable(key, newValue[key], root)\n      })\n    }, { immediate: true, deep: true })\n  },\n}\n\nexport default ColorHelpersPlugin\n","import { App } from 'vue'\nimport { getGlobalConfig, setGlobalConfig, mergeGlobalConfig } from './global-config'\nimport { GlobalConfig } from './types'\n\nexport const GLOBAL_CONFIG = Symbol('GLOBAL_CONFIG')\n\ntype ProvidedGlobalConfig = { get: typeof getGlobalConfig, set: typeof setGlobalConfig, merge: typeof mergeGlobalConfig }\n\nexport const GlobalConfigPlugin = {\n  install (app: App, options?: GlobalConfig) {\n    if (options) { mergeGlobalConfig(options) }\n\n    const config = { get: getGlobalConfig, set: setGlobalConfig, merge: mergeGlobalConfig }\n\n    app.provide<ProvidedGlobalConfig>(GLOBAL_CONFIG, config)\n  },\n}\n"]},"metadata":{},"sourceType":"module"}