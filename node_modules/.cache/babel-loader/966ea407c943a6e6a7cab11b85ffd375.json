{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { w as e } from \"./withConfigTransport.js\";\nimport { __decorate as i } from \"tslib\";\nimport { watch as t, resolveComponent as a, openBlock as o, createBlock as s, resolveDynamicComponent as r, normalizeClass as c, normalizeStyle as n, withCtx as h, createElementVNode as p, mergeProps as l, toHandlers as v, createCommentVNode as d, renderSlot as u, withModifiers as m } from \"vue\";\nimport { V as f, m as g, s as y, O as b, p as C } from \"./vue-class-component.esm-bundler.js\";\nimport { c as S, f as x, h as w, b as z } from \"./color-config.js\";\nimport { C as _ } from \"./ColorMixin.js\";\nimport { R as j } from \"./RouterLinkMixin.js\";\nimport { S as k } from \"./StatefulMixin.js\";\nimport { u as F } from \"./useKeyboardOnlyFocus.js\";\nimport V from \"./index28.js\";\nimport { s as q } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"colortranslator\";\nimport \"./VaIcon.js\";\nimport \"./flatten.js\";\nimport \"./useSize.js\";\nconst B = f.with(class ChipProps {\n  constructor() {\n    this.modelValue = C({\n      type: Boolean,\n      default: !0\n    }), this.closeable = C({\n      type: Boolean,\n      default: !1\n    }), this.color = C({\n      type: String,\n      default: \"primary\"\n    }), this.outline = C({\n      type: Boolean,\n      default: !1\n    }), this.flat = C({\n      type: Boolean,\n      default: !1\n    }), this.icon = C({\n      type: String,\n      default: \"\"\n    }), this.disabled = C({\n      type: Boolean,\n      default: !1\n    }), this.square = C({\n      type: Boolean,\n      default: !1\n    }), this.tag = C({\n      type: String,\n      default: \"span\"\n    }), this.size = C({\n      type: String,\n      default: \"medium\",\n      validator: e => [\"medium\", \"small\", \"large\"].includes(e)\n    }), this.shadow = C({\n      type: Boolean,\n      default: !1\n    });\n  }\n\n});\nlet K = class VaChip extends g(j, k, _, B) {\n  constructor() {\n    super(...arguments), this.SetupContext = y(() => {\n      const {\n        hasKeyboardFocus: e,\n        keyboardFocusListeners: i\n      } = F();\n      return {\n        hasKeyboardFocus: e,\n        keyboardFocusListeners: i\n      };\n    }), this.hoverState = !1, this.focusState = !1;\n  }\n\n  created() {\n    t(() => this.hoverState, e => {\n      this.updateHoverState(e);\n    });\n  }\n\n  get iconSize() {\n    return {\n      small: \"0.875rem\",\n      medium: \"1rem\",\n      large: \"1.25rem\"\n    }[this.size];\n  }\n\n  get indexComputed() {\n    return this.disabled ? -1 : 0;\n  }\n\n  get computedClass() {\n    return {\n      \"va-chip--small\": \"small\" === this.size,\n      \"va-chip--large\": \"large\" === this.size,\n      \"va-chip--square\": this.square,\n      \"va-chip--disabled\": this.disabled\n    };\n  }\n\n  get shadowStyle() {\n    if (!(!this.shadow || this.flat || this.outline || this.disabled || this.SetupContext.hasKeyboardFocus)) return \"0 0.125rem 0.19rem 0 \" + S(this.colorComputed);\n  }\n\n  get computedStyle() {\n    const e = this.outline ? this.colorComputed : \"\",\n          i = {\n      color: this.colorComputed,\n      borderColor: e,\n      background: \"\",\n      boxShadow: this.shadowStyle\n    };\n    return this.outline || this.flat ? this.SetupContext.hasKeyboardFocus ? i.background = x(this.colorComputed) : this.hoverState && (i.background = w(this.colorComputed)) : (i.color = z(this.colorComputed), i.background = this.colorComputed), i;\n  }\n\n  updateHoverState(e) {\n    this.hoverState = e;\n  }\n\n  close() {\n    this.disabled || (this.valueComputed = !1);\n  }\n\n};\nK = i([b({\n  name: \"VaChip\",\n  components: {\n    VaIcon: V\n  },\n  emits: [\"focus\"]\n})], K);\nvar M = K;\nconst H = [\"tabindex\"],\n      L = {\n  class: \"va-chip__content\"\n};\nq(\":root{--va-chip-display:inline-flex;--va-chip-border:0.125rem solid transparent;--va-chip-position:relative;--va-chip-border-radius:2rem;--va-chip-width:auto;--va-chip-height:auto;--va-chip-min-width:initial;--va-chip-min-height:initial;--va-chip-padding:0 0.3rem;--va-chip-color:#fff;--va-chip-cursor:default;--va-chip-font-size:1rem;--va-chip-vertical-align:middle;--va-chip-inner-display:inline-flex;--va-chip-inner-align-items:center;--va-chip-inner-width:100%;--va-chip-hover-opacity:0.85;--va-chip-content-display:flex;--va-chip-content-width:var(--va-chip-inner-width,100%);--va-chip-content-align-items:center;--va-chip-content-justify-content:center;--va-chip-content-padding:0 0.3rem;--va-chip-content-line-height:1.6;--va-chip-square-border-radius:0.2rem;--va-sm-chip-height:1.5rem;--va-sm-chip-font-size:0.875rem;--va-lg-chip-height:2.5rem;--va-lg-chip-font-size:1.25rem}.va-chip{border:var(--va-chip-border,var(--va-control-border));border-radius:var(--va-chip-border-radius);color:var(--va-chip-color);cursor:var(--va-chip-cursor);display:var(--va-chip-display);font-family:var(--va-font-family);font-size:var(--va-chip-font-size);height:var(--va-chip-height);min-height:var(--va-chip-min-height);min-width:var(--va-chip-min-width);padding:var(--va-chip-padding);position:var(--va-chip-position);vertical-align:var(--va-chip-vertical-align);width:var(--va-chip-width)}.va-chip__inner{align-items:var(--va-chip-inner-align-items);display:var(--va-chip-inner-display);vertical-align:inherit;width:var(--va-chip-inner-width)}.va-chip:hover{opacity:var(--va-chip-hover-opacity)}.va-chip__content{align-items:var(--va-chip-content-align-items);display:var(--va-chip-content-display);justify-content:var(--va-chip-content-justify-content);line-height:var(--va-chip-content-line-height);padding:var(--va-chip-content-padding);width:var(--va-chip-content-width)}.va-chip__close-icon{cursor:pointer}.va-chip--disabled .va-chip__close-icon{cursor:default!important}.va-chip--square{border-radius:var(--va-chip-square-border-radius,var(--va-square-border-radius))}.va-chip--small{font-size:var(--va-sm-chip-font-size);height:var(--va-sm-chip-height)}.va-chip--large{font-size:var(--va-lg-chip-font-size);height:var(--va-lg-chip-height)}.va-chip.va-chip--disabled{cursor:default;opacity:.4;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}\"), M.render = function render(e, i, t, f, g, y) {\n  const b = a(\"va-icon\");\n  return e.valueComputed ? (o(), s(r(e.tagComputed), {\n    key: 0,\n    class: c([\"va-chip\", e.computedClass]),\n    href: e.hrefComputed,\n    target: e.target,\n    to: e.to,\n    replace: e.replace,\n    exact: e.exact,\n    \"active-class\": e.activeClass,\n    \"exact-active-class\": e.exactActiveClass,\n    style: n(e.computedStyle)\n  }, {\n    default: h(() => [p(\"span\", l({\n      class: \"va-chip__inner\"\n    }, v(e.SetupContext.keyboardFocusListeners), {\n      onFocus: i[1] || (i[1] = i => e.$emit(\"focus\")),\n      onMouseenter: i[2] || (i[2] = i => e.updateHoverState(!0)),\n      onMouseleave: i[3] || (i[3] = i => e.updateHoverState(!1)),\n      tabindex: e.indexComputed\n    }), [e.icon ? (o(), s(b, {\n      key: 0,\n      class: \"va-chip__icon\",\n      name: e.icon,\n      size: e.iconSize\n    }, null, 8, [\"name\", \"size\"])) : d(\"v-if\", !0), p(\"span\", L, [u(e.$slots, \"default\")]), e.closeable ? (o(), s(b, {\n      key: 1,\n      class: \"va-chip__close-icon\",\n      name: \"close\",\n      size: e.iconSize,\n      onClick: i[0] || (i[0] = m(i => e.close(), [\"stop\"]))\n    }, null, 8, [\"size\"])) : d(\"v-if\", !0)], 16, H)]),\n    _: 3\n  }, 8, [\"href\", \"target\", \"to\", \"replace\", \"exact\", \"active-class\", \"exact-active-class\", \"class\", \"style\"])) : d(\"v-if\", !0);\n}, M.__file = \"src/components/va-chip/VaChip.vue\";\nvar I = e(M);\nexport { I as default };","map":{"version":3,"mappings":"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","names":["ChipPropsMixin","Vue","with","ChipProps","constructor","this","prop","type","Boolean","default","String","validator","value","includes","VaChip","mixins","RouterLinkMixin","StatefulMixin","ColorMixin","setup","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","created","watch","hoverState","updateHoverState","iconSize","small","medium","large","size","indexComputed","disabled","computedClass","square","shadowStyle","shadow","flat","outline","SetupContext","getBoxShadowColor","colorComputed","computedStyle","borderColor","color","background","boxShadow","getFocusColor","getHoverColor","getTextColor","isHover","close","valueComputed","Options","name","components","VaIcon","emits","class","q","_ctx","o","_createBlock","href","target","to","replace","exact","style","_mergeProps","_toHandlers","onFocus","onMouseenter","onMouseleave","tabindex","icon","_createElementVNode","_renderSlot","_hoisted_2","closeable","onClick","withConfigTransport"],"sources":["../../src/components/va-chip/VaChip.vue","../../src/components/va-chip/VaChip.vue?vue&type=template&id=7e7002c8&lang.js","../../src/components/va-chip/index.ts"],"sourcesContent":["<template>\n  <component\n    v-if=\"valueComputed\"\n    class=\"va-chip\"\n    :is=\"tagComputed\"\n    :href=\"hrefComputed\"\n    :target=\"target\"\n    :to=\"to\"\n    :replace=\"replace\"\n    :exact=\"exact\"\n    :active-class=\"activeClass\"\n    :exact-active-class=\"exactActiveClass\"\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n  >\n    <span\n      class=\"va-chip__inner\"\n      v-on=\"SetupContext.keyboardFocusListeners\"\n      @focus=\"$emit('focus')\"\n      @mouseenter=\"updateHoverState(true)\"\n      @mouseleave=\"updateHoverState(false)\"\n      :tabindex=\"indexComputed\"\n    >\n      <va-icon\n        v-if=\"icon\"\n        class=\"va-chip__icon\"\n        :name=\"icon\"\n        :size=\"iconSize\"\n      />\n      <span class=\"va-chip__content\">\n        <slot></slot>\n      </span>\n      <va-icon\n        v-if=\"closeable\"\n        class=\"va-chip__close-icon\"\n        name=\"close\"\n        :size=\"iconSize\"\n        @click.stop=\"close()\"\n      />\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { watch } from 'vue'\nimport { Options, prop, mixins, setup, Vue } from 'vue-class-component'\n\nimport {\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor, getTextColor,\n} from '../../services/color-config/color-functions'\nimport ColorMixin from '../../services/color-config/ColorMixin'\nimport { RouterLinkMixin } from '../../mixins/RouterLinkMixin/RouterLinkMixin'\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\nimport VaIcon from '../va-icon'\n\nclass ChipProps {\n  modelValue = prop<boolean>({ type: Boolean, default: true })\n  closeable = prop<boolean>({ type: Boolean, default: false })\n  color = prop<string>({ type: String, default: 'primary' })\n  outline = prop<boolean>({ type: Boolean, default: false })\n  flat = prop<boolean>({ type: Boolean, default: false })\n  icon = prop<string>({ type: String, default: '' })\n  disabled = prop<boolean>({ type: Boolean, default: false })\n  square = prop<boolean>({ type: Boolean, default: false })\n  tag = prop<string>({ type: String, default: 'span' })\n  size = prop<string>({\n    type: String,\n    default: 'medium',\n    validator: (value: string) => {\n      return ['medium', 'small', 'large'].includes(value)\n    },\n  })\n  shadow = prop<boolean>({ type: Boolean, default: false })\n}\n\nconst ChipPropsMixin = Vue.with(ChipProps)\n\n@Options({\n  name: 'VaChip',\n  components: { VaIcon },\n  emits: ['focus'],\n})\nexport default class VaChip extends mixins(\n  RouterLinkMixin,\n  StatefulMixin,\n  ColorMixin,\n  ChipPropsMixin,\n) {\n  SetupContext = setup(() => {\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n\n    return {\n      hasKeyboardFocus,\n      keyboardFocusListeners,\n    }\n  })\n\n  hoverState = false\n  focusState = false\n\n  created () {\n    watch(() => this.hoverState, (value) => {\n      this.updateHoverState(value)\n    })\n  }\n\n  get iconSize () {\n    const size: any = {\n      small: '0.875rem',\n      medium: '1rem',\n      large: '1.25rem',\n    }\n    return size[this.size]\n  }\n\n  get indexComputed () {\n    return this.disabled ? -1 : 0\n  }\n\n  get computedClass () {\n    return {\n      'va-chip--small': this.size === 'small',\n      'va-chip--large': this.size === 'large',\n      'va-chip--square': this.square,\n      'va-chip--disabled': this.disabled,\n    }\n  }\n\n  get shadowStyle () {\n    if (!this.shadow || this.flat || this.outline || this.disabled || this.SetupContext.hasKeyboardFocus) {\n      return\n    }\n    return '0 0.125rem 0.19rem 0 ' + getBoxShadowColor(this.colorComputed)\n  }\n\n  get computedStyle () {\n    const borderColor = this.outline ? this.colorComputed : ''\n    const computedStyle = {\n      color: this.colorComputed,\n      borderColor,\n      background: '',\n      boxShadow: this.shadowStyle,\n    }\n\n    if (this.outline || this.flat) {\n      if (this.SetupContext.hasKeyboardFocus) {\n        computedStyle.background = getFocusColor(this.colorComputed)\n      } else if (this.hoverState) {\n        computedStyle.background = getHoverColor(this.colorComputed)\n      }\n    } else {\n      computedStyle.color = getTextColor(this.colorComputed)\n      computedStyle.background = this.colorComputed\n    }\n    return computedStyle\n  }\n\n  updateHoverState (isHover: boolean) {\n    this.hoverState = isHover\n  }\n\n  close () {\n    if (!this.disabled) {\n      this.valueComputed = false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-chip {\n  display: var(--va-chip-display);\n  border: var(--va-chip-border, var(--va-control-border));\n  position: var(--va-chip-position);\n  border-radius: var(--va-chip-border-radius);\n  width: var(--va-chip-width);\n  height: var(--va-chip-height);\n  min-width: var(--va-chip-min-width);\n  min-height: var(--va-chip-min-height);\n  padding: var(--va-chip-padding);\n  color: var(--va-chip-color);\n  cursor: var(--va-chip-cursor);\n  font-size: var(--va-chip-font-size);\n  font-family: var(--va-font-family);\n  vertical-align: var(--va-chip-vertical-align);\n\n  &__inner {\n    display: var(--va-chip-inner-display);\n    align-items: var(--va-chip-inner-align-items);\n    width: var(--va-chip-inner-width);\n    vertical-align: inherit;\n  }\n\n  &:hover {\n    opacity: var(--va-chip-hover-opacity);\n  }\n\n  &__content {\n    display: var(--va-chip-content-display);\n    justify-content: var(--va-chip-content-justify-content);\n    align-items: var(--va-chip-content-align-items);\n    padding: var(--va-chip-content-padding);\n    line-height: var(--va-chip-content-line-height);\n    width: var(--va-chip-content-width);\n  }\n\n  &__close-icon {\n    cursor: pointer;\n\n    @at-root {\n      .va-chip--disabled {\n        .va-chip__close-icon {\n          cursor: default !important;\n        }\n      }\n    }\n  }\n\n  &--square {\n    border-radius: var(--va-chip-square-border-radius, var(--va-square-border-radius));\n  }\n\n  &--small {\n    height: var(--va-sm-chip-height);\n    font-size: var(--va-sm-chip-font-size);\n  }\n\n  &--large {\n    height: var(--va-lg-chip-height);\n    font-size: var(--va-lg-chip-font-size);\n  }\n\n  &.va-chip--disabled {\n    @include va-disabled;\n  }\n}\n</style>\n","<template>\n  <component\n    v-if=\"valueComputed\"\n    class=\"va-chip\"\n    :is=\"tagComputed\"\n    :href=\"hrefComputed\"\n    :target=\"target\"\n    :to=\"to\"\n    :replace=\"replace\"\n    :exact=\"exact\"\n    :active-class=\"activeClass\"\n    :exact-active-class=\"exactActiveClass\"\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n  >\n    <span\n      class=\"va-chip__inner\"\n      v-on=\"SetupContext.keyboardFocusListeners\"\n      @focus=\"$emit('focus')\"\n      @mouseenter=\"updateHoverState(true)\"\n      @mouseleave=\"updateHoverState(false)\"\n      :tabindex=\"indexComputed\"\n    >\n      <va-icon\n        v-if=\"icon\"\n        class=\"va-chip__icon\"\n        :name=\"icon\"\n        :size=\"iconSize\"\n      />\n      <span class=\"va-chip__content\">\n        <slot></slot>\n      </span>\n      <va-icon\n        v-if=\"closeable\"\n        class=\"va-chip__close-icon\"\n        name=\"close\"\n        :size=\"iconSize\"\n        @click.stop=\"close()\"\n      />\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { watch } from 'vue'\nimport { Options, prop, mixins, setup, Vue } from 'vue-class-component'\n\nimport {\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor, getTextColor,\n} from '../../services/color-config/color-functions'\nimport ColorMixin from '../../services/color-config/ColorMixin'\nimport { RouterLinkMixin } from '../../mixins/RouterLinkMixin/RouterLinkMixin'\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\nimport VaIcon from '../va-icon'\n\nclass ChipProps {\n  modelValue = prop<boolean>({ type: Boolean, default: true })\n  closeable = prop<boolean>({ type: Boolean, default: false })\n  color = prop<string>({ type: String, default: 'primary' })\n  outline = prop<boolean>({ type: Boolean, default: false })\n  flat = prop<boolean>({ type: Boolean, default: false })\n  icon = prop<string>({ type: String, default: '' })\n  disabled = prop<boolean>({ type: Boolean, default: false })\n  square = prop<boolean>({ type: Boolean, default: false })\n  tag = prop<string>({ type: String, default: 'span' })\n  size = prop<string>({\n    type: String,\n    default: 'medium',\n    validator: (value: string) => {\n      return ['medium', 'small', 'large'].includes(value)\n    },\n  })\n  shadow = prop<boolean>({ type: Boolean, default: false })\n}\n\nconst ChipPropsMixin = Vue.with(ChipProps)\n\n@Options({\n  name: 'VaChip',\n  components: { VaIcon },\n  emits: ['focus'],\n})\nexport default class VaChip extends mixins(\n  RouterLinkMixin,\n  StatefulMixin,\n  ColorMixin,\n  ChipPropsMixin,\n) {\n  SetupContext = setup(() => {\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n\n    return {\n      hasKeyboardFocus,\n      keyboardFocusListeners,\n    }\n  })\n\n  hoverState = false\n  focusState = false\n\n  created () {\n    watch(() => this.hoverState, (value) => {\n      this.updateHoverState(value)\n    })\n  }\n\n  get iconSize () {\n    const size: any = {\n      small: '0.875rem',\n      medium: '1rem',\n      large: '1.25rem',\n    }\n    return size[this.size]\n  }\n\n  get indexComputed () {\n    return this.disabled ? -1 : 0\n  }\n\n  get computedClass () {\n    return {\n      'va-chip--small': this.size === 'small',\n      'va-chip--large': this.size === 'large',\n      'va-chip--square': this.square,\n      'va-chip--disabled': this.disabled,\n    }\n  }\n\n  get shadowStyle () {\n    if (!this.shadow || this.flat || this.outline || this.disabled || this.SetupContext.hasKeyboardFocus) {\n      return\n    }\n    return '0 0.125rem 0.19rem 0 ' + getBoxShadowColor(this.colorComputed)\n  }\n\n  get computedStyle () {\n    const borderColor = this.outline ? this.colorComputed : ''\n    const computedStyle = {\n      color: this.colorComputed,\n      borderColor,\n      background: '',\n      boxShadow: this.shadowStyle,\n    }\n\n    if (this.outline || this.flat) {\n      if (this.SetupContext.hasKeyboardFocus) {\n        computedStyle.background = getFocusColor(this.colorComputed)\n      } else if (this.hoverState) {\n        computedStyle.background = getHoverColor(this.colorComputed)\n      }\n    } else {\n      computedStyle.color = getTextColor(this.colorComputed)\n      computedStyle.background = this.colorComputed\n    }\n    return computedStyle\n  }\n\n  updateHoverState (isHover: boolean) {\n    this.hoverState = isHover\n  }\n\n  close () {\n    if (!this.disabled) {\n      this.valueComputed = false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-chip {\n  display: var(--va-chip-display);\n  border: var(--va-chip-border, var(--va-control-border));\n  position: var(--va-chip-position);\n  border-radius: var(--va-chip-border-radius);\n  width: var(--va-chip-width);\n  height: var(--va-chip-height);\n  min-width: var(--va-chip-min-width);\n  min-height: var(--va-chip-min-height);\n  padding: var(--va-chip-padding);\n  color: var(--va-chip-color);\n  cursor: var(--va-chip-cursor);\n  font-size: var(--va-chip-font-size);\n  font-family: var(--va-font-family);\n  vertical-align: var(--va-chip-vertical-align);\n\n  &__inner {\n    display: var(--va-chip-inner-display);\n    align-items: var(--va-chip-inner-align-items);\n    width: var(--va-chip-inner-width);\n    vertical-align: inherit;\n  }\n\n  &:hover {\n    opacity: var(--va-chip-hover-opacity);\n  }\n\n  &__content {\n    display: var(--va-chip-content-display);\n    justify-content: var(--va-chip-content-justify-content);\n    align-items: var(--va-chip-content-align-items);\n    padding: var(--va-chip-content-padding);\n    line-height: var(--va-chip-content-line-height);\n    width: var(--va-chip-content-width);\n  }\n\n  &__close-icon {\n    cursor: pointer;\n\n    @at-root {\n      .va-chip--disabled {\n        .va-chip__close-icon {\n          cursor: default !important;\n        }\n      }\n    }\n  }\n\n  &--square {\n    border-radius: var(--va-chip-square-border-radius, var(--va-square-border-radius));\n  }\n\n  &--small {\n    height: var(--va-sm-chip-height);\n    font-size: var(--va-sm-chip-font-size);\n  }\n\n  &--large {\n    height: var(--va-lg-chip-height);\n    font-size: var(--va-lg-chip-font-size);\n  }\n\n  &.va-chip--disabled {\n    @include va-disabled;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaChip from './VaChip.vue'\n\nexport default withConfigTransport(VaChip)\n"]},"metadata":{},"sourceType":"module"}