{"ast":null,"code":"const getEvent = e => \"object\" == typeof e ? e.listen : e,\n      getEmit = e => \"object\" == typeof e ? e.emit : e,\n      useEmitProxy = e => ({\n  createListeners: t => e.reduce((e, r) => {\n    return { ...e,\n      [(c = getEvent(r), `on${c.charAt(0).toUpperCase() + c.slice(1)}`)]: (...e) => t(getEmit(r), ...e)\n    };\n    var c;\n  }, {}),\n  createVOnListeners: t => e.reduce((e, r) => ({ ...e,\n    [getEvent(r)]: (...e) => t(getEmit(r), ...e)\n  }), {}),\n  createEmits: () => e.map(getEmit)\n});\n\nexport { useEmitProxy as u };","map":{"version":3,"mappings":"AAEA,MAAMA,WAAYC,KAAmC,mBAAVA,CAAU,GAAWA,EAAMC,MAAjB,GAA0BD,CAA/E;AAAA,MACME,UAAWF,KAAmC,mBAAVA,CAAU,GAAWA,EAAMG,IAAjB,GAAwBH,CAD5E;AAAA,MAGaI,eAAgBC,MAsBpB;AACLC,mBAfuBH,KAChBE,EAAOE,MAAPF,CAAc,CAACG,CAAD,EAAMC,CAAN,KAAMA;AAAAA,gBACtBD,CADsBC;AAEzB,QARyBT,IAQJD,SAASU,CAATV,CARIC,EAEpB,KADWA,EAAMU,MAANV,CAAa,CAAbA,EAAgBW,WAAhBX,KAAgCA,EAAMY,KAANZ,CAAY,CAAZA,CAAY,EAO5D,IAAsC,IAAIa,CAAJ,KAAoBV,EAAKD,QAAQO,CAARP,CAALC,EAAaM,GAASI,CAAtBV;AAFjCM;AAND,QAACT,CAAD;AAACA,GAMpBK,EAGH,EAHGA,CAaF;AAELS,sBAT0BX,KACnBE,EAAOE,MAAPF,CAAc,CAACG,CAAD,EAAMC,CAAN,MAAMA,KACtBD,CADsBC;AAEzB,KAACV,SAASU,CAATV,CAAD,GAAiB,IAAIc,CAAJ,KAAoBV,EAAKD,QAAQO,CAARP,CAALC,EAAaM,GAASI,CAAtBV;AAFZM,GAAN,CAAdJ,EAGH,EAHGA,CAMF;AAGLU,eAxBkB,MAAMV,EAAOW,GAAPX,CAAWH,OAAXG;AAqBnB,CAtBoBA,CAH7B;;AAIuCH","names":["getEvent","event","listen","getEmit","emit","useEmitProxy","events","createListeners","reduce","acc","key","charAt","toUpperCase","slice","args","createVOnListeners","createEmits","map"],"sources":["../../src/composables/useEmitProxy.ts"],"sourcesContent":["type Events = string | { listen: string, emit: string }\n\nconst getEvent = (event: Events) => typeof event === 'object' ? event.listen : event\nconst getEmit = (event: Events) => typeof event === 'object' ? event.emit : event\n\nexport const useEmitProxy = (events: Events[]) => {\n  const createEmits = () => events.map(getEmit)\n\n  const eventToListenerName = (event: string) => {\n    const eventName = event.charAt(0).toUpperCase() + event.slice(1)\n    return `on${eventName}`\n  }\n\n  const createListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [eventToListenerName(getEvent(key))]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  const createVOnListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [getEvent(key)]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  return {\n    createListeners,\n    createVOnListeners,\n    createEmits,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}