{"ast":null,"code":"import { p as r, b as t } from \"./withConfigTransport.js\";\nvar e = /\\s/;\n\nvar n = function trimmedEndIndex$1(r) {\n  for (var t = r.length; t-- && e.test(r.charAt(t)););\n\n  return t;\n},\n    a = /^\\s+/;\n\nvar i = function baseTrim$1(r) {\n  return r ? r.slice(0, n(r) + 1).replace(a, \"\") : r;\n},\n    f = r,\n    s = t,\n    o = /^[-+]0x[0-9a-f]+$/i,\n    u = /^0b[01]+$/i,\n    p = /^0o[0-7]+$/i,\n    v = parseInt;\n\nvar c = function toNumber(r) {\n  if (\"number\" == typeof r) return r;\n  if (s(r)) return NaN;\n\n  if (f(r)) {\n    var t = \"function\" == typeof r.valueOf ? r.valueOf() : r;\n    r = f(t) ? t + \"\" : t;\n  }\n\n  if (\"string\" != typeof r) return 0 === r ? r : +r;\n  r = i(r);\n  var e = u.test(r);\n  return e || p.test(r) ? v(r.slice(2), e ? 2 : 8) : o.test(r) ? NaN : +r;\n};\n\nexport { c as t };","map":{"version":3,"mappings":";AACA,IAAIA,IAAe,IAAnB;;AAAmB,ICDfC,IDWJ,SAASA,iBAAT,CAAyBC,CAAzB,EAAyBA;AAGvB,OAFA,IAAIC,IAAQD,EAAOE,MAEnB,EAAOD,OAAWH,EAAaK,IAAbL,CAAkBE,EAAOI,MAAPJ,CAAcC,CAAdD,CAAlBF,CAAlB,EAAkDG;;AAClD,SAAOA,CAAP;AAAOA,CAdU;AAAA,ICEfI,IAAc,MDFC;;ACED,ICHdC,IDYJ,SAASA,UAAT,CAAkBN,CAAlB,EAAkBA;AAChB,SAAOA,IACHA,EAAOO,KAAPP,CAAa,CAAbA,EAAgBD,EAAgBC,CAAhBD,IAA0B,CAA1CC,EAA6CQ,OAA7CR,CAAqDK,CAArDL,EAAkE,EAAlEA,CADGA,GAEHA,CAFJ;AAEIA,CAZY;AAAA,ICFdS,IAAWC,CDEG;AAAA,ICDdC,IAAWC,CDCG;AAAA,ICKdC,IAAa,oBDLC;AAAA,ICQdC,IAAa,YDRC;AAAA,ICWdC,IAAY,aDXE;AAAA,ICcdC,IAAeC,QDdD;;ACcCA,IA8CnBC,IArBA,SAASC,QAAT,CAAkBC,CAAlB,EAAkBA;AAChB,MAAoB,mBAATA,CAAX,EACE,OAAOA,CAAP;AAEF,MAAIT,EAASS,CAATT,CAAJ,EACE,OA1CMU,GA0CN;;AAEF,MAAIZ,EAASW,CAATX,CAAJ,EAAqB;AACnB,QAAIa,IAAgC,qBAAjBF,EAAMG,OAAW,GAAaH,EAAMG,OAANH,EAAb,GAA+BA,CAAnE;AACAA,QAAQX,EAASa,CAATb,IAAmBa,IAAQ,EAA3Bb,GAAiCa,CAAzCF;AAEF;;AAAA,MAAoB,mBAATA,CAAX,EACE,OAAiB,MAAVA,CAAU,GAAIA,CAAJ,GAAIA,CAASA,CAA9B;AAEFA,MAAQd,EAASc,CAATd,CAARc;AACA,MAAII,IAAWV,EAAWX,IAAXW,CAAgBM,CAAhBN,CAAf;AACA,SAAQU,KAAYT,EAAUZ,IAAVY,CAAeK,CAAfL,CAAZS,GACJR,EAAaI,EAAMb,KAANa,CAAY,CAAZA,CAAbJ,EAA6BQ,IAAW,CAAXA,GAAe,CAA5CR,CADIQ,GAEHX,EAAWV,IAAXU,CAAgBO,CAAhBP,IAvDGQ,GAuDHR,GAvDG,CAuD6BO,CAFrC;AAEqCA,CA3CpBH;;AA2CoBG","names":["reWhitespace","trimmedEndIndex","string","index","length","test","charAt","reTrimStart","baseTrim","slice","replace","isObject","require$$1","isSymbol","require$$2","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber_1","toNumber","value","NaN","other","valueOf","isBinary"],"sources":["../../../../node_modules/lodash/_trimmedEndIndex.js","../../../../node_modules/lodash/_baseTrim.js","../../../../node_modules/lodash/toNumber.js"],"sourcesContent":["/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n"]},"metadata":{},"sourceType":"module"}