{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { w as t } from \"./withConfigTransport.js\";\nimport { defineComponent as o, ref as e, computed as r, onMounted as a, onBeforeMount as i, resolveComponent as l, openBlock as s, createElementBlock as n, normalizeStyle as p, renderSlot as c, createVNode as v, createCommentVNode as u } from \"vue\";\nimport m from \"./index8.js\";\nimport { s as d } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"./color-config.js\";\nimport \"colortranslator\";\nimport \"./useColor.js\";\nimport \"./useRouterLink.js\";\nimport \"./useSize.js\";\nimport \"./useLoading.js\";\nimport \"./index28.js\";\nimport \"./VaIcon.js\";\nimport \"./flatten.js\";\nimport \"./index39.js\";\nimport \"./clamp.js\";\nimport \"./toNumber.js\";\nvar f = o({\n  name: \"VaBacktop\",\n  components: {\n    VaButton: m\n  },\n  props: {\n    target: {\n      type: [Object, String],\n      default: () => document.body\n    },\n    visibilityHeight: {\n      type: Number,\n      default: 300\n    },\n    speed: {\n      type: Number,\n      default: 50\n    },\n    verticalOffset: {\n      type: String,\n      default: \"1rem\"\n    },\n    horizontalOffset: {\n      type: String,\n      default: \"1rem\"\n    },\n    color: {\n      type: String,\n      default: \"\"\n    },\n    horizontalPosition: {\n      type: String,\n      default: \"right\",\n      validator: t => [\"right\", \"left\"].includes(t)\n    },\n    verticalPosition: {\n      type: String,\n      default: \"bottom\",\n      validator: t => [\"bottom\", \"top\"].includes(t)\n    }\n  },\n\n  setup(t) {\n    const o = e(!1),\n          l = r(() => ({\n      [t.verticalPosition]: t.verticalOffset,\n      [t.horizontalPosition]: t.horizontalOffset\n    }));\n    let s = document.body;\n\n    const n = e(!1),\n          p = e(0),\n          handleScroll = () => {\n      o.value = s.scrollTop > t.visibilityHeight;\n    };\n\n    return a(() => {\n      s = \"string\" == typeof t.target ? document.querySelector(t.target) || document.body : t.target, null == s || s.addEventListener(\"scroll\", handleScroll);\n    }), i(() => null == s ? void 0 : s.removeEventListener(\"scroll\", handleScroll)), {\n      computedStyle: l,\n      visible: o,\n      scrollToTop: () => {\n        n.value || (n.value = !0, p.value = window.setInterval(() => {\n          if (0 === s.scrollTop) clearInterval(p.value), n.value = !1;else {\n            const o = Math.floor(s.scrollTop - t.speed);\n            s.scrollTo(0, o);\n          }\n        }, 15));\n      }\n    };\n  }\n\n});\nd(\":root{--va-backtop-position:fixed;--va-backtop-top:auto;--va-backtop-left:auto;--va-backtop-right:auto;--va-backtop-bottom:auto;--va-backtop-cursor:pointer;--va-backtop-z-index:3}.va-backtop{bottom:var(--va-backtop-bottom);cursor:var(--va-backtop-cursor);font-family:var(--va-font-family);left:var(--va-backtop-left);position:var(--va-backtop-position);right:var(--va-backtop-right);top:var(--va-backtop-top);z-index:var(--va-backtop-z-index)}\"), f.render = function render(t, o, e, r, a, i) {\n  const m = l(\"va-button\");\n  return t.visible ? (s(), n(\"div\", {\n    key: 0,\n    class: \"va-backtop\",\n    style: p(t.computedStyle),\n    onClick: o[0] || (o[0] = o => t.scrollToTop())\n  }, [c(t.$slots, \"default\", {}, () => [v(m, {\n    icon: \"expand_less\",\n    color: t.color\n  }, null, 8, [\"color\"])])], 4)) : u(\"v-if\", !0);\n}, f.__file = \"src/components/va-backtop/VaBacktop.vue\";\nvar b = t(f);\nexport { b as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAqBA,QAAeA,EAAgB;AAC7BC,QAAM,WADuB;AAE7BC,cAAY;AAAEC;AAAF,GAFiB;AAG7BC,SAAO;AACLC,YAAQ;AACNC,YAAM,CAACC,MAAD,EAASC,MAAT,CADA;AAENC,eAAS,MAAMC,SAASC;AAFlB,KADH;AAMLC,sBAAkB;AAAEN,YAAMO,MAAR;AAAoCJ,eAAS;AAA7C,KANb;AAOLK,WAAO;AAAER,YAAMO,MAAR;AAAoCJ,eAAS;AAA7C,KAPF;AAQLM,oBAAgB;AAAET,YAAME,MAAR;AAAoCC,eAAS;AAA7C,KARX;AASLO,sBAAkB;AAAEV,YAAME,MAAR;AAAoCC,eAAS;AAA7C,KATb;AAULQ,WAAO;AAAEX,YAAME,MAAR;AAAoCC,eAAS;AAA7C,KAVF;AAWLS,wBAAoB;AAClBZ,YAAME,MADY;AAElBC,eAAS,OAFS;AAGlBU,iBAAYC,KAAkB,CAAC,OAAD,EAAU,MAAV,EAAkBC,QAAlB,CAA2BD,CAA3B;AAHZ,KAXf;AAiBLE,sBAAkB;AAChBhB,YAAME,MADU;AAEhBC,eAAS,QAFO;AAGhBU,iBAAYC,KAAkB,CAAC,QAAD,EAAW,KAAX,EAAkBC,QAAlB,CAA2BD,CAA3B;AAHd;AAjBb,GAHsB;;AA0B7BG,QAAOnB,CAAPmB,EAAOnB;AACL,UAAMoB,IAAUC,GAAI,CAAJA,CAAhB;AAAA,UAEMC,IAAgBC,EAAS;AAC7B,OAACvB,EAAMkB,gBAAP,GAA0BlB,EAAMW,cADH;AAE7B,OAACX,EAAMc,kBAAP,GAA4Bd,EAAMY;AAFL,MAATW,CAFtB;AAOA,QAAIC,IAAyBlB,SAASC,IAAtC;;AACA,UAIMkB,IAAWJ,GAAI,CAAJA,CAJjB;AAAA,UAKMK,IAAWL,EAAI,CAAJA,CALjB;AAAA,UAsBMM,eAAe;AACnBP,QAAQJ,KAARI,GAAgBI,EAAcI,SAAdJ,GAA0BxB,EAAMQ,gBAAhDY;AAAgDZ,KAvBlD;;AAiCA,WAPAqB,EAAU;AACRL,UA3BqD,mBAAjBxB,EAAMC,MAAW,GACnDK,SAASwB,aAATxB,CAAuBN,EAAMC,MAA7BK,KAAwCA,SAASC,IADE,GAEnDP,EAAMC,MAyBRuB,EACAA,eAAeO,gBAAfP,CAAgC,QAAhCA,EAA0CG,YAA1CH,CADAA;AAC0CG,KAF5CE,GAKAG,EAAc,MAAMR,uBAAeS,mBAAfT,CAAmC,QAAnCA,EAA6CG,YAA7CH,CAApBQ,CALAH,EAOO;AACLP,sBADK;AAELF,gBAFK;AAGLc,mBA9BkB;AACdT,UAAST,KAATS,KAEJA,EAAST,KAATS,GAAST,CAAQ,CAAjBS,EAEAC,EAASV,KAATU,GAAiBS,OAAOC,WAAPD,CAAmB;AAClC,cAAgC,MAA5BX,EAAcI,SAAlB,EACES,cAAcX,EAASV,KAAvBqB,GACAZ,EAAST,KAATS,GAAST,CAAQ,CADjBqB,CADF,KAGO;AACL,kBAAMC,IAAOC,KAAKC,KAALD,CAAWf,EAAcI,SAAdJ,GAA0BxB,EAAMU,KAA3C6B,CAAb;AACAf,cAAciB,QAAdjB,CAAuB,CAAvBA,EAA0Bc,CAA1Bd;AAA0Bc;AAAAA,SANbH,EAQd,EARcA,CAJbV;AAYD;AAcE,KAAP;AAdK;;AAtDsB,CAAhB7B,CAAf;AAsDS8C;AAAA;AAAA,SCzECC,EAAOvB,OAAPuB,IAAOC,KADfC;AAAAA;AAEEC,WAAM,YAFRD;AAGGE,aAAOJ,eAAPI,CAHHF;AAIGG,kCAAOL,eAAPK;AAJHH,KAIUF,CAERM,kCACEC;AACEC,UAAK,aADPD;AAEGrC,WAAO8B;AAFVO,KAEUP,IAFVO,EAEUP,CAFVO,EAEUP,SAFVO,CADF,EAFQP,CAJVE,EAScF,CATdE,CACQF,IAQMA,aDiEP;ACjEOA,CDiEP,ECjEOA,oDDiEP;AExET,QAAeS,EAAoBC,CAApBD,CAAf;AAAmCC","names":["defineComponent","name","components","VaButton","props","target","type","Object","String","default","document","body","visibilityHeight","Number","speed","verticalOffset","horizontalOffset","color","horizontalPosition","validator","value","includes","verticalPosition","setup","visible","ref","computedStyle","computed","targetElement","scrolled","interval","handleScroll","scrollTop","onMounted","querySelector","addEventListener","onBeforeMount","removeEventListener","scrollToTop","window","setInterval","clearInterval","next","Math","floor","scrollTo","d","_ctx","s","_createElementBlock","class","style","onClick","_renderSlot","_createVNode","icon","withConfigTransport","VaBacktop"],"sources":["../../src/components/va-backtop/VaBacktop.vue","../../src/components/va-backtop/VaBacktop.vue?vue&type=template&id=17846d70&lang.js","../../src/components/va-backtop/index.ts"],"sourcesContent":["<template>\n  <div\n    v-if=\"visible\"\n    class=\"va-backtop\"\n    :style=\"computedStyle\"\n    @click=\"scrollToTop()\"\n  >\n    <slot>\n      <va-button\n        icon=\"expand_less\"\n        :color=\"color\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, ref, onMounted, onBeforeMount, Ref } from 'vue'\n\nimport VaButton from '../va-button'\n\nexport default defineComponent({\n  name: 'VaBacktop',\n  components: { VaButton },\n  props: {\n    target: {\n      type: [Object, String] as PropType<Element | string>,\n      default: () => document.body,\n    },\n\n    visibilityHeight: { type: Number as PropType<number>, default: 300 },\n    speed: { type: Number as PropType<number>, default: 50 },\n    verticalOffset: { type: String as PropType<string>, default: '1rem' },\n    horizontalOffset: { type: String as PropType<string>, default: '1rem' },\n    color: { type: String as PropType<string>, default: '' },\n    horizontalPosition: {\n      type: String as PropType<'right' | 'left'>,\n      default: 'right',\n      validator: (value: string) => ['right', 'left'].includes(value),\n    },\n\n    verticalPosition: {\n      type: String as PropType<'bottom' | 'top'>,\n      default: 'bottom',\n      validator: (value: string) => ['bottom', 'top'].includes(value),\n    },\n  },\n  setup (props) {\n    const visible = ref(false)\n\n    const computedStyle = computed(() => ({\n      [props.verticalPosition]: props.verticalOffset,\n      [props.horizontalPosition]: props.horizontalOffset,\n    }))\n\n    let targetElement: Element = document.body\n    const getTargetElement = () => typeof props.target === 'string'\n      ? document.querySelector(props.target) || document.body\n      : props.target\n\n    const scrolled = ref(false)\n    const interval = ref(0)\n    const scrollToTop = () => {\n      if (scrolled.value) { return }\n\n      scrolled.value = true\n\n      interval.value = window.setInterval(() => {\n        if (targetElement.scrollTop === 0) {\n          clearInterval(interval.value)\n          scrolled.value = false\n        } else {\n          const next = Math.floor(targetElement.scrollTop - props.speed)\n          targetElement.scrollTo(0, next)\n        }\n      }, 15)\n    }\n\n    const handleScroll = () => {\n      visible.value = targetElement.scrollTop > props.visibilityHeight\n    }\n\n    onMounted(() => {\n      targetElement = getTargetElement()\n      targetElement?.addEventListener('scroll', handleScroll)\n    })\n\n    onBeforeMount(() => targetElement?.removeEventListener('scroll', handleScroll))\n\n    return {\n      computedStyle,\n      visible,\n      scrollToTop,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-backtop {\n  position: var(--va-backtop-position);\n  top: var(--va-backtop-top);\n  left: var(--va-backtop-left);\n  right: var(--va-backtop-right);\n  bottom: var(--va-backtop-bottom);\n  cursor: var(--va-backtop-cursor);\n  z-index: var(--va-backtop-z-index);\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <div\n    v-if=\"visible\"\n    class=\"va-backtop\"\n    :style=\"computedStyle\"\n    @click=\"scrollToTop()\"\n  >\n    <slot>\n      <va-button\n        icon=\"expand_less\"\n        :color=\"color\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, ref, onMounted, onBeforeMount, Ref } from 'vue'\n\nimport VaButton from '../va-button'\n\nexport default defineComponent({\n  name: 'VaBacktop',\n  components: { VaButton },\n  props: {\n    target: {\n      type: [Object, String] as PropType<Element | string>,\n      default: () => document.body,\n    },\n\n    visibilityHeight: { type: Number as PropType<number>, default: 300 },\n    speed: { type: Number as PropType<number>, default: 50 },\n    verticalOffset: { type: String as PropType<string>, default: '1rem' },\n    horizontalOffset: { type: String as PropType<string>, default: '1rem' },\n    color: { type: String as PropType<string>, default: '' },\n    horizontalPosition: {\n      type: String as PropType<'right' | 'left'>,\n      default: 'right',\n      validator: (value: string) => ['right', 'left'].includes(value),\n    },\n\n    verticalPosition: {\n      type: String as PropType<'bottom' | 'top'>,\n      default: 'bottom',\n      validator: (value: string) => ['bottom', 'top'].includes(value),\n    },\n  },\n  setup (props) {\n    const visible = ref(false)\n\n    const computedStyle = computed(() => ({\n      [props.verticalPosition]: props.verticalOffset,\n      [props.horizontalPosition]: props.horizontalOffset,\n    }))\n\n    let targetElement: Element = document.body\n    const getTargetElement = () => typeof props.target === 'string'\n      ? document.querySelector(props.target) || document.body\n      : props.target\n\n    const scrolled = ref(false)\n    const interval = ref(0)\n    const scrollToTop = () => {\n      if (scrolled.value) { return }\n\n      scrolled.value = true\n\n      interval.value = window.setInterval(() => {\n        if (targetElement.scrollTop === 0) {\n          clearInterval(interval.value)\n          scrolled.value = false\n        } else {\n          const next = Math.floor(targetElement.scrollTop - props.speed)\n          targetElement.scrollTo(0, next)\n        }\n      }, 15)\n    }\n\n    const handleScroll = () => {\n      visible.value = targetElement.scrollTop > props.visibilityHeight\n    }\n\n    onMounted(() => {\n      targetElement = getTargetElement()\n      targetElement?.addEventListener('scroll', handleScroll)\n    })\n\n    onBeforeMount(() => targetElement?.removeEventListener('scroll', handleScroll))\n\n    return {\n      computedStyle,\n      visible,\n      scrollToTop,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-backtop {\n  position: var(--va-backtop-position);\n  top: var(--va-backtop-top);\n  left: var(--va-backtop-left);\n  right: var(--va-backtop-right);\n  bottom: var(--va-backtop-bottom);\n  cursor: var(--va-backtop-cursor);\n  z-index: var(--va-backtop-z-index);\n  font-family: var(--va-font-family);\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaBacktop from './VaBacktop.vue'\n\nexport default withConfigTransport(VaBacktop)\n"]},"metadata":{},"sourceType":"module"}