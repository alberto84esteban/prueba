{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance as e, computed as i } from \"vue\";\nimport { g as t } from \"./withConfigTransport.js\";\n\nconst o = {\n  defaultSize: 48,\n  sizes: {\n    small: 32,\n    medium: 48,\n    large: 64\n  }\n},\n      s = {\n  defaultSize: 1,\n  sizes: {\n    small: .75,\n    medium: 1,\n    large: 1.25\n  }\n},\n      r = {\n  size: {\n    type: [String, Number],\n    default: \"\",\n    validator: e => \"string\" == typeof e || \"number\" == typeof e\n  },\n  sizesConfig: {\n    type: Object,\n    default: () => o\n  },\n  fontSizesConfig: {\n    type: Object,\n    default: () => s\n  }\n},\n      n = /(?<fontSize>\\d+)(?<extension>px|rem)/i,\n      convertToRem = e => e / 16 - .5,\n      useSize = (o, s) => {\n  var r;\n  void 0 === s && (s = null === (r = e()) || void 0 === r ? void 0 : r.type.name);\n  const u = i(() => {\n    var e, i;\n    return s ? null === (i = null === (e = t().components) || void 0 === e ? void 0 : e[s]) || void 0 === i ? void 0 : i.sizesConfig : void 0;\n  }),\n        z = i(() => {\n    var e, i, t;\n    const {\n      defaultSize: s,\n      sizes: r\n    } = o.sizesConfig,\n          n = null === (e = u.value) || void 0 === e ? void 0 : e.defaultSize;\n    if (!o.size) return `${n || s}px`;\n\n    if (\"string\" == typeof o.size) {\n      const e = null === (t = null === (i = u.value) || void 0 === i ? void 0 : i.sizes) || void 0 === t ? void 0 : t[o.size],\n            s = r[o.size];\n      return e ? `${e}px` : s ? `${s}px` : o.size;\n    }\n\n    return `${o.size}px`;\n  }),\n        l = i(() => {\n    const {\n      defaultSize: e,\n      sizes: i\n    } = o.fontSizesConfig;\n    if (!o.size) return e;\n\n    if (\"string\" == typeof o.size) {\n      if (o.size in i) return i[o.size];\n      const e = o.size.match(n);\n      if (!e || !e.groups) throw new Error(\"Size prop should be either valid string or number\");\n      const {\n        extension: t,\n        fontSize: s\n      } = e.groups;\n      return \"rem\" === t ? +s : convertToRem(+s);\n    }\n\n    return convertToRem(o.size);\n  });\n  return {\n    sizeComputed: z,\n    fontSizeComputed: i(() => `${l.value}rem`)\n  };\n};\n\nexport { useSize as a, r as u };","map":{"version":3,"mappings":";;;;AAGO,MAAMA,IAA0B;AACrCC,eAAa,EADwB;AAErCC,SAAO;AACLC,WAAO,EADF;AAELC,YAAQ,EAFH;AAGLC,WAAO;AAHF;AAF8B,CAAhC;AAAA,MASMC,IAA8B;AACzCL,eAAa,CAD4B;AAEzCC,SAAO;AACLC,WAAO,GADF;AAELC,YAAQ,CAFH;AAGLC,WAAO;AAHF;AAFkC,CATpC;AAAA,MA8BME,IAAe;AAC1BC,QAAM;AACJC,UAAM,CAACC,MAAD,EAASC,MAAT,CADF;AAEJC,aAAS,EAFL;AAGJC,eAAYL,KACa,mBAATA,CAAS,IAA4B,mBAATA;AAJxC,GADoB;AAS1BR,eAAa;AACXS,UAAMK,MADK;AAEXF,aAAS,MAAMZ;AAFJ,GATa;AAc1BM,mBAAiB;AACfG,UAAMK,MADS;AAEfF,aAAS,MAAMN;AAFA;AAdS,CA9BrB;AAAA,MAkDDS,IAAY,uCAlDX;AAAA,MAoDDC,eAAgBC,KAAeA,IAAK,EAALA,GAAU,EApDxC;AAAA,MAsDMC,UAAU,CACrBC,CADqB,EAErBC,CAFqB,KAErBA;AAAAA;AAAAA,qCAAoCC,GAApCD,KAAoCC,YAApCD,GAAoCC,MAApCD,GAAoCC,EAAsBZ,IAAtBY,CAA2BC,IAA/DF;AAEA,QAAMG,IAAoBC,EAAqB;AAAA;AAC7C,WAAOJ,gCACHK,IAAkBC,UADfN,KACeM,YADfN,GACeM,MADfN,GACeM,EAAaN,CAAbM,CADfN,KAC4BA,YAD5BA,GAC4BA,MAD5BA,GAC4BA,EAAgBpB,WAD5CoB,GAC4CpB,KAC/C2B,CAFJ;AAEIA,GAHoBH,CAA1B;AAAA,QAMMI,IAAeJ,EAAiB;AAAA;AACpC;AAAMvB,mBAAEA,CAAR;AAAmBC,aAAEA;AAArB,QAA+BiB,EAAMnB,WAArC;AAAA,UACM6B,kBAAoBN,EAAkBO,KAAtCD,KAAsCC,YAAtCD,GAAsCC,MAAtCD,GAAsCC,EAAO7B,WADnD;AAGA,SAAKkB,EAAMX,IAAX,EAAmB,OAAO,GAAGqB,KAAqB5B,KAA/B;;AAEnB,QAA0B,mBAAfkB,EAAMX,IAAjB,EAAoC;AAClC,YAAMuB,gCAAuBR,EAAkBO,KAAzCC,KAAyCD,YAAzCC,GAAyCD,MAAzCC,GAAyCD,EAAO5B,KAAhD6B,KAAgD7B,YAAhD6B,GAAgD7B,MAAhD6B,GAAgD7B,EAAQiB,EAAMX,IAAdN,CAAtD;AAAA,YACM8B,IAAgB9B,EAAMiB,EAAMX,IAAZN,CADtB;AAGA,aAAI6B,IAA+B,GAAGA,KAAlCA,GACAC,IAAwB,GAAGA,KAA3BA,GAEGb,EAAMX,IAHb;AAMF;;AAAA,WAAO,GAAGW,EAAMX,QAAhB;AAAgBA,GAhBGgB,CANrB;AAAA,QAyBMS,IAAgBT,EAAiB;AACrC;AAAMvB,mBAAEA,CAAR;AAAmBC,aAAEA;AAArB,QAA+BiB,EAAMb,eAArC;AAEA,SAAKa,EAAMX,IAAX,EAAmB,OAAOP,CAAP;;AAEnB,QAA0B,mBAAfkB,EAAMX,IAAjB,EAAoC;AAClC,UAAIW,EAAMX,IAANW,IAAcjB,CAAlB,EAA2B,OAAOA,EAAMiB,EAAMX,IAAZN,CAAP;AAE3B,YAAMgC,IAAiBf,EAAMX,IAANW,CAAWgB,KAAXhB,CAAiBJ,CAAjBI,CAAvB;AACA,WAAKe,CAAL,IAAKA,CAAmBA,EAAeE,MAAvC,EACE,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AAGF;AAAMC,mBAAEA,CAAR;AAAiBC,kBAAEA;AAAnB,UAAgCL,EAAeE,MAA/C;AACA,aAAqB,UAAdE,CAAc,GAAdA,CAAuBC,CAAT,GAAoBvB,cAAcuB,CAAdvB,CAAzC;AAGF;;AAAA,WAAOA,aAAaG,EAAMX,IAAnBQ,CAAP;AAA0BR,GAjBNgB,CAzBtB;AA+CA,SAAO;AACLI,mBADK;AAELY,sBAJuBhB,EAAiB,MAAM,GAAGS,EAAcH,UAAxCN;AAElB,GAAP;AAFiEM,CAvG5D;;AAuG4DA","names":["sizesConfig","defaultSize","sizes","small","medium","large","fontSizesConfig","useSizeProps","size","type","String","Number","default","validator","Object","fontRegex","convertToRem","px","useSize","props","componentName","getCurrentInstance","name","sizesConfigGlobal","computed","getGlobalConfig","components","undefined","sizeComputed","defaultSizeGlobal","value","sizeFromGlobalConfig","sizeFromProps","fontSizeInRem","fontSizeParsed","match","groups","Error","extension","fontSize","fontSizeComputed"],"sources":["../../src/composables/useSize.ts"],"sourcesContent":["import { computed, getCurrentInstance, PropType } from 'vue'\nimport { getGlobalConfig, SizeConfig } from '../services/global-config/global-config'\n\nexport const sizesConfig: SizeConfig = {\n  defaultSize: 48,\n  sizes: {\n    small: 32,\n    medium: 48,\n    large: 64,\n  },\n}\n\nexport const fontSizesConfig: SizeConfig = {\n  defaultSize: 1,\n  sizes: {\n    small: 0.75,\n    medium: 1,\n    large: 1.25,\n  },\n}\n\ninterface SizeProps {\n  size: string | number;\n  sizesConfig: Record<string, any>;\n  fontSizesConfig: Record<string, any>;\n}\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useSizeProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useSizeProps = {\n  size: {\n    type: [String, Number] as PropType<string | number>,\n    default: '',\n    validator: (size: string | number) => {\n      return typeof size === 'string' || typeof size === 'number'\n    },\n  },\n\n  sizesConfig: {\n    type: Object as PropType<Record<string, any>>,\n    default: () => sizesConfig,\n  },\n\n  fontSizesConfig: {\n    type: Object as PropType<Record<string, any>>,\n    default: () => fontSizesConfig,\n  },\n}\n\nconst fontRegex = /(?<fontSize>\\d+)(?<extension>px|rem)/i\n\nconst convertToRem = (px: number) => px / 16 - 0.5\n\nexport const useSize = (\n  props: SizeProps,\n  componentName: string | undefined = getCurrentInstance()?.type.name,\n) => {\n  const sizesConfigGlobal = computed<SizeConfig>(() => {\n    return componentName\n      ? getGlobalConfig().components?.[componentName]?.sizesConfig\n      : undefined\n  })\n\n  const sizeComputed = computed<string>(() => {\n    const { defaultSize, sizes } = props.sizesConfig\n    const defaultSizeGlobal = sizesConfigGlobal.value?.defaultSize\n\n    if (!props.size) { return `${defaultSizeGlobal || defaultSize}px` }\n\n    if (typeof props.size === 'string') {\n      const sizeFromGlobalConfig = sizesConfigGlobal.value?.sizes?.[props.size]\n      const sizeFromProps = sizes[props.size]\n\n      if (sizeFromGlobalConfig) { return `${sizeFromGlobalConfig}px` }\n      if (sizeFromProps) { return `${sizeFromProps}px` }\n\n      return props.size\n    }\n\n    return `${props.size}px`\n  })\n\n  const fontSizeInRem = computed<number>(() => {\n    const { defaultSize, sizes } = props.fontSizesConfig\n\n    if (!props.size) { return defaultSize }\n\n    if (typeof props.size === 'string') {\n      if (props.size in sizes) { return sizes[props.size] }\n\n      const fontSizeParsed = props.size.match(fontRegex)\n      if (!fontSizeParsed || !fontSizeParsed.groups) {\n        throw new Error('Size prop should be either valid string or number')\n      }\n\n      const { extension, fontSize } = fontSizeParsed.groups\n      return extension === 'rem' ? +fontSize : convertToRem(+fontSize)\n    }\n\n    return convertToRem(props.size)\n  })\n\n  const fontSizeComputed = computed<string>(() => `${fontSizeInRem.value}rem`)\n\n  return {\n    sizeComputed,\n    fontSizeComputed,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}