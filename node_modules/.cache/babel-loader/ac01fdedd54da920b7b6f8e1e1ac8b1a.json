{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { s, g as o } from \"./withConfigTransport.js\";\nimport { ColorTranslator as r } from \"colortranslator\";\n\nconst colorToRgba = (s, o) => new r(s).setA(o).RGBA,\n      getTextColor = (s, o = \"var(--va-dark)\", t = \"var(--va-white)\") => {\n  const {\n    R: e,\n    G: a,\n    B: l\n  } = new r(s);\n  return Math.sqrt(e * e * .241 + a * a * .691 + l * l * .068) > 130 ? o : t;\n},\n      getBoxShadowColor = s => new r(s).setA(.4).RGBA,\n      getHoverColor = s => new r(s).setA(.2).RGBA,\n      getFocusColor = s => new r(s).setA(.3).RGBA,\n      shiftHSLAColor = (s, o) => {\n  const t = new r(s);\n  return o.h && t.setH(t.H + o.h), o.s && t.setS(t.S + o.s), o.l && t.setL(t.L + o.l), o.a && t.setA(t.A + o.a), t.HSLA;\n},\n      setHSLAColor = (s, o) => {\n  const t = new r(s);\n  return void 0 !== o.h && t.setH(o.h), void 0 !== o.s && t.setS(o.s), void 0 !== o.l && t.setL(o.l), void 0 !== o.a && t.setA(o.a), t.HSLA;\n},\n      getGradientBackground = s => `linear-gradient(to right, ${(s => {\n  const o = r.toHSLA(s, !1);\n  if (o.s < 10) return shiftHSLAColor(o, {\n    h: 2,\n    s: 5,\n    l: 10\n  });\n  if (o.s < 30) return shiftHSLAColor(o, {\n    s: -14,\n    l: 11\n  });\n  if (o.h >= 0 && o.h < 44 || o.h >= 285) return shiftHSLAColor(o, {\n    h: 11,\n    s: 27,\n    l: 8\n  });\n  if (o.h >= 44 && o.h < 85) return shiftHSLAColor(o, {\n    h: 3,\n    l: 9\n  });\n  if (o.h >= 85 && o.h < 165) return shiftHSLAColor(o, {\n    h: 16,\n    l: 14\n  });\n  if (o.h >= 165 && o.h < 285) return shiftHSLAColor(o, {\n    h: -15,\n    s: 3,\n    l: 2\n  });\n  throw new Error(\"This method should handle all colors. But it didn't for some reason.\");\n})(s)}, ${r.toHSLA(s)})`,\n      setColors = o => {\n  s(s => ({ ...s,\n    colors: { ...s.colors,\n      ...o\n    }\n  }));\n},\n      getColors = () => o().colors || {},\n      getColor = (s, o = \"#000000\") => {\n  const r = getColors();\n  return s || (s = o), r[s] ? r[s] : /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/.test(s.toLocaleLowerCase()) || (s => /var\\(--.+\\)/.test(s))(s) || CSS.supports(\"color\", s) ? s : o;\n},\n      colorsToCSSVariable = (s, o = \"va\") => Object.keys(s).filter(o => void 0 !== s[o]).reduce((r, t) => (r[`--${o}-${t}`] = getColor(s[t]), r), {}),\n      useColors = () => ({\n  setColors: setColors,\n  getColors: getColors,\n  getColor: getColor,\n  getBoxShadowColor: getBoxShadowColor,\n  getHoverColor: getHoverColor,\n  getFocusColor: getFocusColor,\n  getGradientBackground: getGradientBackground,\n  getTextColor: getTextColor,\n  shiftHSLAColor: shiftHSLAColor,\n  setHSLAColor: setHSLAColor,\n  colorsToCSSVariable: colorsToCSSVariable\n});\n\nexport { getColors as a, getTextColor as b, getBoxShadowColor as c, getGradientBackground as d, shiftHSLAColor as e, getFocusColor as f, getColor as g, getHoverColor as h, colorToRgba as i, setColors as s, useColors as u };","map":{"version":3,"mappings":"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","names":["colorToRgba","color","opacity","ColorTranslator","setA","RGBA","getTextColor","darkColor","lightColor","R","G","B","Math","sqrt","getBoxShadowColor","getHoverColor","getFocusColor","shiftHSLAColor","offset","result","h","setH","H","s","setS","S","l","setL","L","a","A","HSLA","setHSLAColor","newColor","undefined","getGradientBackground","toHSLA","Error","setColors","colors","setGlobalConfig","config","getColors","getGlobalConfig","getColor","prop","defaultColor","test","toLocaleLowerCase","strColor","CSS","supports","colorsToCSSVariable","prefix","Object","keys","filter","key","reduce","acc","colorName","useColors"],"sources":["../../src/services/color-config/color-functions.ts","../../src/services/color-config/color-config.ts"],"sourcesContent":["import { ColorTranslator } from 'colortranslator'\nimport { HSLObject, ColorInput } from 'colortranslator/dist/@types'\n\nexport const colorToRgba = (color: ColorInput, opacity: number) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const getTextColor = (color: ColorInput, darkColor = 'var(--va-dark)', lightColor = 'var(--va-white)') => {\n  const { R, G, B } = new ColorTranslator(color)\n  const isLightBackground = Math.sqrt(R * R * 0.241 + G * G * 0.691 + B * B * 0.068) > 130\n  return isLightBackground ? darkColor : lightColor\n}\n\nexport const getBoxShadowColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.4).RGBA\n}\n\nexport const getHoverColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.2).RGBA\n}\n\nexport const getFocusColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.3).RGBA\n}\n\nexport const shiftHSLAColor = (color: ColorInput, offset: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (offset.h) { result.setH(result.H + offset.h) }\n\n  if (offset.s) { result.setS(result.S + offset.s) }\n\n  if (offset.l) { result.setL(result.L + offset.l) }\n\n  if (offset.a) { result.setA(result.A + offset.a) }\n\n  return result.HSLA\n}\n\nexport const setHSLAColor = (color: ColorInput, newColor: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (newColor.h !== undefined) { result.setH(newColor.h) }\n\n  if (newColor.s !== undefined) { result.setS(newColor.s) }\n\n  if (newColor.l !== undefined) { result.setL(newColor.l) }\n\n  if (newColor.a !== undefined) { result.setA(newColor.a) }\n\n  return result.HSLA\n}\n\n/**\n * This method guesses second color for gradient based on first one.\n * Calculation method should differ for different colors, so we split color circle\n * in zones.\n *\n * @param color\n */\nexport const shiftGradientColor = (color: ColorInput): string => {\n  const newColor = ColorTranslator.toHSLA(color, false) as HSLObject\n\n  // Gray\n  if (newColor.s < 10) {\n    return shiftHSLAColor(newColor, { h: 2, s: 5, l: 10 })\n  }\n  // Unsaturated (too pale, gray-ish, monotone)\n  // For unsaturated color, hue change does nothing.\n  if (newColor.s < 30) {\n    return shiftHSLAColor(newColor, { s: -14, l: 11 })\n  }\n  // Red\n  if ((newColor.h >= 0 && newColor.h < 44) || (newColor.h >= 285)) {\n    return shiftHSLAColor(newColor, { h: 11, s: 27, l: 8 })\n  }\n  // Yellow\n  if (newColor.h >= 44 && newColor.h < 85) {\n    return shiftHSLAColor(newColor, { h: 3, l: 9 })\n  }\n  // Green\n  if (newColor.h >= 85 && newColor.h < 165) {\n    return shiftHSLAColor(newColor, { h: 16, l: 14 })\n  }\n  // Blue\n  if (newColor.h >= 165 && newColor.h < 285) {\n    return shiftHSLAColor(newColor, { h: -15, s: 3, l: 2 })\n  }\n\n  throw new Error('This method should handle all colors. But it didn\\'t for some reason.')\n}\n\nexport const getGradientBackground = (color: string) => {\n  const colorLeft = shiftGradientColor(color)\n  const colorRight = ColorTranslator.toHSLA(color)\n\n  return `linear-gradient(to right, ${colorLeft}, ${colorRight})`\n}\n\n/**\n * Check if color is valid hsl, hsla, rga, rgba or hex color\n * Taken from https://www.regextester.com/103656\n * @param strColor\n */\nexport const isColor = (strColor: string): boolean => {\n  // Need to use Regex instead of DOM methods because we support SSR\n  const cssColorRegex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/\n\n  return cssColorRegex.test(strColor.toLocaleLowerCase())\n}\n\nexport const isCSSVariable = (strColor: string): boolean => /var\\(--.+\\)/.test(strColor)\n","import { GlobalConfig, setGlobalConfig, getGlobalConfig } from '../global-config/global-config'\nimport {\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor,\n  getGradientBackground,\n  isColor,\n  isCSSVariable,\n  getTextColor,\n  shiftHSLAColor,\n  setHSLAColor,\n} from './color-functions'\n\nexport type CssColor = string\nexport type ColorConfig = { [colorName: string]: CssColor }\n\n// Most default color - fallback when nothing else is found.\nexport const DEFAULT_COLOR = '#000000'\n\nexport const setColors = (colors: ColorConfig): void => {\n  setGlobalConfig((config: GlobalConfig) => ({\n    ...config,\n    colors: { ...config.colors, ...colors },\n  }))\n}\n\nexport const getColors = (): ColorConfig => {\n  return getGlobalConfig().colors || {}\n}\n\n/**\n * Returns color from config by name or return prop if color is it's valid hex, hsl, hsla, rgb or rgba color.\n * @param prop - should be color name or color in hex, hsl, hsla, rgb or rgba format\n * @param defaultColor - this color will be used if prop is invalid\n */\nexport const getColor = (prop?: string, defaultColor: string = DEFAULT_COLOR): CssColor => {\n  const colors = getColors()\n\n  if (!prop) {\n    prop = defaultColor\n  }\n\n  if (colors[prop]) {\n    return colors[prop]\n  }\n\n  if (isColor(prop) || isCSSVariable(prop) || CSS.supports('color', prop)) {\n    return prop\n  }\n\n  return defaultColor\n}\n\nexport const colorsToCSSVariable = (colors: { [colorName: string]: string | undefined }, prefix = 'va') => {\n  return Object\n    .keys(colors)\n    .filter((key) => colors[key] !== undefined)\n    .reduce((acc: Record<string, any>, colorName: string) => {\n      acc[`--${prefix}-${colorName}`] = getColor(colors[colorName])\n      return acc\n    }, {})\n}\n\n// Here expose methods that user wants to use in vue component\nexport const useColors = () => ({\n  setColors,\n  getColors,\n  getColor,\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor,\n  getGradientBackground,\n  getTextColor,\n  shiftHSLAColor,\n  setHSLAColor,\n  colorsToCSSVariable,\n})\n"]},"metadata":{},"sourceType":"module"}