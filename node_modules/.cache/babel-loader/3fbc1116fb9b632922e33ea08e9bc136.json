{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { w as e } from \"./withConfigTransport.js\";\nimport { ref as o, defineComponent as r, computed as n, watch as t, resolveComponent as a, openBlock as s, createBlock as l, normalizeClass as p, normalizeStyle as i, withKeys as u, withModifiers as d, withCtx as c, createVNode as m, mergeProps as v, createSlots as f, renderSlot as w, normalizeProps as g, guardReactiveProps as I, createCommentVNode as V, renderList as h } from \"vue\";\nimport { s as y, o as j } from \"./VaIcon.js\";\nimport { s as k } from \"./VaTimePicker.js\";\nimport { s as C, a as S, u as D, b } from \"./VaInput.js\";\nimport { a as P, s as T } from \"./VaDropdownContent.js\";\nimport { u as _ } from \"./useSyncProp.js\";\nimport { a as M, u as O, b as x } from \"./index60.js\";\nimport { e as $, f as E } from \"./child-props.js\";\nimport { g as B } from \"./utils.js\";\nimport \"./VaConfig.js\";\nimport \"./flatten.js\";\nimport \"./color-config.js\";\nimport \"colortranslator\";\nimport \"./useSize.js\";\nimport \"./style-inject.es.js\";\nimport \"./useFocus.js\";\nimport \"./cStatefulMixin.js\";\nimport \"./useForm.js\";\nimport \"cleave.js\";\nimport \"./useEmitProxy.js\";\nimport \"./pick.js\";\nimport \"tslib\";\nimport \"./vue-class-component.esm-bundler.js\";\nimport \"asva-executors\";\nimport \"@popperjs/core\";\nimport \"./StatefulMixin.js\";\nimport \"./consts.js\";\nimport \"./useColor.js\";\n\nconst defaultParseDateFunction = e => {\n  const o = new Date(),\n        [r, n, t] = (e => {\n    const o = e.match(/[0-9]{1,2}/g);\n    return o ? o.map(e => Number(e)) : [];\n  })(e),\n        a = (e => {\n    const o = e.match(/pm|am/i);\n    return o ? Number(\"pm\" === o[0].toLowerCase()) : null;\n  })(e);\n\n  if (!r) return null;\n  const s = null !== a && r <= 12,\n        l = s && !!a,\n        p = s && 12 === r ? 0 : r;\n  return o.setHours(Math.min(p || 0, s ? 12 : 24) + (l ? 12 : 0)), o.setMinutes(Math.min(n || 0, 60)), o.setSeconds(Math.min(t || 0, 60)), o;\n},\n      useTimeParser = e => {\n  const r = o(!0),\n        parseDate = o => {\n    const n = (e.parse || defaultParseDateFunction)(o);\n    return n || (r.value = !1), n;\n  };\n\n  return {\n    parse: e => (r.value = !0, parseDate(e)),\n    isValid: r\n  };\n},\n      F = [\".va-input-wrapper__prepend-inner\", \".va-input__prepend-inner\", \".va-input__append-inner\", \".va-input-wrapper__append-inner\"];\n\nvar U = r({\n  name: \"VaTimeInput\",\n  components: {\n    VaDropdown: P,\n    VaDropdownContent: T,\n    VaTimePicker: k,\n    VaIcon: y,\n    VaInput: C\n  },\n  emits: [...M, ...S, \"update:modelValue\", \"update:isOpen\"],\n  props: { ...$(k),\n    ...$(C),\n    ...O,\n    ...D,\n    isOpen: {\n      type: Boolean,\n      default: void 0\n    },\n    modelValue: {\n      type: Date,\n      default: void 0\n    },\n    clearValue: {\n      type: String,\n      default: void 0\n    },\n    format: {\n      type: Function\n    },\n    parse: {\n      type: Function\n    },\n    manualInput: {\n      type: Boolean,\n      default: !1\n    },\n    leftIcon: {\n      type: Boolean,\n      default: !1\n    },\n    icon: {\n      type: String,\n      default: \"schedule\"\n    }\n  },\n  inheritAttrs: !1,\n\n  setup(e, {\n    emit: r,\n    attrs: a,\n    slots: s\n  }) {\n    const l = o(),\n          p = o(),\n          i = B(),\n          u = B(),\n          [d] = _(\"isOpen\", e, r, !1),\n          [c] = _(\"modelValue\", e, r),\n          {\n      parse: m,\n      isValid: v\n    } = useTimeParser(e),\n          {\n      format: f\n    } = (e => {\n      const formatDate = o => o ? e.ampm ? o.toLocaleTimeString(\"en-US\") : o.toLocaleTimeString(\"en-GB\") : \"\",\n            sliceTime = (e, o, r) => e.split(\":\").slice(o, r).join(\":\");\n\n      return {\n        format: o => {\n          if (\"seconds\" === e.view) return formatDate(o);\n          const [r, n] = formatDate(o).split(\" \");\n          return \"minutes\" === e.view ? n ? [sliceTime(r, 0, 2), n].join(\" \") : sliceTime(r, 0, 2) : \"hours\" === e.view ? n ? [sliceTime(r, 0, 1), n].join(\" \") : sliceTime(r, 0, 1) : \"\";\n        }\n      };\n    })(e),\n          w = n(() => v.value && c.value ? e.format ? e.format(c.value) : f(c.value) : e.clearValue),\n          g = E(e, $(k)),\n          I = E(e, $(C, [\"rules\", \"error\", \"errorMessages\", \"clearable\"])),\n          V = n(() => ({\n      ariaLabel: e.label,\n      ...j(a, [\"class\", \"style\"])\n    })),\n          h = n(() => {\n      const o = [e.leftIcon && \"prependInner\", (!e.leftIcon || e.clearable) && \"icon\"];\n      return Object.keys(s).filter(e => !o.includes(e));\n    }),\n          reset = () => {\n      r(\"update:modelValue\", e.clearValue), r(\"clear\");\n    },\n          focus = () => {\n      var e;\n      null === (e = l.value) || void 0 === e || e.focus();\n    },\n          {\n      isFocused: y,\n      computedError: S,\n      computedErrorMessages: D\n    } = x(e, r, reset, focus),\n          P = n(() => !v.value && w.value !== e.clearValue || S.value),\n          {\n      canBeCleared: T,\n      clearIconProps: M\n    } = b(e, w, y, P),\n          O = n(() => ({\n      name: e.icon,\n      color: e.color,\n      size: \"small\"\n    }));\n\n    t(c, () => {\n      v.value = !0;\n    });\n\n    const hideDropdown = () => {\n      d.value = !1, focus();\n    },\n          showDropdown = () => {\n      e.disabled || e.readonly || (d.value = !0);\n    },\n          dropdownToggle = () => {\n      d.value ? hideDropdown() : showDropdown();\n    };\n\n    return {\n      input: l,\n      timePicker: p,\n      clearIconId: i,\n      componentIconId: u,\n      timePickerProps: g,\n      computedInputProps: I,\n      computedInputAttrs: V,\n      isOpenSync: d,\n      modelValueSync: c,\n      valueText: w,\n      onInputTextChanged: e => {\n        const o = m(e);\n        v.value && o && (c.value = o);\n      },\n      reset: reset,\n      onValueInput: e => {\n        !e && reset();\n      },\n      canBeCleared: T,\n      iconProps: O,\n      clearIconProps: M,\n      filterSlots: h,\n      hideDropdown: hideDropdown,\n      showDropdown: showDropdown,\n      dropdownToggle: dropdownToggle,\n      computedError: S,\n      computedErrorMessages: D,\n      hasError: P,\n      handleComponentClick: o => {\n        var r, n;\n        const t = null === (r = o.target) || void 0 === r ? void 0 : r.id;\n        if (t === i) return focus();\n        if (t === u) return null === (n = p.value) || void 0 === n ? void 0 : n.focus();\n        return F.some(e => {\n          var r;\n          return !!(null === (r = o.target) || void 0 === r ? void 0 : r.closest(e));\n        }) ? void 0 : e.manualInput ? d.value && hideDropdown() : void dropdownToggle();\n      }\n    };\n  },\n\n  methods: {\n    focus() {\n      var e;\n      null === (e = this.input) || void 0 === e || e.focus();\n    },\n\n    blur() {\n      var e;\n      null === (e = this.input) || void 0 === e || e.blur();\n    }\n\n  }\n});\nU.render = function render(e, o, r, n, t, y) {\n  const j = a(\"va-icon\"),\n        k = a(\"va-input\"),\n        C = a(\"va-time-picker\"),\n        S = a(\"va-dropdown-content\"),\n        D = a(\"va-dropdown\");\n  return s(), l(D, {\n    class: p([\"va-time-input\", e.$attrs.class]),\n    style: i(e.$attrs.style),\n    modelValue: e.isOpenSync,\n    \"onUpdate:modelValue\": o[6] || (o[6] = o => e.isOpenSync = o),\n    offset: [0, 1],\n    \"close-on-content-click\": !1,\n    disabled: e.$props.disabled,\n    position: \"bottom-start\",\n    anchorSelector: \".va-input__container\",\n    stateful: !1,\n    trigger: \"none\",\n    onKeydown: [o[7] || (o[7] = u(d(o => e.showDropdown(), [\"prevent\"]), [\"up\"])), o[8] || (o[8] = u(d(o => e.showDropdown(), [\"prevent\"]), [\"down\"])), o[9] || (o[9] = u(d(o => e.showDropdown(), [\"prevent\"]), [\"space\"]))],\n    onClick: e.handleComponentClick\n  }, {\n    anchor: c(() => [m(k, v({\n      ref: \"input\"\n    }, { ...e.computedInputProps,\n      ...e.computedInputAttrs\n    }, {\n      modelValue: e.valueText,\n      readonly: e.$props.readonly || !e.$props.manualInput,\n      error: e.hasError,\n      \"error-messages\": e.computedErrorMessages,\n      \"required-mark\": e.$props.requiredMark,\n      onChange: o[3] || (o[3] = o => e.onInputTextChanged(o.target.value)),\n      \"onUpdate:modelValue\": e.onValueInput\n    }), f({\n      prependInner: c(r => [w(e.$slots, \"prependInner\", g(I({ ...r,\n        dropdownToggle: e.dropdownToggle,\n        showDropdown: e.showDropdown,\n        hideDropdown: e.hideDropdown,\n        isOpen: e.isOpenSync,\n        focus: e.focus\n      }))), e.$props.leftIcon ? (s(), l(j, v({\n        key: 0,\n        id: e.componentIconId\n      }, e.iconProps, {\n        onClick: o[0] || (o[0] = o => e.dropdownToggle())\n      }), null, 16, [\"id\"])) : V(\"v-if\", !0)]),\n      icon: c(() => [e.canBeCleared ? (s(), l(j, v({\n        key: 0,\n        id: e.clearIconId\n      }, e.clearIconProps, {\n        onClick: o[1] || (o[1] = o => e.reset())\n      }), null, 16, [\"id\"])) : e.$props.leftIcon ? V(\"v-if\", !0) : (s(), l(j, v({\n        key: 1,\n        id: e.componentIconId\n      }, e.iconProps, {\n        onClick: o[2] || (o[2] = o => e.dropdownToggle())\n      }), null, 16, [\"id\"]))]),\n      _: 2\n    }, [h(e.filterSlots, o => ({\n      name: o,\n      fn: c(r => [w(e.$slots, o, g(I({ ...r,\n        dropdownToggle: e.dropdownToggle,\n        showDropdown: e.showDropdown,\n        hideDropdown: e.hideDropdown,\n        isOpen: e.isOpenSync,\n        focus: e.focus\n      })))])\n    }))]), 1040, [\"modelValue\", \"readonly\", \"error\", \"error-messages\", \"required-mark\", \"onUpdate:modelValue\"])]),\n    default: c(() => [m(S, {\n      \"no-padding\": \"\",\n      onKeydown: o[5] || (o[5] = u(d(o => e.hideDropdown(), [\"prevent\"]), [\"esc\"]))\n    }, {\n      default: c(() => [m(C, v({\n        ref: \"timePicker\"\n      }, e.timePickerProps, {\n        modelValue: e.modelValueSync,\n        \"onUpdate:modelValue\": o[4] || (o[4] = o => e.modelValueSync = o)\n      }), null, 16, [\"modelValue\"])]),\n      _: 1\n    })]),\n    _: 3\n  }, 8, [\"class\", \"style\", \"modelValue\", \"disabled\", \"onClick\"]);\n}, U.__file = \"src/components/va-time-input/VaTimeInput.vue\";\nconst L = e(U);\nexport { L as VaTimeInput };","map":{"version":3,"mappings":"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","names":["defaultParseDateFunction","text","d","Date","h","m","s","match","map","Number","period","toLowerCase","is12format","isPM","fh","setHours","Math","min","setMinutes","setSeconds","useTimeParser","props","isValid","ref","parseDate","result","parse","value","slotsSelectors","defineComponent","name","components","VaDropdown","VaDropdownContent","VaTimePicker","VaIcon","VaInput","emits","useValidationEmits","useClearableEmits","extractComponentProps","useValidationProps","useClearableProps","isOpen","type","Boolean","default","undefined","modelValue","clearValue","String","format","Function","manualInput","leftIcon","icon","inheritAttrs","setup","emit","attrs","slots","input","timePicker","clearIconId","generateUniqueId","componentIconId","isOpenSync","useSyncProp","modelValueSync","formatDate","date","ampm","toLocaleTimeString","sliceTime","time","start","end","split","slice","join","view","valueText","computed","timePickerProps","filterComponentProps","computedInputProps","computedInputAttrs","ariaLabel","label","omit","filterSlots","slotsWithIcons","clearable","Object","keys","filter","slot","includes","reset","focus","isFocused","computedError","computedErrorMessages","useValidation","hasError","canBeCleared","clearIconProps","useClearable","iconProps","color","size","watch","hideDropdown","showDropdown","disabled","readonly","dropdownToggle","onInputTextChanged","val","v","onValueInput","handleComponentClick","e","id","target","some","selector","closest","methods","this","blur","_createBlock","class","_ctx","style","offset","position","anchorSelector","stateful","trigger","onKeydown","onClick","anchor","_mergeProps","error","requiredMark","onChange","$event","prependInner","_renderSlot","slotScope","_createVNode","VaTimeInput","withConfigTransport","Component"],"sources":["../../src/components/va-time-input/hooks/time-text-parser.ts","../../src/components/va-time-input/VaTimeInput.vue","../../src/components/va-time-input/hooks/time-text-formatter.ts","../../src/components/va-time-input/VaTimeInput.vue?vue&type=template&id=64bfaeaf&lang.js","../../src/components/va-time-input/index.ts"],"sourcesContent":["import { Ref, ref } from 'vue'\n\nconst parse = (text: string) => {\n  const m = text.match(/[0-9]{1,2}/g)\n\n  if (!m) { return [] }\n\n  return m.map((s) => Number(s))\n}\n\nconst parsePeriod = (text: string) => {\n  const m = text.match(/pm|am/i)\n\n  if (!m) { return null }\n\n  return Number(m[0].toLowerCase() === 'pm')\n}\n\nconst defaultParseDateFunction = (text: string) => {\n  const d = new Date()\n\n  const [h, m, s] = parse(text)\n  const period = parsePeriod(text)\n\n  if (!h) { return null }\n\n  const is12format = period !== null && h <= 12\n  const isPM = is12format && !!period\n  // Switch 12 to 0, because of 12h format\n  const fh = is12format ? (h === 12 ? 0 : h) : h\n\n  d.setHours(Math.min((fh || 0), is12format ? 12 : 24) + (isPM ? 12 : 0))\n  d.setMinutes(Math.min(m || 0, 60))\n  d.setSeconds(Math.min(s || 0, 60))\n\n  return d\n}\n\nexport const useTimeParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => Date,\n}) => {\n  // const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  // const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parse || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (!result) { isValid.value = false }\n\n    return result\n  }\n\n  const parse = (text: string) => {\n    isValid.value = true\n\n    // if (props.parse) {\n    //   return props.parse(text, isValid)\n    // }\n\n    // if (isTextIsMultipleDates(text)) {\n    //   return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    // }\n\n    // if (isTextIsDateRange(text)) {\n    //   const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n    //   return { start, end }\n    // }\n\n    return parseDate(text)\n  }\n\n  return {\n    parse,\n    isValid,\n  }\n}\n","<template>\n  <va-dropdown\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-model=\"isOpenSync\"\n    :offset=\"[0, 1]\"\n    :close-on-content-click=\"false\"\n    :disabled=\"$props.disabled\"\n    position=\"bottom-start\"\n    anchorSelector=\".va-input__container\"\n    :stateful=\"false\"\n    trigger=\"none\"\n    @keydown.up.prevent=\"showDropdown()\"\n    @keydown.down.prevent=\"showDropdown()\"\n    @keydown.space.prevent=\"showDropdown()\"\n    @click=\"handleComponentClick\"\n  >\n    <template #anchor>\n      <va-input\n        ref=\"input\"\n        v-bind=\"{ ...computedInputProps, ...computedInputAttrs }\"\n        :modelValue=\"valueText\"\n        :readonly=\"$props.readonly || !$props.manualInput\"\n        :error=\"hasError\"\n        :error-messages=\"computedErrorMessages\"\n        :required-mark=\"$props.requiredMark\"\n        @change=\"onInputTextChanged($event.target.value)\"\n        @update:modelValue=\"onValueInput\"\n      >\n        <template\n          v-for=\"name in filterSlots\"\n          v-slot:[name]=\"slotScope\"\n          :key=\"name\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-if=\"$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            :id=\"clearIconId\"\n            v-if=\"canBeCleared\"\n            v-bind=\"clearIconProps\"\n            @click=\"reset()\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-else-if=\"!$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n      </va-input>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown()\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, watch, ref } from 'vue'\nimport omit from 'lodash/omit'\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport VaInput from '../va-input/VaInput.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaDropdown from '../va-dropdown/VaDropdown.vue'\nimport VaDropdownContent from '../va-dropdown/VaDropdownContent/VaDropdownContent.vue'\nimport { useSyncProp } from '../../composables/useSyncProp'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport { generateUniqueId } from '../../services/utils'\n\nconst slotsSelectors = [\n  '.va-input-wrapper__prepend-inner',\n  '.va-input__prepend-inner',\n  '.va-input__append-inner',\n  '.va-input-wrapper__append-inner',\n]\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInput },\n\n  emits: [...useValidationEmits, ...useClearableEmits, 'update:modelValue', 'update:isOpen'],\n\n  props: {\n    ...extractComponentProps(VaTimePicker),\n    ...extractComponentProps(VaInput),\n\n    ...useValidationProps,\n    ...useClearableProps,\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: String, default: undefined },\n\n    format: { type: Function as PropType<(date: Date) => string> },\n\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = ref<InstanceType<typeof VaInput> | undefined>()\n    const timePicker = ref<InstanceType<typeof VaTimePicker> | undefined>()\n    const clearIconId = generateUniqueId()\n    const componentIconId = generateUniqueId()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string | undefined>(() => {\n      if (!isValid.value) { return props.clearValue }\n      if (!modelValueSync.value) { return props.clearValue }\n\n      if (props.format) { return props.format(modelValueSync.value) }\n\n      return format(modelValueSync.value)\n    })\n\n    const timePickerProps = filterComponentProps(props, extractComponentProps(VaTimePicker))\n\n    const computedInputProps = filterComponentProps(\n      props,\n      extractComponentProps(VaInput, ['rules', 'error', 'errorMessages', 'clearable']),\n    )\n\n    const computedInputAttrs = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const onInputTextChanged = (val: string) => {\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      }\n    }\n\n    const changePeriod = (isPM: boolean) => {\n      if (!modelValueSync.value) { return }\n\n      const halfDayPeriod = 12\n      const h = modelValueSync.value.getHours()\n\n      if (isPM && h <= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n      } else if (!isPM && h >= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n      }\n    }\n\n    const changePeriodToPm = () => changePeriod(true)\n    const changePeriodToAm = () => changePeriod(false)\n\n    const reset = (): void => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    // Will be used later, after fix 'withConfigTransport'\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const onValueInput = (val: string) => {\n      !val && reset()\n    }\n\n    const {\n      isFocused,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueText.value !== props.clearValue) || computedError.value)\n\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueText, isFocused, hasError)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n    }))\n\n    watch(modelValueSync, () => {\n      isValid.value = true\n    })\n\n    const hideDropdown = () => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n      isOpenSync.value = true\n    }\n\n    const dropdownToggle = () => {\n      isOpenSync.value ? hideDropdown() : showDropdown()\n    }\n\n    // we use the global handler to prevent the toggle dropdown on any click and execute additional logic\n    // we don't want to use `event.stopPropagation()` on clicks because it breaks closing the dropdown\n    const handleComponentClick = (e: any) => {\n      const id: string | undefined = e.target?.id\n\n      // (here and below) we have to use `id` instead of `ref`\n      // because the icon disappears after the click and `ref` becomes `null`\n      if (id === clearIconId) {\n        return focus()\n      }\n\n      if (id === componentIconId) {\n        return timePicker.value?.focus()\n      }\n\n      // here we check that the slots have been clicked and prevent the dropdown from opening\n      // the user decides to open or hide the dropdown itself\n      const isClickInSlot = slotsSelectors.some(selector => !!e.target?.closest(selector))\n      if (isClickInSlot) {\n        return\n      }\n\n      if (props.manualInput) {\n        return isOpenSync.value && hideDropdown()\n      }\n\n      dropdownToggle()\n    }\n\n    return {\n      input,\n      timePicker,\n      clearIconId,\n      componentIconId,\n\n      timePickerProps,\n      computedInputProps,\n      computedInputAttrs,\n      isOpenSync,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      reset,\n      onValueInput,\n      canBeCleared,\n      iconProps,\n      clearIconProps,\n      filterSlots,\n\n      hideDropdown,\n      showDropdown,\n      dropdownToggle,\n\n      computedError,\n      computedErrorMessages,\n      hasError,\n\n      handleComponentClick,\n\n      // Will be used later, after fix 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { (this as any).input?.focus() },\n    blur () { (this as any).input?.blur() },\n  },\n})\n</script>\n","export const useTimeFormatter = (props: {\n  ampm?: boolean,\n  view?: 'hours' | 'minutes' | 'seconds'\n}) => {\n  const formatDate = (date: Date) => {\n    if (!date) { return '' }\n\n    if (props.ampm) {\n      return date.toLocaleTimeString('en-US')\n    }\n\n    return date.toLocaleTimeString('en-GB')\n  }\n\n  const sliceTime = (time: string, start: number, end: number) => time.split(':').slice(start, end).join(':')\n\n  const formatWithView = (date: Date) => {\n    if (props.view === 'seconds') {\n      return formatDate(date)\n    }\n\n    const [time, period] = formatDate(date).split(' ')\n\n    if (props.view === 'minutes') {\n      if (!period) { return sliceTime(time, 0, 2) }\n\n      return [sliceTime(time, 0, 2), period].join(' ')\n    }\n\n    if (props.view === 'hours') {\n      if (!period) { return sliceTime(time, 0, 1) }\n\n      return [sliceTime(time, 0, 1), period].join(' ')\n    }\n\n    return ''\n  }\n\n  return {\n    format: formatWithView,\n  }\n}\n","<template>\n  <va-dropdown\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-model=\"isOpenSync\"\n    :offset=\"[0, 1]\"\n    :close-on-content-click=\"false\"\n    :disabled=\"$props.disabled\"\n    position=\"bottom-start\"\n    anchorSelector=\".va-input__container\"\n    :stateful=\"false\"\n    trigger=\"none\"\n    @keydown.up.prevent=\"showDropdown()\"\n    @keydown.down.prevent=\"showDropdown()\"\n    @keydown.space.prevent=\"showDropdown()\"\n    @click=\"handleComponentClick\"\n  >\n    <template #anchor>\n      <va-input\n        ref=\"input\"\n        v-bind=\"{ ...computedInputProps, ...computedInputAttrs }\"\n        :modelValue=\"valueText\"\n        :readonly=\"$props.readonly || !$props.manualInput\"\n        :error=\"hasError\"\n        :error-messages=\"computedErrorMessages\"\n        :required-mark=\"$props.requiredMark\"\n        @change=\"onInputTextChanged($event.target.value)\"\n        @update:modelValue=\"onValueInput\"\n      >\n        <template\n          v-for=\"name in filterSlots\"\n          v-slot:[name]=\"slotScope\"\n          :key=\"name\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-if=\"$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            :id=\"clearIconId\"\n            v-if=\"canBeCleared\"\n            v-bind=\"clearIconProps\"\n            @click=\"reset()\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-else-if=\"!$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n      </va-input>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown()\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, watch, ref } from 'vue'\nimport omit from 'lodash/omit'\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport VaInput from '../va-input/VaInput.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaDropdown from '../va-dropdown/VaDropdown.vue'\nimport VaDropdownContent from '../va-dropdown/VaDropdownContent/VaDropdownContent.vue'\nimport { useSyncProp } from '../../composables/useSyncProp'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport { generateUniqueId } from '../../services/utils'\n\nconst slotsSelectors = [\n  '.va-input-wrapper__prepend-inner',\n  '.va-input__prepend-inner',\n  '.va-input__append-inner',\n  '.va-input-wrapper__append-inner',\n]\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInput },\n\n  emits: [...useValidationEmits, ...useClearableEmits, 'update:modelValue', 'update:isOpen'],\n\n  props: {\n    ...extractComponentProps(VaTimePicker),\n    ...extractComponentProps(VaInput),\n\n    ...useValidationProps,\n    ...useClearableProps,\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: String, default: undefined },\n\n    format: { type: Function as PropType<(date: Date) => string> },\n\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = ref<InstanceType<typeof VaInput> | undefined>()\n    const timePicker = ref<InstanceType<typeof VaTimePicker> | undefined>()\n    const clearIconId = generateUniqueId()\n    const componentIconId = generateUniqueId()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string | undefined>(() => {\n      if (!isValid.value) { return props.clearValue }\n      if (!modelValueSync.value) { return props.clearValue }\n\n      if (props.format) { return props.format(modelValueSync.value) }\n\n      return format(modelValueSync.value)\n    })\n\n    const timePickerProps = filterComponentProps(props, extractComponentProps(VaTimePicker))\n\n    const computedInputProps = filterComponentProps(\n      props,\n      extractComponentProps(VaInput, ['rules', 'error', 'errorMessages', 'clearable']),\n    )\n\n    const computedInputAttrs = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const onInputTextChanged = (val: string) => {\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      }\n    }\n\n    const changePeriod = (isPM: boolean) => {\n      if (!modelValueSync.value) { return }\n\n      const halfDayPeriod = 12\n      const h = modelValueSync.value.getHours()\n\n      if (isPM && h <= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n      } else if (!isPM && h >= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n      }\n    }\n\n    const changePeriodToPm = () => changePeriod(true)\n    const changePeriodToAm = () => changePeriod(false)\n\n    const reset = (): void => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    // Will be used later, after fix 'withConfigTransport'\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const onValueInput = (val: string) => {\n      !val && reset()\n    }\n\n    const {\n      isFocused,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueText.value !== props.clearValue) || computedError.value)\n\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueText, isFocused, hasError)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n    }))\n\n    watch(modelValueSync, () => {\n      isValid.value = true\n    })\n\n    const hideDropdown = () => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n      isOpenSync.value = true\n    }\n\n    const dropdownToggle = () => {\n      isOpenSync.value ? hideDropdown() : showDropdown()\n    }\n\n    // we use the global handler to prevent the toggle dropdown on any click and execute additional logic\n    // we don't want to use `event.stopPropagation()` on clicks because it breaks closing the dropdown\n    const handleComponentClick = (e: any) => {\n      const id: string | undefined = e.target?.id\n\n      // (here and below) we have to use `id` instead of `ref`\n      // because the icon disappears after the click and `ref` becomes `null`\n      if (id === clearIconId) {\n        return focus()\n      }\n\n      if (id === componentIconId) {\n        return timePicker.value?.focus()\n      }\n\n      // here we check that the slots have been clicked and prevent the dropdown from opening\n      // the user decides to open or hide the dropdown itself\n      const isClickInSlot = slotsSelectors.some(selector => !!e.target?.closest(selector))\n      if (isClickInSlot) {\n        return\n      }\n\n      if (props.manualInput) {\n        return isOpenSync.value && hideDropdown()\n      }\n\n      dropdownToggle()\n    }\n\n    return {\n      input,\n      timePicker,\n      clearIconId,\n      componentIconId,\n\n      timePickerProps,\n      computedInputProps,\n      computedInputAttrs,\n      isOpenSync,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      reset,\n      onValueInput,\n      canBeCleared,\n      iconProps,\n      clearIconProps,\n      filterSlots,\n\n      hideDropdown,\n      showDropdown,\n      dropdownToggle,\n\n      computedError,\n      computedErrorMessages,\n      hasError,\n\n      handleComponentClick,\n\n      // Will be used later, after fix 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { (this as any).input?.focus() },\n    blur () { (this as any).input?.blur() },\n  },\n})\n</script>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport Component from './VaTimeInput.vue'\nexport const VaTimeInput = withConfigTransport(Component) as typeof Component\n"]},"metadata":{},"sourceType":"module"}