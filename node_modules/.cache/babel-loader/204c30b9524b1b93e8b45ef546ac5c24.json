{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { w as t } from \"./withConfigTransport.js\";\nimport { defineComponent as o, computed as e, resolveComponent as l, openBlock as a, createElementBlock as r, createVNode as n, withCtx as u, Fragment as i, renderList as s, createBlock as d, mergeProps as p, createTextVNode as m, toDisplayString as g } from \"vue\";\nimport { u as f, b as c, e as v } from \"./color-config.js\";\nimport C from \"./index8.js\";\nimport b from \"./index10.js\";\nimport { s as j } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"colortranslator\";\nimport \"./useColor.js\";\nimport \"./useRouterLink.js\";\nimport \"./useSize.js\";\nimport \"./useLoading.js\";\nimport \"./index28.js\";\nimport \"./VaIcon.js\";\nimport \"./flatten.js\";\nimport \"./index39.js\";\nimport \"./clamp.js\";\nimport \"./toNumber.js\";\nvar B = o({\n  name: \"VaButtonToggle\",\n  components: {\n    VaButtonGroup: b,\n    VaButton: C\n  },\n  emits: [\"update:modelValue\"],\n  props: {\n    options: {\n      type: Array,\n      default: () => []\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    },\n    activeButtonTextColor: {\n      type: String,\n      default: \"var(--va-white)\"\n    },\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    outline: {\n      type: Boolean,\n      default: !1\n    },\n    flat: {\n      type: Boolean,\n      default: !1\n    },\n    rounded: {\n      type: Boolean,\n      default: !0\n    },\n    disabled: {\n      type: Boolean,\n      default: !1\n    },\n    size: {\n      type: String,\n      default: \"medium\",\n      validator: t => [\"medium\", \"small\", \"large\"].includes(t)\n    },\n    toggleColor: {\n      type: String,\n      default: \"\"\n    },\n    gradient: {\n      type: Boolean,\n      default: !1\n    }\n  },\n\n  setup(t, {\n    emit: o\n  }) {\n    const {\n      getColor: l\n    } = f(),\n          a = e(() => l(t.color)),\n          r = e(() => l(t.toggleColor));\n    return {\n      getButtonProps: o => {\n        if (o === t.modelValue) return t.outline || t.flat ? {\n          textColor: t.activeButtonTextColor,\n          color: t.toggleColor ? r.value : a.value,\n          outline: !1,\n          flat: !1\n        } : {\n          textColor: t.activeButtonTextColor ? t.activeButtonTextColor : c(a.value),\n          color: t.toggleColor ? r.value : v(a.value, {\n            l: -6\n          })\n        };\n      },\n      getButtonClass: o => ({\n        \"va-button--active\": o === t.modelValue\n      }),\n      changeValue: t => o(\"update:modelValue\", t)\n    };\n  }\n\n});\nconst x = {\n  class: \"va-button-toggle\"\n};\nj(\".va-button-toggle .va-button:focus,.va-button-toggle .va-button:hover{box-shadow:none!important}\"), B.render = function render(t, o, e, f, c, v) {\n  const C = l(\"va-button\"),\n        b = l(\"va-button-group\");\n  return a(), r(\"div\", x, [n(b, {\n    color: t.color,\n    textColor: t.textColor,\n    rounded: t.rounded,\n    outline: t.outline,\n    flat: t.flat,\n    gradient: t.gradient\n  }, {\n    default: u(() => [(a(!0), r(i, null, s(t.options, o => (a(), d(C, p(t.getButtonProps(o.value), {\n      key: o.value,\n      disabled: t.disabled,\n      size: t.size,\n      class: t.getButtonClass(o.value),\n      onClick: e => t.changeValue(o.value)\n    }), {\n      default: u(() => [m(g(o.label), 1)]),\n      _: 2\n    }, 1040, [\"disabled\", \"size\", \"class\", \"onClick\"]))), 128))]),\n    _: 1\n  }, 8, [\"color\", \"textColor\", \"rounded\", \"outline\", \"flat\", \"gradient\"])]);\n}, B.__file = \"src/components/va-button-toggle/VaButtonToggle.vue\";\nvar y = t(B);\nexport { y as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","components","VaButtonGroup","VaButton","emits","props","options","type","Array","default","color","String","textColor","undefined","activeButtonTextColor","modelValue","Number","outline","Boolean","flat","rounded","disabled","size","validator","includes","toggleColor","gradient","setup","emit","getColor","useColors","colorComputed","computed","toggleColorComputed","getButtonProps","buttonValue","value","getTextColor","shiftHSLAColor","l","getButtonClass","changeValue","class","j","_createElementBlock","_createVNode","_ctx","option","_createBlock","_mergeProps","key","onClick","label","_hoisted_1","withConfigTransport","VaButtonToggle"],"sources":["../../src/components/va-button-toggle/VaButtonToggle.vue","../../src/components/va-button-toggle/VaButtonToggle.vue?vue&type=template&id=39f0c05a&lang.js","../../src/components/va-button-toggle/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        v-bind=\"getButtonProps(option.value)\"\n        :key=\"option.value\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        :class=\"getButtonClass(option.value)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { getTextColor, shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport VaButton from '../va-button'\nimport VaButtonGroup from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: { type: Array as PropType<any[]>, default: () => [] },\n    color: { type: String as PropType<string>, default: 'primary' },\n    textColor: { type: String as PropType<string>, default: undefined },\n    activeButtonTextColor: { type: String as PropType<string>, default: 'var(--va-white)' },\n    modelValue: { type: [String, Number] as PropType<string | number>, default: '' },\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    rounded: { type: Boolean as PropType<boolean>, default: true },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    size: {\n      type: String as PropType<string>,\n      default: 'medium',\n      validator: (modelValue: 'medium' | 'small' | 'large') => ['medium', 'small', 'large'].includes(modelValue),\n    },\n\n    toggleColor: { type: String as PropType<string>, default: '' },\n    gradient: { type: Boolean as PropType<boolean>, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleColorComputed = computed(() => getColor(props.toggleColor))\n\n    const getButtonProps = (buttonValue: any) => {\n      if (buttonValue !== props.modelValue) { return }\n\n      if (props.outline || props.flat) {\n        return {\n          textColor: props.activeButtonTextColor,\n          color: props.toggleColor ? toggleColorComputed.value : colorComputed.value,\n          outline: false,\n          flat: false,\n        }\n      }\n\n      return {\n        textColor: props.activeButtonTextColor ? props.activeButtonTextColor : getTextColor(colorComputed.value),\n        color: props.toggleColor ? toggleColorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': buttonValue === props.modelValue })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        v-bind=\"getButtonProps(option.value)\"\n        :key=\"option.value\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        :class=\"getButtonClass(option.value)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { getTextColor, shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport VaButton from '../va-button'\nimport VaButtonGroup from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: { type: Array as PropType<any[]>, default: () => [] },\n    color: { type: String as PropType<string>, default: 'primary' },\n    textColor: { type: String as PropType<string>, default: undefined },\n    activeButtonTextColor: { type: String as PropType<string>, default: 'var(--va-white)' },\n    modelValue: { type: [String, Number] as PropType<string | number>, default: '' },\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    rounded: { type: Boolean as PropType<boolean>, default: true },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    size: {\n      type: String as PropType<string>,\n      default: 'medium',\n      validator: (modelValue: 'medium' | 'small' | 'large') => ['medium', 'small', 'large'].includes(modelValue),\n    },\n\n    toggleColor: { type: String as PropType<string>, default: '' },\n    gradient: { type: Boolean as PropType<boolean>, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleColorComputed = computed(() => getColor(props.toggleColor))\n\n    const getButtonProps = (buttonValue: any) => {\n      if (buttonValue !== props.modelValue) { return }\n\n      if (props.outline || props.flat) {\n        return {\n          textColor: props.activeButtonTextColor,\n          color: props.toggleColor ? toggleColorComputed.value : colorComputed.value,\n          outline: false,\n          flat: false,\n        }\n      }\n\n      return {\n        textColor: props.activeButtonTextColor ? props.activeButtonTextColor : getTextColor(colorComputed.value),\n        color: props.toggleColor ? toggleColorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': buttonValue === props.modelValue })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaButtonToggle from './VaButtonToggle.vue'\n\nexport default withConfigTransport(VaButtonToggle)\n"]},"metadata":{},"sourceType":"module"}