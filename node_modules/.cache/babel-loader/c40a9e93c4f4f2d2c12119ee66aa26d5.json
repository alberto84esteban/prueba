{"ast":null,"code":"import { w as a } from \"./withConfigTransport.js\";\nimport { defineComponent as t, computed as r, resolveComponent as e, openBlock as i, createElementBlock as o, normalizeStyle as n, renderSlot as l, createBlock as v, createCommentVNode as s } from \"vue\";\nimport { u as m } from \"./color-config.js\";\nimport { u, a as p } from \"./useSize.js\";\nimport { u as c } from \"./useLoading.js\";\nimport d from \"./index28.js\";\nimport { VaProgressCircle as f } from \"./index39.js\";\nimport { s as g } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"colortranslator\";\nimport \"./VaIcon.js\";\nimport \"./flatten.js\";\nimport \"./clamp.js\";\nimport \"./toNumber.js\";\nvar y = t({\n  name: \"VaAvatar\",\n  components: {\n    VaIcon: d,\n    VaProgressCircle: f\n  },\n  props: { ...c,\n    ...u,\n    color: {\n      type: String,\n      default: \"info\"\n    },\n    textColor: {\n      type: String,\n      default: \"var(--va-white)\"\n    },\n    square: {\n      type: Boolean,\n      default: !1\n    },\n    icon: {\n      type: String,\n      default: \"\"\n    },\n    src: {\n      type: String,\n      default: null\n    },\n    fontSize: {\n      type: String,\n      default: \"\"\n    }\n  },\n\n  setup(a) {\n    const {\n      getColor: t\n    } = m(),\n          e = r(() => t(a.color)),\n          {\n      sizeComputed: i,\n      fontSizeComputed: o\n    } = p(a, \"VaAvatar\"),\n          n = r(() => ({\n      color: t(a.textColor, \"var(--va-white)\"),\n      backgroundColor: a.loading ? \"transparent\" : e.value,\n      borderRadius: a.square ? 0 : \"\",\n      fontSize: a.fontSize || o.value,\n      width: i.value,\n      minWidth: i.value,\n      height: i.value\n    }));\n    return {\n      sizeComputed: i,\n      computedStyle: n,\n      colorComputed: e\n    };\n  }\n\n});\nconst h = [\"src\"];\ng(\":root{--va-avatar-display:inline-flex;--va-avatar-align-items:center;--va-avatar-justify-content:center;--va-avatar-text-align:center;--va-avatar-vertical-align:middle;--va-avatar-position:relative;--va-avatar-line-height:normal;--va-avatar-border-radius:50%}.va-avatar{align-items:var(--va-avatar-align-items);border-radius:var(--va-avatar-border-radius);display:var(--va-avatar-display);font-family:var(--va-font-family);justify-content:var(--va-avatar-justify-content);line-height:var(--va-avatar-line-height);position:var(--va-avatar-position);text-align:var(--va-avatar-text-align);vertical-align:var(--va-avatar-vertical-align)}.va-avatar img,.va-avatar svg{border-radius:inherit;display:inline-flex;height:inherit;margin:auto;width:inherit}\"), y.render = function render(a, t, r, m, u, p) {\n  const c = e(\"va-progress-circle\"),\n        d = e(\"va-icon\");\n  return i(), o(\"div\", {\n    class: \"va-avatar\",\n    style: n(a.computedStyle)\n  }, [l(a.$slots, \"default\", {}, () => [a.$props.loading ? (i(), v(c, {\n    key: 0,\n    size: a.sizeComputed,\n    color: a.colorComputed,\n    indeterminate: \"\"\n  }, null, 8, [\"size\", \"color\"])) : a.src ? (i(), o(\"img\", {\n    key: 1,\n    src: a.src\n  }, null, 8, h)) : a.icon ? (i(), v(d, {\n    key: 2,\n    name: a.icon\n  }, null, 8, [\"name\"])) : s(\"v-if\", !0)])], 4);\n}, y.__file = \"src/components/va-avatar/VaAvatar.vue\";\nvar j = a(y);\nexport { j as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAkCA,QAAeA,EAAgB;AAC7BC,QAAM,UADuB;AAE7BC,cAAY;AAAEC,aAAF;AAAUC;AAAV,GAFiB;AAG7BC,SAAO,KACFC,CADE;AACFA,OACAC,CAFE;AAGLC,WAAO;AAAEC,YAAMC,MAAR;AAAoCC,eAAS;AAA7C,KAHF;AAILC,eAAW;AAAEH,YAAMC,MAAR;AAAoCC,eAAS;AAA7C,KAJN;AAKLE,YAAQ;AAAEJ,YAAMK,OAAR;AAAsCH,gBAAS;AAA/C,KALH;AAMLI,UAAM;AAAEN,YAAMC,MAAR;AAAoCC,eAAS;AAA7C,KAND;AAOLK,SAAK;AAAEP,YAAMC,MAAR;AAAoCC,eAAS;AAA7C,KAPA;AAQLM,cAAU;AAAER,YAAMC,MAAR;AAAoCC,eAAS;AAA7C;AARL,GAHsB;;AAa7BO,QAAOb,CAAPa,EAAOb;AACL;AAAMc,gBAAEA;AAAR,QAAqBC,GAArB;AAAA,UACMC,IAAgBC,EAAS,MAAMH,EAASd,EAAMG,KAAfW,CAAfG,CADtB;AAAA,UACoDd;AAC9Ce,oBAAEA,CAD4Cf;AAChCgB,wBAAEA;AAD8BhB,QACTiB,EAAQpB,CAARoB,EAAe,UAAfA,CAF3C;AAAA,UAIMC,IAAgBJ,EAAS;AAC7Bd,aAAOW,EAASd,EAAMO,SAAfO,EAA0B,iBAA1BA,CADsB;AAE7BQ,uBAAiBtB,EAAMuB,OAANvB,GAAgB,aAAhBA,GAAgCgB,EAAcQ,KAFlC;AAG7BC,oBAAczB,EAAMQ,MAANR,GAAe,CAAfA,GAAmB,EAHJ;AAI7BY,gBAAUZ,EAAMY,QAANZ,IAAkBmB,EAAiBK,KAJhB;AAK7BE,aAAOR,EAAaM,KALS;AAM7BG,gBAAUT,EAAaM,KANM;AAO7BI,cAAQV,EAAaM;AAPQ,MAATP,CAJtB;AAcA,WAAO;AACLC,qBADK;AAELG,sBAFK;AAGLL;AAHK,KAAP;AAGEA;;AA/ByB,CAAhBrB,CAAf;AA+BMqB;AAAAA;AAAAA;AAAAA;AAAAA,cChEJa;AACEC,WAAM,WADRD;AAEGE,aAAOC,eAAPD;AAFHF,KAEUG,CAERC,kCAEUD,SAAcT,OAAdS,IAAcE,KADtBC;AAAAA;AAEGC,UAAMJ,cAFTG;AAGGhC,WAAO6B,eAHVG;AAIEE;AAJFF,KAIE,IAJFA,EAIE,CAJFA,EAIE,iBAJFA,CACQH,IAMKA,EAAGrB,GAAHqB,IAAGE,KADhBL;AAAAA;AAEGlB,SAAKqB;AAFRH,KAEQG,IAFRH,EAEQG,CAFRH,EAEQG,CAFRH,CACaG,IAIAA,EAAItB,IAAJsB,IAAIE,KADjBC;AAAAA;AAEGvC,UAAMoC;AAFTG,KAESH,IAFTG,EAESH,CAFTG,EAESH,QAFTG,CACaH,IACJA,aAbX,EAFQA,CAFVH,EAiBaG,CAjBbH,CDgEIb;AC/CSgB,CD+CThB,EC/CSgB,kDD+CThB;AE9DN,QAAesB,EAAoBC,CAApBD,CAAf;AAAmCC","names":["defineComponent","name","components","VaIcon","VaProgressCircle","props","useLoadingProps","useSizeProps","color","type","String","default","textColor","square","Boolean","icon","src","fontSize","setup","getColor","useColors","colorComputed","computed","sizeComputed","fontSizeComputed","useSize","computedStyle","backgroundColor","loading","value","borderRadius","width","minWidth","height","_createElementBlock","class","style","_ctx","_renderSlot","i","_createBlock","size","indeterminate","withConfigTransport","VaAvatar"],"sources":["../../src/components/va-avatar/VaAvatar.vue","../../src/components/va-avatar/VaAvatar.vue?vue&type=template&id=98de6a30&lang.js","../../src/components/va-avatar/index.ts"],"sourcesContent":["<template>\n  <div\n    class=\"va-avatar\"\n    :style=\"computedStyle\"\n  >\n    <slot>\n      <va-progress-circle\n        v-if=\"$props.loading\"\n        :size=\"sizeComputed\"\n        :color=\"colorComputed\"\n        indeterminate\n      />\n      <img\n        v-else-if=\"src\"\n        :src=\"src\"\n      >\n      <va-icon\n        v-else-if=\"icon\"\n        :name=\"icon\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { useColors } from '../../composables/useColor'\nimport { useSize, useSizeProps } from '../../composables/useSize'\nimport { useLoadingProps } from '../../composables/useLoading'\n\nimport VaIcon from '../va-icon'\nimport { VaProgressCircle } from '../va-progress-circle'\n\nexport default defineComponent({\n  name: 'VaAvatar',\n  components: { VaIcon, VaProgressCircle },\n  props: {\n    ...useLoadingProps,\n    ...useSizeProps,\n    color: { type: String as PropType<string>, default: 'info' },\n    textColor: { type: String as PropType<string>, default: 'var(--va-white)' },\n    square: { type: Boolean as PropType<boolean>, default: false },\n    icon: { type: String as PropType<string>, default: '' },\n    src: { type: String as PropType<string>, default: null },\n    fontSize: { type: String as PropType<string>, default: '' },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatar')\n\n    const computedStyle = computed(() => ({\n      color: getColor(props.textColor, 'var(--va-white)'),\n      backgroundColor: props.loading ? 'transparent' : colorComputed.value,\n      borderRadius: props.square ? 0 : '',\n      fontSize: props.fontSize || fontSizeComputed.value,\n      width: sizeComputed.value,\n      minWidth: sizeComputed.value, // We only define width because common use case would be flex row, for column we expect user to set appropriate styling externally.\n      height: sizeComputed.value,\n    }))\n\n    return {\n      sizeComputed,\n      computedStyle,\n      colorComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-avatar {\n  align-items: var(--va-avatar-align-items);\n  display: var(--va-avatar-display);\n  justify-content: var(--va-avatar-justify-content);\n  line-height: var(--va-avatar-line-height);\n  position: var(--va-avatar-position);\n  text-align: var(--va-avatar-text-align);\n  vertical-align: var(--va-avatar-vertical-align);\n  border-radius: var(--va-avatar-border-radius);\n  font-family: var(--va-font-family);\n\n  img,\n  svg {\n    border-radius: inherit;\n    display: inline-flex;\n    height: inherit;\n    width: inherit;\n    margin: auto;\n  }\n}\n</style>\n","<template>\n  <div\n    class=\"va-avatar\"\n    :style=\"computedStyle\"\n  >\n    <slot>\n      <va-progress-circle\n        v-if=\"$props.loading\"\n        :size=\"sizeComputed\"\n        :color=\"colorComputed\"\n        indeterminate\n      />\n      <img\n        v-else-if=\"src\"\n        :src=\"src\"\n      >\n      <va-icon\n        v-else-if=\"icon\"\n        :name=\"icon\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { useColors } from '../../composables/useColor'\nimport { useSize, useSizeProps } from '../../composables/useSize'\nimport { useLoadingProps } from '../../composables/useLoading'\n\nimport VaIcon from '../va-icon'\nimport { VaProgressCircle } from '../va-progress-circle'\n\nexport default defineComponent({\n  name: 'VaAvatar',\n  components: { VaIcon, VaProgressCircle },\n  props: {\n    ...useLoadingProps,\n    ...useSizeProps,\n    color: { type: String as PropType<string>, default: 'info' },\n    textColor: { type: String as PropType<string>, default: 'var(--va-white)' },\n    square: { type: Boolean as PropType<boolean>, default: false },\n    icon: { type: String as PropType<string>, default: '' },\n    src: { type: String as PropType<string>, default: null },\n    fontSize: { type: String as PropType<string>, default: '' },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatar')\n\n    const computedStyle = computed(() => ({\n      color: getColor(props.textColor, 'var(--va-white)'),\n      backgroundColor: props.loading ? 'transparent' : colorComputed.value,\n      borderRadius: props.square ? 0 : '',\n      fontSize: props.fontSize || fontSizeComputed.value,\n      width: sizeComputed.value,\n      minWidth: sizeComputed.value, // We only define width because common use case would be flex row, for column we expect user to set appropriate styling externally.\n      height: sizeComputed.value,\n    }))\n\n    return {\n      sizeComputed,\n      computedStyle,\n      colorComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-avatar {\n  align-items: var(--va-avatar-align-items);\n  display: var(--va-avatar-display);\n  justify-content: var(--va-avatar-justify-content);\n  line-height: var(--va-avatar-line-height);\n  position: var(--va-avatar-position);\n  text-align: var(--va-avatar-text-align);\n  vertical-align: var(--va-avatar-vertical-align);\n  border-radius: var(--va-avatar-border-radius);\n  font-family: var(--va-font-family);\n\n  img,\n  svg {\n    border-radius: inherit;\n    display: inline-flex;\n    height: inherit;\n    width: inherit;\n    margin: auto;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaAvatar from './VaAvatar.vue'\n\nexport default withConfigTransport(VaAvatar)\n"]},"metadata":{},"sourceType":"module"}