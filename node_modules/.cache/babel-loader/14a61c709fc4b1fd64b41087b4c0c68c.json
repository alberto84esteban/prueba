{"ast":null,"code":"import { w as t } from \"./withConfigTransport.js\";\nimport { detect as r } from \"detect-browser\";\nimport a from \"element-resize-detector\";\nimport { openBlock as s, createElementBlock as i, createElementVNode as o, renderSlot as e } from \"vue\";\nimport { s as l } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nconst c = r();\nvar n = {\n  name: \"VaScrollbar\",\n  props: {\n    speed: {\n      type: Number,\n      default: 20\n    }\n  },\n  methods: {\n    calcSize() {\n      this.isDown = this.isUp = !1, this.maxHeight = parseFloat(this.wrapper.offsetHeight, 10), this.contentHeight = parseFloat(this.content.offsetHeight, 10), this.trackHeight = parseFloat(this.track.offsetHeight, 10), this.maxHeight / this.contentHeight * this.trackHeight < 10 ? this.thumb.style.height = \"10px\" : this.thumb.style.height = this.maxHeight / this.contentHeight * this.trackHeight + \"px\", this.maxHeight / this.contentHeight < 1 ? this.thumb.classList.add(\"active\") : this.thumb.classList.remove(\"active\");\n    },\n\n    calcThumb() {\n      const t = \"\" === this.content.style.marginTop ? 0 : parseInt(this.content.style.marginTop, 10);\n      this.thumb.style.top = -t / this.contentHeight * this.trackHeight + \"px\";\n    },\n\n    onContentResize() {\n      const t = this.contentHeight;\n      this.calcSize(), this.calcThumb(), this.content.style.transition = \"margin-top .3s linear\", this.thumb.style.transition = \"top .3s linear\";\n\n      const handler = t => {\n        \"margin-top\" === t.propertyName && (this.content.style.transition = \"\", this.calcSize(), this.calcThumb(), this.content.removeEventListener(\"transitionend\", handler), this.thumb.style.transition = \"\");\n      };\n\n      this.content.addEventListener(\"transitionend\", handler), this.setVertical(this.contentHeight - t);\n    },\n\n    startDrag(t) {\n      this.isDragging = !0, this.prevTouch = t.touches[0];\n    },\n\n    onDrag(t) {\n      if (this.isDragging) {\n        t.preventDefault();\n        const r = t.touches[0],\n              a = this.prevTouch.clientY - r.clientY;\n        this.setVertical(a), this.prevTouch = r;\n      }\n    },\n\n    stopDrag() {\n      this.isDragging = !1;\n    },\n\n    scroll(t) {\n      let r = .01 * t.deltaY * this.speed;\n      \"firefox\" === c.name && (r *= 10), this.setVertical(r), t.preventDefault();\n    },\n\n    setVertical(t) {\n      if (this.isDown && t > 0 || this.isUp && t < 0 || this.contentHeight <= this.maxHeight) return;\n      const r = \"\" === this.content.style.marginTop ? 0 : parseFloat(this.content.style.marginTop, 10);\n      let a = 0;\n      this.maxHeight - (r - t) > this.contentHeight && t > 0 ? (a = this.maxHeight - this.contentHeight, this.isDown = !0) : (this.isDown = !1, r - t > 0 ? (this.isUp = !0, a = 0) : (a = r - t, this.isUp = !1)), this.content.style.marginTop = a + \"px\", this.calcThumb();\n    }\n\n  },\n\n  mounted() {\n    this.track = this.$refs.track, this.thumb = this.$refs.thumb, this.content = this.$refs.scrollbarContent, this.wrapper = this.$refs.scrollbarWrapper, this.calcSize(), this.calcThumb(), a.listenTo(this.content, () => {\n      this.calcSize(), this.calcThumb();\n    });\n  },\n\n  beforeUnmount() {\n    a.removeAllListeners(this.content);\n  },\n\n  data: () => ({\n    wrapper: void 0,\n    maxHeight: void 0,\n    thumb: void 0,\n    track: void 0,\n    trackHeight: void 0,\n    content: void 0,\n    contentHeight: void 0,\n    isDown: !1,\n    isUp: !0,\n    prevTouch: {},\n    isDragging: !1\n  })\n};\nconst h = {\n  class: \"va-scrollbar\",\n  ref: \"vuesticScrollbar\"\n},\n      p = {\n  class: \"scrollbar-wrapper\",\n  ref: \"scrollbarWrapper\"\n},\n      b = {\n  class: \"track\",\n  ref: \"track\"\n},\n      v = {\n  class: \"thumb\",\n  ref: \"thumb\"\n};\nl(\":root{--va-scrollbar-background:transparent;--va-scrollbar-transition:all 0.3s linear;--va-scrollbar-position:relative;--va-scrollbar-wrapper-border-radius:0.375rem;--va-scrollbar-wrapper-box-shadow:0 2px 3px 0 rgba(52,56,85,0.25);--va-scrollbar-wrapper-position:relative;--va-scrollbar-wrapper-overflow:hidden;--va-scrollbar-wrapper-max-height:100%;--va-scrollbar-track-width:5px;--va-scrollbar-track-position:absolute;--va-scrollbar-track-right:0;--va-scrollbar-track-top:0;--va-scrollbar-track-height:100%;--va-scrollbar-thumb-transition:height 0.3s linear,opacity 0.6s linear;--va-scrollbar-thumb-position:absolute;--va-scrollbar-thumb-width:100%;--va-scrollbar-thumb-background-color:#4ae387;--va-scrollbar-thumb-opacity:0}.va-scrollbar{background:var(--va-scrollbar-background);font-family:var(--va-font-family);position:var(--va-scrollbar-position);transition:var(--va-scrollbar-transition)}.va-scrollbar .scrollbar-wrapper{border-radius:var(--va-scrollbar-wrapper-border-radius);box-shadow:var(--va-scrollbar-wrapper-box-shadow);max-height:var(--va-scrollbar-wrapper-max-height);overflow:var(--va-scrollbar-wrapper-overflow);position:var(--va-scrollbar-wrapper-position)}.va-scrollbar .scrollbar-wrapper .track{height:var(--va-scrollbar-wrapper-track-height);position:var(--va-scrollbar-wrapper-track-position);right:var(--va-scrollbar-wrapper-track-right);top:var(--va-scrollbar-wrapper-track-top);width:var(--va-scrollbar-wrapper-track-width)}.va-scrollbar .scrollbar-wrapper .track .thumb{background-color:var(--va-scrollbar-thumb-background-color);opacity:var(--va-scrollbar-thumb-opacity);position:var(--va-scrollbar-thumb-position);transition:var(--va-scrollbar-thumb-transition);width:var(--va-scrollbar-thumb-width)}.va-scrollbar .scrollbar-wrapper .track .thumb.active{opacity:.3}.va-scrollbar:hover .thumb.active{opacity:1!important}\"), n.render = function render(t, r, a, l, c, n) {\n  return s(), i(\"div\", h, [o(\"div\", p, [o(\"div\", {\n    class: \"scrollbar-content\",\n    ref: \"scrollbarContent\",\n    onWheel: r[0] || (r[0] = (...t) => n.scroll && n.scroll(...t)),\n    onTouchstart: r[1] || (r[1] = (...t) => n.startDrag && n.startDrag(...t)),\n    onTouchmove: r[2] || (r[2] = (...t) => n.onDrag && n.onDrag(...t)),\n    onTouchend: r[3] || (r[3] = (...t) => n.stopDrag && n.stopDrag(...t)),\n    onTransitionend: r[4] || (r[4] = (...t) => n.onContentResize && n.onContentResize(...t))\n  }, [e(t.$slots, \"default\")], 544), o(\"div\", b, [o(\"div\", v, null, 512)], 512)], 512)], 512);\n}, n.__file = \"src/components/va-scrollbar/VaScrollbar.vue\";\nvar m = t(n);\nexport { m as default };","map":{"version":3,"mappings":";;;;;;AAqCA,MAAMA,IAAUC,GAAhB;AAEA,QAAe;AACbC,QAAM,aADO;AAEbC,SAAO;AACLC,WAAO;AACLC,YAAMC,MADD;AAELC,eAAS;AAFJ;AADF,GAFM;AAQbC,WAAS;AACPC;AACEC,WAAKC,MAALD,GAAcA,KAAKE,IAALF,GAAKE,CAAO,CAA1BF,EACAA,KAAKG,SAALH,GAAiBI,WAAWJ,KAAKK,OAALL,CAAaM,YAAxBF,EAAsC,EAAtCA,CADjBJ,EAEAA,KAAKO,aAALP,GAAqBI,WAAWJ,KAAKQ,OAALR,CAAaM,YAAxBF,EAAsC,EAAtCA,CAFrBJ,EAGAA,KAAKS,WAALT,GAAmBI,WAAWJ,KAAKU,KAALV,CAAWM,YAAtBF,EAAoC,EAApCA,CAHnBJ,EAKIA,KAAKG,SAALH,GAAiBA,KAAKO,aAAtBP,GAAsCA,KAAKS,WAA3CT,GAAyD,EAAzDA,GACFA,KAAKW,KAALX,CAAWY,KAAXZ,CAAiBa,MAAjBb,GAA0B,MADxBA,GAGFA,KAAKW,KAALX,CAAWY,KAAXZ,CAAiBa,MAAjBb,GAA0BA,KAAKG,SAALH,GAAiBA,KAAKO,aAAtBP,GAAsCA,KAAKS,WAA3CT,GAAyD,IARrFA,EAWIA,KAAKG,SAALH,GAAiBA,KAAKO,aAAtBP,GAAsC,CAAtCA,GACFA,KAAKW,KAALX,CAAWc,SAAXd,CAAqBe,GAArBf,CAAyB,QAAzBA,CADEA,GAGFA,KAAKW,KAALX,CAAWc,SAAXd,CAAqBgB,MAArBhB,CAA4B,QAA5BA,CAdFA;AAc8B,KAhBzB;;AAmBPiB;AACE,YAAMC,IAA6C,OAAjClB,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBmB,SAAc,GAC/C,CAD+C,GAE/CC,SAASpB,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBmB,SAA5BC,EAAuC,EAAvCA,CAFJ;AAGApB,WAAKW,KAALX,CAAWY,KAAXZ,CAAiBqB,GAAjBrB,GAAiBqB,CAAQH,CAARG,GAAoBrB,KAAKO,aAAzBc,GAAyCrB,KAAKS,WAA9CY,GAA6D,IAA9ErB;AAA8E,KAvBzE;;AAyBPsB;AACE,YAAMC,IAAavB,KAAKO,aAAxB;AACAP,WAAKD,QAALC,IACAA,KAAKiB,SAALjB,EADAA,EAGAA,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBwB,UAAnBxB,GAAgC,uBAHhCA,EAIAA,KAAKW,KAALX,CAAWY,KAAXZ,CAAiBwB,UAAjBxB,GAA8B,gBAJ9BA;;AAKA,YAAMyB,UAAWC;AACQ,yBAAnBA,EAAEC,YAAiB,KACrB3B,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBwB,UAAnBxB,GAAgC,EAAhCA,EACAA,KAAKD,QAALC,EADAA,EAEAA,KAAKiB,SAALjB,EAFAA,EAGAA,KAAKQ,OAALR,CAAa4B,mBAAb5B,CAAiC,eAAjCA,EAAkDyB,OAAlDzB,CAHAA,EAIAA,KAAKW,KAALX,CAAWY,KAAXZ,CAAiBwB,UAAjBxB,GAA8B,EALT;AAKS,OANlC;;AASAA,WAAKQ,OAALR,CAAa6B,gBAAb7B,CAA8B,eAA9BA,EAA+CyB,OAA/CzB,GAEAA,KAAK8B,WAAL9B,CAAiBA,KAAKO,aAALP,GAAqBuB,CAAtCvB,CAFAA;AAEsCuB,KA3CjC;;AA6CPQ,cAAWL,CAAXK,EAAWL;AACT1B,WAAKgC,UAALhC,GAAKgC,CAAa,CAAlBhC,EACAA,KAAKiC,SAALjC,GAAiB0B,EAAEQ,OAAFR,CAAU,CAAVA,CADjB1B;AAC2B,KA/CtB;;AAiDPmC,WAAQT,CAARS,EAAQT;AACN,UAAI1B,KAAKgC,UAAT,EAAqB;AACnBN,UAAEU,cAAFV;AACA,cAAMW,IAAQX,EAAEQ,OAAFR,CAAU,CAAVA,CAAd;AAAA,cACMY,IAAQtC,KAAKiC,SAALjC,CAAeuC,OAAfvC,GAAyBqC,EAAME,OAD7C;AAEAvC,aAAK8B,WAAL9B,CAAiBsC,CAAjBtC,GACAA,KAAKiC,SAALjC,GAAiBqC,CADjBrC;AACiBqC;AAAAA,KAvDd;;AA0DPG;AACExC,WAAKgC,UAALhC,GAAKgC,CAAa,CAAlBhC;AAAkB,KA3Db;;AA6DPyC,WAAQf,CAARe,EAAQf;AACN,UAAIY,IAAoB,MAAXZ,EAAEgB,MAAS,GAAO1C,KAAKN,KAApC;AACqB,oBAAjBJ,EAAQE,IAAS,KACnB8C,KAAS,EADU,GAGrBtC,KAAK8B,WAAL9B,CAAiBsC,CAAjBtC,CAHqB,EAIrB0B,EAAEU,cAAFV,EAJqB;AAInBU,KAnEG;;AAqEPN,gBAAaQ,CAAbR,EAAaQ;AACX,UAAKtC,KAAKC,MAALD,IAAesC,IAAQ,CAAvBtC,IAA8BA,KAAKE,IAALF,IAAasC,IAAQ,CAAnDtC,IAA0DA,KAAKO,aAALP,IAAsBA,KAAKG,SAA1F,EACE;AAEF,YAAMe,IAA6C,OAAjClB,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBmB,SAAc,GAC/C,CAD+C,GAE/Cf,WAAWJ,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBmB,SAA9Bf,EAAyC,EAAzCA,CAFJ;AAGA,UAAIuC,IAAS,CAAb;AACI3C,WAAKG,SAALH,IAAkBkB,IAAYoB,CAA9BtC,IAAuCA,KAAKO,aAA5CP,IAA6DsC,IAAQ,CAArEtC,IACF2C,IAAS3C,KAAKG,SAALH,GAAiBA,KAAKO,aAA/BoC,EACA3C,KAAKC,MAALD,GAAKC,CAAS,CAFZD,KAIFA,KAAKC,MAALD,GAAKC,CAAS,CAAdD,EACIkB,IAAYoB,CAAZpB,GAAoB,CAApBA,IACFlB,KAAKE,IAALF,GAAKE,CAAO,CAAZF,EACA2C,IAAS,CAFPzB,KAIFyB,IAASzB,IAAYoB,CAArBK,EACA3C,KAAKE,IAALF,GAAKE,CAAO,CALVgB,CALFlB,GAcJA,KAAKQ,OAALR,CAAaY,KAAbZ,CAAmBmB,SAAnBnB,GAA+B2C,IAAS,IAdpC3C,EAeJA,KAAKiB,SAALjB,EAfIA;AAeCiB;;AA5FA,GARI;;AAuGb2B;AACE5C,SAAKU,KAALV,GAAaA,KAAK6C,KAAL7C,CAAWU,KAAxBV,EACAA,KAAKW,KAALX,GAAaA,KAAK6C,KAAL7C,CAAWW,KADxBX,EAEAA,KAAKQ,OAALR,GAAeA,KAAK6C,KAAL7C,CAAW8C,gBAF1B9C,EAGAA,KAAKK,OAALL,GAAeA,KAAK6C,KAAL7C,CAAW+C,gBAH1B/C,EAIAA,KAAKD,QAALC,EAJAA,EAKAA,KAAKiB,SAALjB,EALAA,EAMAgD,EAAIC,QAAJD,CAAahD,KAAKQ,OAAlBwC,EAA2B;AACzBhD,WAAKD,QAALC,IACAA,KAAKiB,SAALjB,EADAA;AACKiB,KAFP+B,CANAhD;AAQOiB,GAhHI;;AAmHbiC;AACEF,MAAIG,kBAAJH,CAAuBhD,KAAKQ,OAA5BwC;AAA4BxC,GApHjB;;AAsHb4C,QAAK,OACI;AACL/C,kBAASgD,CADJ;AAELlD,oBAAWkD,CAFN;AAGL1C,gBAAO0C,CAHF;AAIL3C,gBAAO2C,CAJF;AAKL5C,sBAAa4C,CALR;AAML7C,kBAAS6C,CANJ;AAOL9C,wBAAe8C,CAPV;AAQLpD,aAAQ,CARH;AASLC,WAAM,CATD;AAUL+B,eAAW,EAVN;AAWLD,iBAAY;AAXP,GADJ;AAtHQ,CAAf;AAkIkB;ACvKdsB,SAAM,cDuKQ;ACtKdC,OAAI;ADsKU;AAAA,MCtKVC;AAGFF,SAAM,mBAHJ;AAIFC,OAAI;AAJF,CDsKU;AAAA,MClKRE;AAcFH,SAAM,OAdJ;AAeFC,OAAI;AAfF,CDkKQ;AAAA,MCnJNG;AAGFJ,SAAM,OAHJ;AAIFC,OAAI;AAJF,CDmJM;AC/IJI;AAAA,cAzBZC,aAIEC,aAIEA;AACEP,WAAM,mBADRO;AAEEN,SAAI,kBAFNM;AAGGC,uCAAOC,0BAAPD,CAHHD;AAIGG,4CAAYD,gCAAZC,CAJHH;AAKGI,2CAAWF,0BAAXE,CALHJ;AAMGK,0CAAUH,8BAAVG,CANHL;AAOGM,+CAAeJ,4CAAfI;AAPHN,KAOkBE,CAEhBK,sBAFgBL,CAPlBF,EASEO,GATFP,CAJFQ,EAeER,aAIEA,sBAJFS,GAIEC,GAJFV,CAfFQ,GAmBIE,GAnBJV,CAJFW,GAuBMD,GAvBNX,CAyBY;AAFNW,CAEM,EAFNA,wDAEM;ACvBd,QAAeE,EAAoBC,CAApBD,CAAf;AAAmCC","names":["browser","detect","name","props","speed","type","Number","default","methods","calcSize","this","isDown","isUp","maxHeight","parseFloat","wrapper","offsetHeight","contentHeight","content","trackHeight","track","thumb","style","height","classList","add","remove","calcThumb","currentMT","marginTop","parseInt","top","onContentResize","prevHeight","transition","handler","e","propertyName","removeEventListener","addEventListener","setVertical","startDrag","isDragging","prevTouch","touches","onDrag","preventDefault","touch","delta","clientY","stopDrag","scroll","deltaY","nextMT","mounted","$refs","scrollbarContent","scrollbarWrapper","erd","listenTo","beforeUnmount","removeAllListeners","data","undefined","class","ref","p","b","v","l","_createElementBlock","_createElementVNode","onWheel","$options","onTouchstart","onTouchmove","onTouchend","onTransitionend","_renderSlot","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_1","withConfigTransport","VaScrollbar"],"sources":["../../src/components/va-scrollbar/VaScrollbar.vue","../../src/components/va-scrollbar/VaScrollbar.vue?vue&type=template&id=0542b7a0&lang.js","../../src/components/va-scrollbar/index.ts"],"sourcesContent":["<template>\n  <div\n    class=\"va-scrollbar\"\n    ref=\"vuesticScrollbar\"\n  >\n    <div\n      class=\"scrollbar-wrapper\"\n      ref=\"scrollbarWrapper\"\n    >\n      <div\n        class=\"scrollbar-content\"\n        ref=\"scrollbarContent\"\n        @wheel=\"scroll\"\n        @touchstart=\"startDrag\"\n        @touchmove=\"onDrag\"\n        @touchend=\"stopDrag\"\n        @transitionend=\"onContentResize\"\n      >\n        <slot />\n      </div>\n      <div\n        class=\"track\"\n        ref=\"track\"\n      >\n        <div\n          class=\"thumb\"\n          ref=\"thumb\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { detect } from 'detect-browser'\nimport erd from 'element-resize-detector'\n\nconst browser = detect()\n\nexport default {\n  name: 'VaScrollbar',\n  props: {\n    speed: {\n      type: Number,\n      default: 20,\n    },\n  },\n  methods: {\n    calcSize () {\n      this.isDown = this.isUp = false\n      this.maxHeight = parseFloat(this.wrapper.offsetHeight, 10)\n      this.contentHeight = parseFloat(this.content.offsetHeight, 10)\n      this.trackHeight = parseFloat(this.track.offsetHeight, 10)\n\n      if (this.maxHeight / this.contentHeight * this.trackHeight < 10) {\n        this.thumb.style.height = 10 + 'px'\n      } else {\n        this.thumb.style.height = this.maxHeight / this.contentHeight * this.trackHeight + 'px'\n      }\n\n      if (this.maxHeight / this.contentHeight < 1) {\n        this.thumb.classList.add('active')\n      } else {\n        this.thumb.classList.remove('active')\n      }\n    },\n    calcThumb () {\n      const currentMT = this.content.style.marginTop === ''\n        ? 0\n        : parseInt(this.content.style.marginTop, 10)\n      this.thumb.style.top = (-currentMT / this.contentHeight * this.trackHeight) + 'px'\n    },\n    onContentResize () {\n      const prevHeight = this.contentHeight\n      this.calcSize()\n      this.calcThumb()\n\n      this.content.style.transition = 'margin-top .3s linear'\n      this.thumb.style.transition = 'top .3s linear'\n      const handler = (e) => {\n        if (e.propertyName === 'margin-top') {\n          this.content.style.transition = ''\n          this.calcSize()\n          this.calcThumb()\n          this.content.removeEventListener('transitionend', handler)\n          this.thumb.style.transition = ''\n        }\n      }\n      this.content.addEventListener('transitionend', handler)\n\n      this.setVertical(this.contentHeight - prevHeight)\n    },\n    startDrag (e) {\n      this.isDragging = true\n      this.prevTouch = e.touches[0]\n    },\n    onDrag (e) {\n      if (this.isDragging) {\n        e.preventDefault()\n        const touch = e.touches[0]\n        const delta = this.prevTouch.clientY - touch.clientY\n        this.setVertical(delta)\n        this.prevTouch = touch\n      }\n    },\n    stopDrag () {\n      this.isDragging = false\n    },\n    scroll (e) {\n      let delta = (e.deltaY * 0.01 * this.speed)\n      if (browser.name === 'firefox') {\n        delta *= 10\n      }\n      this.setVertical(delta)\n      e.preventDefault()\n    },\n    setVertical (delta) {\n      if ((this.isDown && delta > 0) || (this.isUp && delta < 0) || (this.contentHeight <= this.maxHeight)) {\n        return\n      }\n      const currentMT = this.content.style.marginTop === ''\n        ? 0\n        : parseFloat(this.content.style.marginTop, 10)\n      let nextMT = 0\n      if (this.maxHeight - (currentMT - delta) > this.contentHeight && delta > 0) {\n        nextMT = this.maxHeight - this.contentHeight\n        this.isDown = true\n      } else {\n        this.isDown = false\n        if (currentMT - delta > 0) {\n          this.isUp = true\n          nextMT = 0\n        } else {\n          nextMT = currentMT - delta\n          this.isUp = false\n        }\n      }\n\n      this.content.style.marginTop = nextMT + 'px'\n      this.calcThumb()\n    },\n  },\n  mounted () {\n    this.track = this.$refs.track\n    this.thumb = this.$refs.thumb\n    this.content = this.$refs.scrollbarContent\n    this.wrapper = this.$refs.scrollbarWrapper\n    this.calcSize()\n    this.calcThumb()\n    erd.listenTo(this.content, () => {\n      this.calcSize()\n      this.calcThumb()\n    })\n  },\n  beforeUnmount () {\n    erd.removeAllListeners(this.content)\n  },\n  data () {\n    return {\n      wrapper: undefined,\n      maxHeight: undefined,\n      thumb: undefined,\n      track: undefined,\n      trackHeight: undefined,\n      content: undefined,\n      contentHeight: undefined,\n      isDown: false,\n      isUp: true,\n      prevTouch: {},\n      isDragging: false,\n    }\n  },\n}\n\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-scrollbar {\n  background: var(--va-scrollbar-background);\n  transition: var(--va-scrollbar-transition);\n  position: var(--va-scrollbar-position);\n  font-family: var(--va-font-family);\n\n  .scrollbar-wrapper {\n    border-radius: var(--va-scrollbar-wrapper-border-radius);\n    box-shadow: var(--va-scrollbar-wrapper-box-shadow);\n    position: var(--va-scrollbar-wrapper-position);\n    overflow: var(--va-scrollbar-wrapper-overflow);\n    max-height: var(--va-scrollbar-wrapper-max-height);\n\n    .track {\n      width: var(--va-scrollbar-wrapper-track-width);\n      position: var(--va-scrollbar-wrapper-track-position);\n      right: var(--va-scrollbar-wrapper-track-right);\n      top: var(--va-scrollbar-wrapper-track-top);\n      height: var(--va-scrollbar-wrapper-track-height);\n\n      .thumb {\n        transition: var(--va-scrollbar-thumb-transition);\n        position: var(--va-scrollbar-thumb-position);\n        width: var(--va-scrollbar-thumb-width);\n        background-color: var(--va-scrollbar-thumb-background-color);\n        opacity: var(--va-scrollbar-thumb-opacity);\n\n        &.active {\n          opacity: 0.3;\n        }\n      }\n    }\n  }\n\n  &:hover {\n    .thumb.active {\n      opacity: 1 !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div\n    class=\"va-scrollbar\"\n    ref=\"vuesticScrollbar\"\n  >\n    <div\n      class=\"scrollbar-wrapper\"\n      ref=\"scrollbarWrapper\"\n    >\n      <div\n        class=\"scrollbar-content\"\n        ref=\"scrollbarContent\"\n        @wheel=\"scroll\"\n        @touchstart=\"startDrag\"\n        @touchmove=\"onDrag\"\n        @touchend=\"stopDrag\"\n        @transitionend=\"onContentResize\"\n      >\n        <slot />\n      </div>\n      <div\n        class=\"track\"\n        ref=\"track\"\n      >\n        <div\n          class=\"thumb\"\n          ref=\"thumb\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { detect } from 'detect-browser'\nimport erd from 'element-resize-detector'\n\nconst browser = detect()\n\nexport default {\n  name: 'VaScrollbar',\n  props: {\n    speed: {\n      type: Number,\n      default: 20,\n    },\n  },\n  methods: {\n    calcSize () {\n      this.isDown = this.isUp = false\n      this.maxHeight = parseFloat(this.wrapper.offsetHeight, 10)\n      this.contentHeight = parseFloat(this.content.offsetHeight, 10)\n      this.trackHeight = parseFloat(this.track.offsetHeight, 10)\n\n      if (this.maxHeight / this.contentHeight * this.trackHeight < 10) {\n        this.thumb.style.height = 10 + 'px'\n      } else {\n        this.thumb.style.height = this.maxHeight / this.contentHeight * this.trackHeight + 'px'\n      }\n\n      if (this.maxHeight / this.contentHeight < 1) {\n        this.thumb.classList.add('active')\n      } else {\n        this.thumb.classList.remove('active')\n      }\n    },\n    calcThumb () {\n      const currentMT = this.content.style.marginTop === ''\n        ? 0\n        : parseInt(this.content.style.marginTop, 10)\n      this.thumb.style.top = (-currentMT / this.contentHeight * this.trackHeight) + 'px'\n    },\n    onContentResize () {\n      const prevHeight = this.contentHeight\n      this.calcSize()\n      this.calcThumb()\n\n      this.content.style.transition = 'margin-top .3s linear'\n      this.thumb.style.transition = 'top .3s linear'\n      const handler = (e) => {\n        if (e.propertyName === 'margin-top') {\n          this.content.style.transition = ''\n          this.calcSize()\n          this.calcThumb()\n          this.content.removeEventListener('transitionend', handler)\n          this.thumb.style.transition = ''\n        }\n      }\n      this.content.addEventListener('transitionend', handler)\n\n      this.setVertical(this.contentHeight - prevHeight)\n    },\n    startDrag (e) {\n      this.isDragging = true\n      this.prevTouch = e.touches[0]\n    },\n    onDrag (e) {\n      if (this.isDragging) {\n        e.preventDefault()\n        const touch = e.touches[0]\n        const delta = this.prevTouch.clientY - touch.clientY\n        this.setVertical(delta)\n        this.prevTouch = touch\n      }\n    },\n    stopDrag () {\n      this.isDragging = false\n    },\n    scroll (e) {\n      let delta = (e.deltaY * 0.01 * this.speed)\n      if (browser.name === 'firefox') {\n        delta *= 10\n      }\n      this.setVertical(delta)\n      e.preventDefault()\n    },\n    setVertical (delta) {\n      if ((this.isDown && delta > 0) || (this.isUp && delta < 0) || (this.contentHeight <= this.maxHeight)) {\n        return\n      }\n      const currentMT = this.content.style.marginTop === ''\n        ? 0\n        : parseFloat(this.content.style.marginTop, 10)\n      let nextMT = 0\n      if (this.maxHeight - (currentMT - delta) > this.contentHeight && delta > 0) {\n        nextMT = this.maxHeight - this.contentHeight\n        this.isDown = true\n      } else {\n        this.isDown = false\n        if (currentMT - delta > 0) {\n          this.isUp = true\n          nextMT = 0\n        } else {\n          nextMT = currentMT - delta\n          this.isUp = false\n        }\n      }\n\n      this.content.style.marginTop = nextMT + 'px'\n      this.calcThumb()\n    },\n  },\n  mounted () {\n    this.track = this.$refs.track\n    this.thumb = this.$refs.thumb\n    this.content = this.$refs.scrollbarContent\n    this.wrapper = this.$refs.scrollbarWrapper\n    this.calcSize()\n    this.calcThumb()\n    erd.listenTo(this.content, () => {\n      this.calcSize()\n      this.calcThumb()\n    })\n  },\n  beforeUnmount () {\n    erd.removeAllListeners(this.content)\n  },\n  data () {\n    return {\n      wrapper: undefined,\n      maxHeight: undefined,\n      thumb: undefined,\n      track: undefined,\n      trackHeight: undefined,\n      content: undefined,\n      contentHeight: undefined,\n      isDown: false,\n      isUp: true,\n      prevTouch: {},\n      isDragging: false,\n    }\n  },\n}\n\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-scrollbar {\n  background: var(--va-scrollbar-background);\n  transition: var(--va-scrollbar-transition);\n  position: var(--va-scrollbar-position);\n  font-family: var(--va-font-family);\n\n  .scrollbar-wrapper {\n    border-radius: var(--va-scrollbar-wrapper-border-radius);\n    box-shadow: var(--va-scrollbar-wrapper-box-shadow);\n    position: var(--va-scrollbar-wrapper-position);\n    overflow: var(--va-scrollbar-wrapper-overflow);\n    max-height: var(--va-scrollbar-wrapper-max-height);\n\n    .track {\n      width: var(--va-scrollbar-wrapper-track-width);\n      position: var(--va-scrollbar-wrapper-track-position);\n      right: var(--va-scrollbar-wrapper-track-right);\n      top: var(--va-scrollbar-wrapper-track-top);\n      height: var(--va-scrollbar-wrapper-track-height);\n\n      .thumb {\n        transition: var(--va-scrollbar-thumb-transition);\n        position: var(--va-scrollbar-thumb-position);\n        width: var(--va-scrollbar-thumb-width);\n        background-color: var(--va-scrollbar-thumb-background-color);\n        opacity: var(--va-scrollbar-thumb-opacity);\n\n        &.active {\n          opacity: 0.3;\n        }\n      }\n    }\n  }\n\n  &:hover {\n    .thumb.active {\n      opacity: 1 !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaScrollbar from './VaScrollbar.vue'\n\nexport default withConfigTransport(VaScrollbar)\n"]},"metadata":{},"sourceType":"module"}