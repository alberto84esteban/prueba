{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { w as e } from \"./withConfigTransport.js\";\nimport { computed as t, ref as a, watch as r, defineComponent as o, toRefs as n, resolveComponent as l, openBlock as s, createElementBlock as i, createVNode as u, withCtx as p, renderSlot as d, normalizeProps as c, guardReactiveProps as m, mergeProps as v, createSlots as f, createBlock as y, createCommentVNode as j, withModifiers as g, renderList as D } from \"vue\";\nimport { u as V, a as C, b as I } from \"./VaInput.js\";\nimport { a as h, b as P, u as k } from \"./index60.js\";\nimport { a as x } from \"./useStateful.js\";\nimport { u as b } from \"./useForm.js\";\nimport { i as S, s as _, a as $, b as w } from \"./VaDatePicker.js\";\nimport { e as B, a as E, f as O } from \"./child-props.js\";\nimport T, { VaDropdownContent as F } from \"./index25.js\";\nimport M from \"./index31.js\";\nimport L from \"./index28.js\";\nimport { s as N } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"cleave.js\";\nimport \"./useEmitProxy.js\";\nimport \"./color-config.js\";\nimport \"colortranslator\";\nimport \"./pick.js\";\nimport \"./VaIcon.js\";\nimport \"./flatten.js\";\nimport \"./useSize.js\";\nimport \"./useSyncProp.js\";\nimport \"./consts.js\";\nimport \"./useFocus.js\";\nimport \"./useColor.js\";\nimport \"./index8.js\";\nimport \"./useRouterLink.js\";\nimport \"./useLoading.js\";\nimport \"./index39.js\";\nimport \"./clamp.js\";\nimport \"./toNumber.js\";\nimport \"./VaDropdownContent.js\";\nimport \"tslib\";\nimport \"./vue-class-component.esm-bundler.js\";\nimport \"asva-executors\";\nimport \"@popperjs/core\";\nimport \"./StatefulMixin.js\";\nimport \"./VaMessageListWrapper.vue_vue&type=script&lang.js\";\n\nconst defaultParseDateFunction = e => new Date(Date.parse(e)),\n      useDateParser = e => {\n  const t = a(!0),\n        parseDate = a => {\n    const r = (e.parseDate || defaultParseDateFunction)(a);\n    var o;\n    return (!(o = r) || o instanceof Date && isNaN(o.getTime())) && (t.value = !1), r;\n  };\n\n  return {\n    parseDateInputValue: a => {\n      if (t.value = !0, e.parse) return e.parse(a, t);\n      if ((t => t.includes(e.delimiter))(a)) return a.split(e.delimiter).map(e => parseDate(e));\n\n      if ((t => t.includes(e.rangeDelimiter))(a)) {\n        const [t, r] = a.split(e.rangeDelimiter).map(e => parseDate(e));\n        return {\n          start: t,\n          end: r\n        };\n      }\n\n      return parseDate(a);\n    },\n    isValid: t\n  };\n},\n      z = { ...k,\n  ...b,\n  label: {\n    type: String,\n    required: !1\n  },\n  color: {\n    type: String,\n    default: \"primary\"\n  },\n  placeholder: {\n    type: String,\n    default: \"\"\n  },\n  tabindex: {\n    type: Number,\n    default: 0\n  },\n  outline: {\n    Boolean: Boolean,\n    default: !1\n  },\n  bordered: {\n    type: Boolean,\n    default: !1\n  }\n};\n\nvar H = o({\n  name: \"VaDateInput\",\n  components: {\n    vaDropdown: T,\n    VaDropdownContent: F,\n    VaDatePicker: _,\n    VaInput: M,\n    VaIcon: L\n  },\n  props: { ...B(_),\n    ...z,\n    ...V,\n    clearValue: {\n      type: Date,\n      default: void 0\n    },\n    resetOnClose: {\n      type: Boolean,\n      default: !0\n    },\n    isOpen: {\n      type: Boolean\n    },\n    format: {\n      type: Function\n    },\n    formatDate: {\n      type: Function,\n      default: () => e => e.toLocaleDateString()\n    },\n    parse: {\n      type: Function\n    },\n    parseDate: {\n      type: Function\n    },\n    delimiter: {\n      type: String,\n      default: \", \"\n    },\n    rangeDelimiter: {\n      type: String,\n      default: \" ~ \"\n    },\n    manualInput: {\n      type: Boolean,\n      default: !1\n    },\n    leftIcon: {\n      type: Boolean,\n      default: !1\n    },\n    icon: {\n      type: String,\n      default: \"calendar_today\"\n    }\n  },\n  emits: [...E(_), ...C, ...h, \"update:is-open\", \"update:text\"],\n\n  setup(e, {\n    emit: o,\n    slots: l\n  }) {\n    const {\n      isOpen: s,\n      resetOnClose: i\n    } = n(e),\n          {\n      valueComputed: u\n    } = x(e, o),\n          {\n      syncProp: p\n    } = function useSyncProp(e, r, o, n) {\n      if (void 0 === n) return {\n        syncProp: t({\n          set(e) {\n            o(`update:${r}`, e);\n          },\n\n          get: () => e.value\n        })\n      };\n      const l = a(n);\n      return {\n        syncProp: t({\n          set(e) {\n            l.value = e, o(`update:${r}`, e);\n          },\n\n          get: () => void 0 === (null == e ? void 0 : e.value) ? l.value : e.value\n        })\n      };\n    }(s, \"is-open\", o, !1),\n          d = t(() => !i.value),\n          {\n      valueComputed: c,\n      reset: m\n    } = ((e, o) => {\n      const n = a(e.value),\n            l = t({\n        get: () => n.value,\n        set: t => {\n          if (o.value && (n.value = t, e.value = t), !t) return e.value = t, void (n.value = t);\n          S(t) ? null !== t.end && (e.value = t) : e.value = t, n.value = t;\n        }\n      });\n      return r(e, e => {\n        n.value = e;\n      }), {\n        valueComputed: l,\n        reset: () => {\n          n.value && S(n.value) && (n.value = e.value);\n        }\n      };\n    })(u, d);\n\n    r(p, e => {\n      e || d.value || m();\n    });\n\n    const dateOrNothing = t => t ? e.formatDate(t) : \"...\",\n          v = a(),\n          {\n      parseDateInputValue: f,\n      isValid: y\n    } = useDateParser(e),\n          j = t(() => {\n      if (!y.value) return e.clearValue;\n      if (e.format) return e.format(c.value);\n      if (!c.value) return e.clearValue;\n      if ($(c.value)) return c.value.map(t => e.formatDate(t)).join(e.delimiter);\n      if (w(c.value)) return e.formatDate(c.value);\n      if (S(c.value)) return dateOrNothing(c.value.start) + e.rangeDelimiter + dateOrNothing(c.value.end);\n      throw new Error(\"VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }\");\n    }),\n          reset = () => {\n      u.value = e.clearValue, o(\"clear\");\n    },\n          {\n      isFocused: g,\n      computedError: D,\n      computedErrorMessages: V\n    } = P(e, o, reset, () => {\n      var e;\n      null === (e = v.value) || void 0 === e || e.focus();\n    }),\n          C = t(() => !y.value && c.value !== e.clearValue || D.value),\n          h = t(() => {\n      const t = [e.leftIcon && \"prependInner\", (!e.leftIcon || e.clearable) && \"icon\"];\n      return Object.keys(l).filter(e => !t.includes(e));\n    }),\n          {\n      canBeCleared: k,\n      clearIconProps: b\n    } = I(e, c, g, C),\n          E = t(() => ({\n      name: e.icon,\n      color: e.color,\n      size: \"small\",\n      class: \"va-date-input__icon\"\n    })),\n          T = O(e, B(M, [\"rules\", \"error\", \"errorMessages\", \"clearable\"]));\n\n    return {\n      valueText: j,\n      valueComputed: c,\n      isOpenSync: p,\n      onInputTextChanged: ({\n        target: e\n      }) => {\n        const t = f(e.value);\n        y.value && (c.value = t);\n      },\n      hasError: C,\n      computedErrorMessages: V,\n      input: v,\n      inputProps: T,\n      datePickerProps: O(e, B(_)),\n      filterSlots: h,\n      canBeCleared: k,\n      clearIconProps: b,\n      iconProps: E,\n      reset: reset\n    };\n  },\n\n  methods: {\n    focus() {\n      var e;\n      null === (e = this.input) || void 0 === e || e.focus();\n    },\n\n    blur() {\n      var e;\n      null === (e = this.input) || void 0 === e || e.blur();\n    }\n\n  }\n});\nconst U = {\n  class: \"va-date-input\"\n};\nN(\".va-date-input{--va-date-picker-cell-size:28px;display:flex;font-family:var(--va-font-family)}.va-date-input__icon,.va-date-input__input.va-input_readonly{cursor:pointer}.va-date-input .va-dropdown{width:100%}\"), H.render = function render(e, t, a, r, o, n) {\n  const V = l(\"va-icon\"),\n        C = l(\"va-input\"),\n        I = l(\"va-date-picker\"),\n        h = l(\"va-dropdown-content\"),\n        P = l(\"va-dropdown\");\n  return s(), i(\"div\", U, [u(P, {\n    modelValue: e.isOpenSync,\n    \"onUpdate:modelValue\": t[9] || (t[9] = t => e.isOpenSync = t),\n    offset: [0, 10],\n    \"close-on-content-click\": !1,\n    disabled: e.disabled\n  }, {\n    anchor: p(() => [d(e.$slots, \"input\", c(m({\n      valueText: e.valueText,\n      inputProps: e.inputProps,\n      color: e.color\n    })), () => [u(C, v(e.inputProps, {\n      ref: \"input\",\n      class: \"va-date-input__input\",\n      \"model-value\": e.valueText,\n      error: e.hasError,\n      \"error-messages\": e.computedErrorMessages,\n      readonly: e.readonly || !e.manualInput,\n      onChange: e.onInputTextChanged\n    }), f({\n      prependInner: p(t => [d(e.$slots, \"prependInner\", c(m(t))), e.$props.leftIcon ? (s(), y(V, c(v({\n        key: 0\n      }, e.iconProps)), null, 16)) : j(\"v-if\", !0)]),\n      icon: p(() => [e.canBeCleared ? (s(), y(V, v({\n        key: 0\n      }, e.clearIconProps, {\n        onClick: t[0] || (t[0] = g(t => e.reset(), [\"stop\"]))\n      }), null, 16)) : e.$props.leftIcon ? j(\"v-if\", !0) : (s(), y(V, c(v({\n        key: 1\n      }, e.iconProps)), null, 16))]),\n      _: 2\n    }, [D(e.filterSlots, t => ({\n      name: t,\n      fn: p(a => [d(e.$slots, t, c(m(a)))])\n    }))]), 1040, [\"model-value\", \"error\", \"error-messages\", \"readonly\", \"onChange\"])])]),\n    default: p(() => [u(h, null, {\n      default: p(() => [u(I, v(e.datePickerProps, {\n        modelValue: e.valueComputed,\n        \"onUpdate:modelValue\": t[1] || (t[1] = t => e.valueComputed = t),\n        \"onClick:day\": t[2] || (t[2] = t => e.$emit(\"click:day\", t)),\n        \"onClick:month\": t[3] || (t[3] = t => e.$emit(\"click:month\", t)),\n        \"onClick:year\": t[4] || (t[4] = t => e.$emit(\"click:year\", t)),\n        \"onHover:day\": t[5] || (t[5] = t => e.$emit(\"hover:day\", t)),\n        \"onHover:month\": t[6] || (t[6] = t => e.$emit(\"hover:month\", t)),\n        \"onHover:year\": t[7] || (t[7] = t => e.$emit(\"hover:year\", t)),\n        \"onUpdate:view\": t[8] || (t[8] = t => e.$emit(\"update:view\", t))\n      }), f({\n        _: 2\n      }, [D(e.$slots, (t, a) => ({\n        name: a,\n        fn: p(t => [d(e.$slots, a, c(m(t)))])\n      }))]), 1040, [\"modelValue\"])]),\n      _: 3\n    })]),\n    _: 3\n  }, 8, [\"modelValue\", \"disabled\"])]);\n}, H.__file = \"src/components/va-date-input/VaDateInput.vue\";\nconst q = e(H);\nexport { q as VaDateInput };","map":{"version":3,"mappings":"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","names":["defaultParseDateFunction","text","Date","parse","useDateParser","props","isValid","ref","parseDate","result","d","isNaN","getTime","value","parseDateInputValue","includes","delimiter","split","map","dateText","rangeDelimiter","start","end","VaInputProps","useValidationProps","useFormProps","label","type","String","required","color","default","placeholder","tabindex","Number","outline","Boolean","bordered","defineComponent","name","components","vaDropdown","VaDropdownContent","VaDatePicker","VaInput","VaIcon","extractComponentProps","useClearableProps","clearValue","undefined","resetOnClose","isOpen","format","Function","formatDate","toLocaleDateString","manualInput","leftIcon","icon","emits","extractComponentEmits","useClearableEmits","useValidationEmits","setup","emit","slots","toRefs","valueComputed","statefulValue","useStateful","syncProp","isOpenSync","useSyncProp","propRef","propName","defaultValue","computed","set","get","isRangeModelValueGuardDisabled","reset","resetInvalidRange","modelValue","disabled","bufferValue","isRange","watch","newValue","isOpened","dateOrNothing","date","input","valueText","isDates","join","isSingleDate","Error","isFocused","computedError","computedErrorMessages","useValidation","focus","hasError","filterSlots","slotsWithIcons","clearable","Object","keys","filter","slot","canBeCleared","clearIconProps","useClearable","iconProps","size","class","computedInputProps","filterComponentProps","onInputTextChanged","target","parsedValue","inputProps","datePickerProps","methods","this","blur","N","_createElementBlock","_createVNode","_ctx","offset","anchor","_renderSlot","_mergeProps","error","readonly","onChange","prependInner","slotScope","s","_createBlock","onClick","$event","_","bind","_hoisted_1","VaDateInput","withConfigTransport","VaDateInputComponent"],"sources":["../../src/components/va-date-input/hooks/range-model-value-guard.ts","../../src/components/va-date-input/hooks/date-text-parser.ts","../../src/components/va-date-input/VaDateInput.vue","../../src/components/va-date-picker/hooks/sync-prop.ts","../../src/components/va-date-input/VaDateInput.vue?vue&type=template&id=139365e2&lang.js","../../src/components/va-date-input/index.ts"],"sourcesContent":["import { computed, Ref, ref, watch } from 'vue'\nimport { isRange } from '../../va-date-picker/hooks/model-value-helper'\nimport { VaDatePickerModelValue } from '../../va-date-picker/types/types'\n\nexport type useRangeModelValueGuardProps = {\n  clearValue: VaDatePickerModelValue | undefined\n  [prop: string]: unknown\n}\n\n/**\n * This guard is used to prevent updating modelValue if range end is not specified.\n * This guard provides reset method, that allow us to reset VaDateInput value if dropdown is closed.\n */\nexport const useRangeModelValueGuard = (\n  modelValue: Ref<VaDatePickerModelValue | undefined>,\n  disabled: Ref<boolean>,\n) => {\n  const bufferValue = ref<VaDatePickerModelValue | undefined>(modelValue.value)\n\n  const valueComputed = computed<VaDatePickerModelValue | undefined>({\n    get: () => bufferValue.value,\n    set: (value) => {\n      if (disabled.value) {\n        bufferValue.value = value\n        modelValue.value = value\n      }\n\n      if (!value) {\n        modelValue.value = value\n        bufferValue.value = value\n        return\n      }\n\n      if (isRange(value)) {\n        if (value.end !== null) {\n          modelValue.value = value\n        }\n      } else {\n        modelValue.value = value\n      }\n\n      bufferValue.value = value\n    },\n  })\n\n  watch(modelValue, (newValue) => {\n    bufferValue.value = newValue\n  })\n\n  const reset = () => {\n    if (bufferValue.value && isRange(bufferValue.value)) {\n      bufferValue.value = modelValue.value\n    }\n  }\n\n  return {\n    valueComputed,\n    reset,\n  }\n}\n","import { Ref, ref } from 'vue'\nimport { VaDatePickerModelValue } from '../../va-date-picker/types/types'\n\nconst defaultParseDateFunction = (text: string) => new Date(Date.parse(text))\n\nconst isInvalidDate = (d: Date) => !d || (d instanceof Date && isNaN(d.getTime()))\n\nexport const useDateParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => VaDatePickerModelValue,\n  parseDate?: (input: string) => Date,\n  delimiter: string,\n  rangeDelimiter: string,\n}) => {\n  const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parseDate || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (isInvalidDate(result)) {\n      isValid.value = false\n    }\n\n    return result\n  }\n\n  const parseDateInputValue = (text: string) => {\n    isValid.value = true\n\n    if (props.parse) {\n      return props.parse(text, isValid)\n    }\n\n    if (isTextIsMultipleDates(text)) {\n      return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    }\n\n    if (isTextIsDateRange(text)) {\n      const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n      return { start, end }\n    }\n\n    return parseDate(text)\n  }\n\n  return {\n    parseDateInputValue,\n    isValid,\n  }\n}\n","<template>\n  <div class=\"va-date-input\">\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\" :disabled=\"disabled\">\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\n          <va-input\n            v-bind=\"inputProps\"\n            ref=\"input\"\n            class=\"va-date-input__input\"\n            :model-value=\"valueText\"\n            :error=\"hasError\"\n            :error-messages=\"computedErrorMessages\"\n            :readonly=\"readonly || !manualInput\"\n            @change=\"onInputTextChanged\"\n          >\n            <template\n              v-for=\"name in filterSlots\"\n              v-slot:[name]=\"slotScope\"\n              :key=\"name\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n\n            <template #prependInner=\"slotScope\">\n              <slot name=\"prependInner\" v-bind=\"slotScope\" />\n              <va-icon\n                v-if=\"$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n\n            <template #icon>\n              <va-icon\n                v-if=\"canBeCleared\"\n                v-bind=\"clearIconProps\"\n                @click.stop=\"reset()\"\n              />\n              <va-icon\n                v-else-if=\"!$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker\n            v-bind=\"datePickerProps\"\n            v-model=\"valueComputed\"\n            @click:day=\"$emit('click:day', $event)\"\n            @click:month=\"$emit('click:month', $event)\"\n            @click:year=\"$emit('click:year', $event)\"\n            @hover:day=\"$emit('hover:day', $event)\"\n            @hover:month=\"$emit('hover:month', $event)\"\n            @hover:year=\"$emit('hover:year', $event)\"\n            @update:view=\"$emit('update:view', $event)\"\n        >\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch, ref } from 'vue'\nimport { useClearableProps, useClearableEmits, useClearable } from '../../composables/useClearable'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useStateful } from '../../composables/useStateful'\nimport { useFormProps } from '../../composables/useForm'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/date-text-parser'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport vaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaInput from '../va-input'\nimport VaIcon from '../va-icon'\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\n\nconst VaInputProps = {\n  ...useValidationProps,\n  ...useFormProps,\n\n  label: { type: String, required: false },\n  color: { type: String, default: 'primary' },\n  placeholder: { type: String, default: '' },\n  tabindex: { type: Number, default: 0 },\n  outline: { Boolean, default: false },\n  bordered: { type: Boolean, default: false },\n}\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    vaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInput,\n    VaIcon,\n  },\n\n  props: {\n    ...extractComponentProps(VaDatePicker),\n    ...VaInputProps,\n\n    ...useClearableProps,\n    clearValue: { type: Date as PropType<VaDatePickerModelValue>, default: undefined },\n\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean },\n\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: () => (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => VaDatePickerModelValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'calendar_today' },\n  },\n\n  emits: [\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit, slots }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const input = ref<InstanceType<typeof VaInput> | undefined>()\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return props.clearValue\n      }\n\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (!valueComputed.value) {\n        return props.clearValue\n      }\n\n      if (isDates(valueComputed.value)) {\n        return valueComputed.value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(valueComputed.value)) {\n        return props.formatDate(valueComputed.value)\n      }\n      if (isRange(valueComputed.value)) {\n        return dateOrNothing(valueComputed.value.start) + props.rangeDelimiter + dateOrNothing(valueComputed.value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    })\n\n    const onInputTextChanged = ({ target } : { target: HTMLInputElement }) => {\n      const parsedValue = parseDateInputValue(target.value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = (): void => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    // Will be used later, after fix 'withConfigTransport'\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const {\n      isFocused,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueComputed, isFocused, hasError)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n      class: 'va-date-input__icon',\n    }))\n\n    const computedInputProps = filterComponentProps(\n      props,\n      extractComponentProps(VaInput, ['rules', 'error', 'errorMessages', 'clearable']),\n    )\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n      hasError,\n      computedErrorMessages,\n\n      input,\n\n      inputProps: computedInputProps,\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      reset,\n\n      // Will be used later, after fix 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { (this as any).input?.focus() },\n    blur () { (this as any).input?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-date-input {\n  display: flex;\n  font-family: var(--va-font-family);\n\n  &__icon {\n    cursor: pointer;\n  }\n\n  &__input.va-input_readonly {\n    cursor: pointer;\n  }\n\n  --va-date-picker-cell-size: 28px;\n\n  .va-dropdown {\n    width: 100%;\n  }\n}\n</style>\n","import { ref, computed, Ref, UnwrapRef } from 'vue'\n\nexport function useSyncProp<T, PropName extends string> (propRef: Ref<T> | undefined, propName: PropName, emit: (event: any, newValue: T) => any, defaultValue?: T) {\n  if (defaultValue === undefined) {\n    return {\n      syncProp: computed({\n        set (value: T) {\n          emit(`update:${propName}`, value)\n        },\n        get (): T {\n          return propRef!.value\n        },\n      }),\n    }\n  }\n\n  const statefulValue = ref<T>(defaultValue)\n\n  return {\n    syncProp: computed<NonNullable<T>>({\n      set (value: NonNullable<T>) {\n        statefulValue.value = value as UnwrapRef<NonNullable<T>>\n        emit(`update:${propName}`, value)\n      },\n      get (): NonNullable<T> {\n        return (propRef?.value === undefined ? (statefulValue.value) : propRef.value) as NonNullable<T>\n      },\n    }),\n  }\n}\n","<template>\n  <div class=\"va-date-input\">\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\" :disabled=\"disabled\">\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\n          <va-input\n            v-bind=\"inputProps\"\n            ref=\"input\"\n            class=\"va-date-input__input\"\n            :model-value=\"valueText\"\n            :error=\"hasError\"\n            :error-messages=\"computedErrorMessages\"\n            :readonly=\"readonly || !manualInput\"\n            @change=\"onInputTextChanged\"\n          >\n            <template\n              v-for=\"name in filterSlots\"\n              v-slot:[name]=\"slotScope\"\n              :key=\"name\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n\n            <template #prependInner=\"slotScope\">\n              <slot name=\"prependInner\" v-bind=\"slotScope\" />\n              <va-icon\n                v-if=\"$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n\n            <template #icon>\n              <va-icon\n                v-if=\"canBeCleared\"\n                v-bind=\"clearIconProps\"\n                @click.stop=\"reset()\"\n              />\n              <va-icon\n                v-else-if=\"!$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker\n            v-bind=\"datePickerProps\"\n            v-model=\"valueComputed\"\n            @click:day=\"$emit('click:day', $event)\"\n            @click:month=\"$emit('click:month', $event)\"\n            @click:year=\"$emit('click:year', $event)\"\n            @hover:day=\"$emit('hover:day', $event)\"\n            @hover:month=\"$emit('hover:month', $event)\"\n            @hover:year=\"$emit('hover:year', $event)\"\n            @update:view=\"$emit('update:view', $event)\"\n        >\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch, ref } from 'vue'\nimport { useClearableProps, useClearableEmits, useClearable } from '../../composables/useClearable'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useStateful } from '../../composables/useStateful'\nimport { useFormProps } from '../../composables/useForm'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/date-text-parser'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport vaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaInput from '../va-input'\nimport VaIcon from '../va-icon'\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\n\nconst VaInputProps = {\n  ...useValidationProps,\n  ...useFormProps,\n\n  label: { type: String, required: false },\n  color: { type: String, default: 'primary' },\n  placeholder: { type: String, default: '' },\n  tabindex: { type: Number, default: 0 },\n  outline: { Boolean, default: false },\n  bordered: { type: Boolean, default: false },\n}\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    vaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInput,\n    VaIcon,\n  },\n\n  props: {\n    ...extractComponentProps(VaDatePicker),\n    ...VaInputProps,\n\n    ...useClearableProps,\n    clearValue: { type: Date as PropType<VaDatePickerModelValue>, default: undefined },\n\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean },\n\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: () => (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => VaDatePickerModelValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'calendar_today' },\n  },\n\n  emits: [\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit, slots }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const input = ref<InstanceType<typeof VaInput> | undefined>()\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return props.clearValue\n      }\n\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (!valueComputed.value) {\n        return props.clearValue\n      }\n\n      if (isDates(valueComputed.value)) {\n        return valueComputed.value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(valueComputed.value)) {\n        return props.formatDate(valueComputed.value)\n      }\n      if (isRange(valueComputed.value)) {\n        return dateOrNothing(valueComputed.value.start) + props.rangeDelimiter + dateOrNothing(valueComputed.value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    })\n\n    const onInputTextChanged = ({ target } : { target: HTMLInputElement }) => {\n      const parsedValue = parseDateInputValue(target.value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = (): void => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    // Will be used later, after fix 'withConfigTransport'\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const {\n      isFocused,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueComputed, isFocused, hasError)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n      class: 'va-date-input__icon',\n    }))\n\n    const computedInputProps = filterComponentProps(\n      props,\n      extractComponentProps(VaInput, ['rules', 'error', 'errorMessages', 'clearable']),\n    )\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n      hasError,\n      computedErrorMessages,\n\n      input,\n\n      inputProps: computedInputProps,\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      reset,\n\n      // Will be used later, after fix 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { (this as any).input?.focus() },\n    blur () { (this as any).input?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-date-input {\n  display: flex;\n  font-family: var(--va-font-family);\n\n  &__icon {\n    cursor: pointer;\n  }\n\n  &__input.va-input_readonly {\n    cursor: pointer;\n  }\n\n  --va-date-picker-cell-size: 28px;\n\n  .va-dropdown {\n    width: 100%;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaDateInputComponent from '../va-date-input/VaDateInput.vue'\n\nexport const VaDateInput = withConfigTransport(VaDateInputComponent)\n"]},"metadata":{},"sourceType":"module"}