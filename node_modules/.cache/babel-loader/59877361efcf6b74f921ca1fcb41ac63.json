{"ast":null,"code":"import { ref as e, toRefs as t, computed as u } from \"vue\";\n\nfunction useStateful(l, a, o) {\n  const d = e(void 0 === o ? l.modelValue : o),\n        {\n    modelValue: s\n  } = t(l);\n  return {\n    valueComputed: u({\n      get: () => l.stateful ? d.value : null == s ? void 0 : s.value,\n\n      set(e) {\n        l.stateful && (d.value = e), a(\"update:modelValue\", e);\n      }\n\n    })\n  };\n}\n\nconst l = {\n  props: {\n    stateful: {\n      type: Boolean,\n      default: !1\n    },\n    modelValue: {\n      type: void 0,\n      default: void 0\n    }\n  },\n  emits: [\"update:modelValue\"]\n};\nexport { l as s, useStateful as u };","map":{"version":3,"mappings":";;SAOgBA,YACdC,GACAC,GACAC;AAEA,QAAMC,IAAaC,OAAqBC,CAArBD,KAAIF,CAAJE,GAAiCJ,EAAMM,UAAvCF,GAAoDF,CAApDE,CAAnB;AAAA,QAAuEF;AACjEI,gBAAEA;AAD+DJ,MAChDK,EAAOP,CAAPO,CADvB;AAkBA,SAAO;AAAEC,mBAfaC,EAAY;AAChCC,WAAG,MACGV,EAAMW,QAANX,GACKG,EAAWS,KADhBZ,GAGGM,uBAAYM,KALW;;AAOhCC,UAAKD,CAALC,EAAKD;AACCZ,UAAMW,QAANX,KACFG,EAAWS,KAAXT,GAAmBS,CADjBZ,GAGJC,EAAK,mBAALA,EAA0BW,CAA1BX,CAHID;AAGsBY;;AAXI,KAAZH;AAef,GAAP;AAJ8BG;;AAAAA,MAkBnBE,IAA2B;AACtCd,SAAO;AACLW,cAAU;AACRI,YAAMC,OADE;AAERC,gBAAS;AAFD,KADL;AAKLX,gBAAY;AACVS,iBAAMV,CADI;AAEVY,oBAASZ;AAFC;AALP,GAD+B;AAWtCa,SAAO,CAAC,mBAAD;AAX+B,CAlBRN;AA6BtB","names":["useStateful","props","emit","defaultValue","valueState","ref","undefined","modelValue","toRefs","valueComputed","computed","get","stateful","value","set","statefulComponentOptions","type","Boolean","default","emits"],"sources":["../../src/mixins/StatefulMixin/cStatefulMixin.ts"],"sourcesContent":["import { ref, computed, toRefs } from 'vue'\n\n/**\n * Returns `valueComputed` that is proxy for `modelValue`\n * if `stateful` prop is `false`\n * Record<any, any> & Record<'modelValue', T>\n */\nexport function useStateful<T, D extends T | undefined> (\n  props: { [key: string]: any, modelValue?: T },\n  emit: (event: 'update:modelValue', ...args: any[]) => void,\n  defaultValue?: D,\n) {\n  const valueState = ref(defaultValue === undefined ? props.modelValue : defaultValue)\n  const { modelValue } = toRefs(props)\n\n  const valueComputed = computed<D>({\n    get () {\n      if (props.stateful) {\n        return valueState.value as D\n      }\n      return modelValue?.value\n    },\n    set (value: any) {\n      if (props.stateful) {\n        valueState.value = value\n      }\n      emit('update:modelValue', value)\n    },\n  })\n\n  return { valueComputed }\n}\n\n/**\n * Insert this to `@Options`.\n * This will add `modelValue`, `stateful` props and `update:modelValue` emit.\n * If you want to use `modelValue` in your component you provide prop manually.\n *\n * @example\n ```\n  @Options({ name: 'Example', ...statefulComponentOptions })\n  export default class ExampleComponent extends Vue.with(props)\n ```\n */\nexport const statefulComponentOptions = {\n  props: {\n    stateful: {\n      type: Boolean,\n      default: false,\n    },\n    modelValue: {\n      type: undefined,\n      default: undefined,\n    },\n  },\n  emits: ['update:modelValue'] as const,\n}\n"]},"metadata":{},"sourceType":"module"}