{"ast":null,"code":"import { u as e } from \"./cStatefulMixin.js\";\nimport { defineComponent as o, ref as t, provide as u, onMounted as a, onUpdated as l } from \"vue\";\nconst p = Symbol(\"AccordionService\");\nvar n = o({\n  name: \"VaAccordion\",\n  emits: [\"update:modelValue\"],\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    multiply: {\n      type: Boolean,\n      default: !1\n    },\n    inset: {\n      type: Boolean,\n      default: !1\n    },\n    popout: {\n      type: Boolean,\n      default: !1\n    }\n  },\n\n  setup(o, n) {\n    const i = e(o, n.emit, []),\n          r = t([]);\n    u(p, {\n      isInsideAccordion: !0,\n      getProps: () => ({\n        inset: o.inset,\n        popout: o.popout\n      }),\n      getState: () => i.valueComputed,\n      onChildMounted: e => {\n        r.value.push(e);\n      },\n      onChildUnmounted: e => {\n        r.value = r.value.filter(o => o !== e);\n      },\n      onChildChange: e => {\n        const t = r.value.map(t => (t === e || o.multiply || (t.valueProxy = !1), t.valueProxy));\n        i.valueComputed.value = t;\n      }\n    });\n\n    const updateCollapsesValues = () => {\n      r.value.forEach((e, o) => {\n        e.valueProxy = i.valueComputed.value[o];\n      });\n    };\n\n    return a(updateCollapsesValues), l(updateCollapsesValues), {\n      collapses: r,\n      value: i.valueComputed\n    };\n  }\n\n});\nexport { p as A, n as s };","map":{"version":3,"mappings":";;MAWaA,IAAsBC,OAAO,kBAAPA;AAWnC,QAAeC,EAAgB;AAC7BC,QAAM,aADuB;AAE7BC,SAAO,CAAC,mBAAD,CAFsB;AAG7BC,SAAO;AACLC,gBAAY;AAAEC,YAAMC,KAAR;AAAeC,eAAS,MAAM;AAA9B,KADP;AAELC,cAAU;AAAEH,YAAMI,OAAR;AAAiBF,gBAAS;AAA1B,KAFL;AAGLG,WAAO;AAAEL,YAAMI,OAAR;AAAiBF,gBAAS;AAA1B,KAHF;AAILI,YAAQ;AAAEN,YAAMI,OAAR;AAAiBF,gBAAS;AAA1B;AAJH,GAHsB;;AAS7BK,QAAOT,CAAPS,EAAcC,CAAdD,EAAcC;AACZ,UAAMC,IAAWC,EAAYZ,CAAZY,EAAmBF,EAAIG,IAAvBD,EAA6B,EAA7BA,CAAjB;AAAA,UACME,IAAYC,EAAgB,EAAhBA,CADlB;AAiCAC,MAAQrB,CAARqB,EATkB;AAChBC,0BAAmB,CADH;AAEhBC,gBAvBe;AAASX,eAAOP,EAAMO,KAAtB;AAA6BC,gBAAQR,EAAMQ;AAA3C,QAqBC;AAGhBW,gBAAU,MAAMR,EAASS,aAHT;AAIhBC,sBAxBsBC;AAAsBR,UAAUS,KAAVT,CAAgBU,IAAhBV,CAAqBQ,CAArBR;AAAqBQ,OAoBjD;AAKhBG,wBAxBwBH;AACxBR,UAAUS,KAAVT,GAAkBA,EAAUS,KAAVT,CAAgBY,MAAhBZ,CAAuBa,KAAYA,MAAaL,CAAhDR,CAAlBA;AAAkEQ,OAkBlD;AAMhBM,qBAtBqBN;AACrB,cAAMO,IAAkBf,EAAUS,KAAVT,CAAgBgB,GAAhBhB,CAAqBa,MACvCA,MAAaL,CAAbK,IAIC3B,EAAMK,QAJPsB,KAKFA,EAASI,UAATJ,GAASI,CAAa,CALpBJ,GACKA,EAASI,UAFyBJ,CAArBb,CAAxB;AAYAH,UAASS,aAATT,CAAuBY,KAAvBZ,GAA+BkB,CAA/BlB;AAA+BkB;AAGf,KASlBb;;AAEA,UAAMgB,wBAAwB;AAC5BlB,QAAUS,KAAVT,CAAgBmB,OAAhBnB,CAAwB,CAACa,CAAD,EAAqBO,CAArB,KAAqBA;AAC3CP,UAASI,UAATJ,GAAsBhB,EAASS,aAATT,CAAuBY,KAAvBZ,CAA6BuB,CAA7BvB,CAAtBgB;AAAmDO,OADrDpB;AACqDoB,KAFvD;;AASA,WAHAC,EAAUH,qBAAVG,GACAC,EAAUJ,qBAAVI,CADAD,EAGO;AAAErB,kBAAF;AAAaS,aAAOZ,EAASS;AAA7B,KAAP;AAAoCA;;AAtDT,CAAhBvB,CAAf;AAsDwCuB","names":["AccordionServiceKey","Symbol","defineComponent","name","emits","props","modelValue","type","Array","default","multiply","Boolean","inset","popout","setup","ctx","stateful","useStateful","emit","collapses","ref","provide","isInsideAccordion","getProps","getState","valueComputed","onChildMounted","child","value","push","onChildUnmounted","filter","collapse","onChildChange","accordionValues","map","valueProxy","updateCollapsesValues","forEach","index","onMounted","onUpdated"],"sources":["../../src/components/va-accordion/VaAccordion.vue"],"sourcesContent":["<template>\n  <div class=\"va-accordion\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\nimport { provide, defineComponent, ref, onMounted, onUpdated } from 'vue'\nimport Collapse from '../va-collapse/VaCollapse.vue'\n\nexport const AccordionServiceKey = Symbol('AccordionService')\n\nexport type Accordion = {\n  isInsideAccordion: boolean;\n  getProps: () => any;\n  getState: () => any;\n  onChildChange: (child: Collapse) => void;\n  onChildMounted: (child: Collapse) => void;\n  onChildUnmounted: (child: Collapse) => void;\n}\n\nexport default defineComponent({\n  name: 'VaAccordion',\n  emits: ['update:modelValue'],\n  props: {\n    modelValue: { type: Array, default: () => [] },\n    multiply: { type: Boolean, default: false },\n    inset: { type: Boolean, default: false },\n    popout: { type: Boolean, default: false },\n  },\n  setup (props, ctx) {\n    const stateful = useStateful(props, ctx.emit, [] as any[])\n    const collapses = ref<Collapse[]>([])\n\n    const getProps = () => ({ inset: props.inset, popout: props.popout })\n    const onChildMounted = (child: Collapse) => { collapses.value.push(child) }\n    const onChildUnmounted = (child: Collapse) => {\n      collapses.value = collapses.value.filter(collapse => collapse !== child)\n    }\n    const onChildChange = (child: Collapse) => {\n      const accordionValues = collapses.value.map((collapse: Collapse) => {\n        if (collapse === child) {\n          return collapse.valueProxy\n        }\n\n        if (!props.multiply) {\n          collapse.valueProxy = false\n        }\n\n        return collapse.valueProxy\n      })\n\n      stateful.valueComputed.value = accordionValues\n    }\n\n    const accordion = {\n      isInsideAccordion: true,\n      getProps,\n      getState: () => stateful.valueComputed,\n      onChildMounted,\n      onChildUnmounted,\n      onChildChange,\n    }\n\n    provide(AccordionServiceKey, accordion)\n\n    const updateCollapsesValues = () => {\n      collapses.value.forEach((collapse: Collapse, index: number) => {\n        collapse.valueProxy = stateful.valueComputed.value[index]\n      })\n    }\n\n    onMounted(updateCollapsesValues)\n    onUpdated(updateCollapsesValues)\n\n    return { collapses, value: stateful.valueComputed }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-accordion {\n  font-family: var(--va-font-family);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}