{"ast":null,"code":"import { computed as o, defineComponent as e, toRefs as t, inject as n, provide as s } from \"vue\";\nconst u = Symbol(\"LocalConfigKey\"),\n      a = o(() => []);\n\nfunction useLocalConfig() {\n  return n(u, a);\n}\n\nvar l = e({\n  name: \"VaConfig\",\n  props: {\n    components: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n\n  setup(e) {\n    const {\n      components: n\n    } = t(e),\n          a = useLocalConfig(),\n          l = o(() => [...a.value, n.value]);\n    return s(u, l), {};\n  },\n\n  render() {\n    return this.$slots.default ? this.$slots.default() : null;\n  }\n\n});\nexport { l as V, useLocalConfig as u };","map":{"version":3,"mappings":";AAOO,MAAMA,IAAiBC,OAAO,gBAAPA,CAAvB;AAAA,MAEMC,IAAkBC,EAAS,MAAM,EAAfA,CAFxB;;AAEuC,SAE9BC,cAF8B,GAE9BA;AACd,SAAOC,EAAOL,CAAPK,EAAuBH,CAAvBG,CAAP;AAGF;;AAAA,QAAeC,EAAgB;AAC7BC,QAAM,UADuB;AAE7BC,SAAO;AACLC,gBAAY;AAAEC,YAAMC,MAAR;AAAgBC,eAAS;AAAzB;AADP,GAFsB;;AAK7BC,QAAOL,CAAPK,EAAOL;AACL;AAAMC,kBAAEA;AAAR,QAAuBK,EAAON,CAAPM,CAAvB;AAAA,UACMC,IAAYX,gBADlB;AAAA,UAGMY,IAAYb,EAAS,MAAM,IAAIY,EAAUE,KAAd,EAAqBR,EAAWQ,KAAhC,CAAfd,CAHlB;AAOA,WAFAe,EAAQlB,CAARkB,EAAwBF,CAAxBE,GAEO,EAAP;AAAO,GAboB;;AAe7BC;AACE,WAAOC,KAAKC,MAALD,CAAYR,OAAZQ,GAAsBA,KAAKC,MAALD,CAAYR,OAAZQ,EAAtBA,GAA8C,IAArD;AAAqD;;AAhB1B,CAAhBd,CAAf;AAgByD","names":["LocalConfigKey","Symbol","CONFIGS_DEFAULT","computed","useLocalConfig","inject","defineComponent","name","props","components","type","Object","default","setup","toRefs","prevChain","nextChain","value","provide","render","this","$slots"],"sources":["../../src/components/va-config/VaConfig.ts"],"sourcesContent":["import { inject, provide, computed, toRefs, defineComponent, ComputedRef } from 'vue'\n\nimport { ComponentConfig } from '../../services/component-config/component-config'\n\n/**\n * We need another key to provide injected value.\n */\nexport const LocalConfigKey = Symbol('LocalConfigKey')\n\nexport const CONFIGS_DEFAULT = computed(() => [])\n\nexport function useLocalConfig (): ComputedRef<ComponentConfig[]> {\n  return inject(LocalConfigKey, CONFIGS_DEFAULT)\n}\n\nexport default defineComponent({\n  name: 'VaConfig',\n  props: {\n    components: { type: Object, default: () => ({}) },\n  },\n  setup (props) {\n    const { components } = toRefs(props)\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, components.value])\n\n    provide(LocalConfigKey, nextChain)\n\n    return {}\n  },\n  render () {\n    return this.$slots.default ? this.$slots.default() : null\n  },\n})\n"]},"metadata":{},"sourceType":"module"}