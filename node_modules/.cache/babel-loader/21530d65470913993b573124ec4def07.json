{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { w as e } from \"./withConfigTransport.js\";\nimport { defineComponent as o, ref as t, computed as r, watch as l, resolveComponent as n, openBlock as a, createElementBlock as s, withKeys as i, withModifiers as p, Fragment as c, renderList as u, toDisplayString as d, createCommentVNode as v, normalizeClass as m, normalizeStyle as g, createBlock as f, createElementVNode as h, withDirectives as y, createVNode as b, vShow as w, nextTick as x, withCtx as O, createSlots as S, mergeProps as k, renderSlot as C, normalizeProps as _, guardReactiveProps as I } from \"vue\";\nimport { u as B, a as j } from \"./useSelectableList.js\";\nimport { a as T, u as V, b as $ } from \"./index60.js\";\nimport { u as A } from \"./useForm.js\";\nimport { u as N } from \"./useLoading.js\";\nimport { a as H, u as P } from \"./useColor.js\";\nimport { a as D, u as E, b as F } from \"./VaInput.js\";\nimport { u as L, h as M } from \"./color-config.js\";\nimport { w as q } from \"./utils.js\";\nimport G, { VaDropdownContent as z } from \"./index25.js\";\nimport K from \"./index28.js\";\nimport U from \"./index31.js\";\nimport { s as R } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"./flatten.js\";\nimport \"./useSyncProp.js\";\nimport \"./consts.js\";\nimport \"./useFocus.js\";\nimport \"cleave.js\";\nimport \"./useEmitProxy.js\";\nimport \"./pick.js\";\nimport \"./VaIcon.js\";\nimport \"./useSize.js\";\nimport \"./child-props.js\";\nimport \"colortranslator\";\nimport \"./VaDropdownContent.js\";\nimport \"tslib\";\nimport \"./vue-class-component.esm-bundler.js\";\nimport \"asva-executors\";\nimport \"@popperjs/core\";\nimport \"./StatefulMixin.js\";\nimport \"./VaMessageListWrapper.vue_vue&type=script&lang.js\";\nconst W = {\n  maxSelections: {\n    type: [Number, String],\n    default: void 0\n  }\n};\nvar J = o({\n  name: \"VaSelectOptionList\",\n  components: {\n    VaIcon: K\n  },\n  emits: [\"select-option\", \"update:hoveredOption\", \"no-previous-option-to-hover\", \"scroll-bottom\"],\n  props: { ...H,\n    options: {\n      type: Array,\n      default: () => []\n    },\n    noOptionsText: {\n      type: String,\n      default: \"Items not found\"\n    },\n    getSelectedState: {\n      type: Function,\n      required: !0\n    },\n    getText: {\n      type: Function,\n      required: !0\n    },\n    getTrackBy: {\n      type: Function,\n      required: !0\n    },\n    getGroupBy: {\n      type: Function,\n      required: !0\n    },\n    multiple: {\n      type: Boolean,\n      default: !1\n    },\n    search: {\n      type: String,\n      default: \"\"\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    },\n    hoveredOption: {\n      type: [String, Number, Object],\n      default: null\n    }\n  },\n\n  setup(e, {\n    emit: o\n  }) {\n    const {\n      getColor: n\n    } = L(),\n          a = t({}),\n          s = t(null),\n          i = r({\n      get: () => e.hoveredOption || null,\n      set: e => o(\"update:hoveredOption\", e)\n    }),\n          p = r(() => e.search ? e.options.filter(o => {\n      const t = e.getText(o).toString().toUpperCase(),\n            r = e.search.toUpperCase();\n      return t.includes(r);\n    }) : e.options),\n          c = r(() => p.value.reduce((o, t) => {\n      if (\"object\" == typeof t && t.group) {\n        const r = e.getGroupBy(t);\n        o[r] || (o[r] = []), o[r].push(t);\n      } else o._noGroup.push(t);\n\n      return o;\n    }, {\n      _noGroup: []\n    })),\n          isHovered = o => !!i.value && (\"string\" == typeof o ? o === i.value : !!e.getTrackBy && e.getTrackBy(i.value) === e.getTrackBy(o)),\n          updateHoveredOption = e => {\n      i.value = e || null;\n    },\n          u = r(() => p.value.findIndex(o => !!i.value && e.getTrackBy(o) === e.getTrackBy(i.value)));\n\n    l(() => e.hoveredOption, o => o && (o => {\n      if (!o) return;\n      const t = a.value[e.getTrackBy(o)];\n      t && ((e, o = {\n        scrollTarget: e.parentElement,\n        verticalAlignment: \"any\",\n        smooth: !1\n      }) => {\n        const t = o.scrollTarget || e.parentElement,\n              r = ((e, o, t) => {\n          const r = o.offsetHeight,\n                l = o.scrollTop,\n                n = (e => e.offsetTop)(e) - o.offsetTop,\n                a = (e => e.offsetTop + e.offsetHeight / 2)(e) - o.offsetTop,\n                s = (e => e.offsetTop + e.offsetHeight)(e) - o.offsetTop;\n\n          if (\"start\" === t) return n;\n          if (\"end\" === t) return s - r;\n          if (\"center\" === t) return a - r / 2;\n\n          if (\"any\" === t) {\n            if (n - l < 0) return n;\n            if (s - l > r) return s - r;\n          }\n        })(e, t, o.verticalAlignment);\n\n        void 0 !== r && t.scroll({\n          top: r,\n          behavior: o.smooth ? \"smooth\" : \"auto\"\n        });\n      })(t);\n    })(o));\n    const d = {\n      hoverPreviousOption: () => {\n        i.value ? p.value[u.value - 1] ? i.value = p.value[u.value - 1] : o(\"no-previous-option-to-hover\") : p.value.length && updateHoveredOption(p.value.at(-1));\n      },\n      hoverNextOption: () => {\n        i.value ? p.value[u.value + 1] && (i.value = p.value[u.value + 1]) : p.value.length && updateHoveredOption(p.value[0]);\n      },\n      hoverFirstOption: () => {\n        p.value.length > 0 && updateHoveredOption(p.value[0]);\n      },\n      focus: () => {\n        var e;\n        null === (e = s.value) || void 0 === e || e.focus({\n          preventScroll: !0\n        });\n      }\n    };\n    return {\n      getColor: n,\n      filteredOptions: p,\n      optionGroups: c,\n      onScroll: ({\n        target: e\n      }) => {\n        e.scrollTop + e.clientHeight === e.scrollHeight && o(\"scroll-bottom\");\n      },\n      beforeUpdate: () => {\n        a.value = {};\n      },\n      setItemRef: o => t => {\n        t && (a.value[e.getTrackBy(o)] = t);\n      },\n      selectOption: e => o(\"select-option\", e),\n      getOptionIcon: e => \"object\" == typeof e && e.icon,\n      getOptionClass: o => ({\n        \"va-select-option-list__option\": !0,\n        \"va-select-option-list__option--selected\": e.getSelectedState(o)\n      }),\n      getOptionStyle: o => ({\n        color: e.getSelectedState(o) ? n(e.color) : \"inherit\",\n        backgroundColor: isHovered(o) ? M(n(e.color)) : \"transparent\"\n      }),\n      updateHoveredOption: updateHoveredOption,\n      ...d\n    };\n  },\n\n  methods: {\n    hoverPreviousOption() {\n      var e;\n      null === (e = this.rootElement) || void 0 === e || e.hoverPreviousOption();\n    },\n\n    hoverNextOption() {\n      var e;\n      null === (e = this.rootElement) || void 0 === e || e.hoverNextOption();\n    },\n\n    hoverFirstOption() {\n      var e;\n      null === (e = this.rootElement) || void 0 === e || e.hoverFirstOption();\n    },\n\n    focus() {\n      var e;\n      null === (e = this.rootElement) || void 0 === e || e.focus();\n    },\n\n    scrollToOption() {\n      var e;\n      null === (e = this.rootElement) || void 0 === e || e.scrollToOption();\n    }\n\n  }\n});\nconst Q = [\"tabindex\"],\n      X = {\n  key: 0,\n  class: \"va-select-option-list__group-name\"\n},\n      Y = [\"onClick\", \"onMouseover\"],\n      Z = {\n  key: 0,\n  class: \"va-select-option-list no-options\"\n};\nR(\":root{--va-select-option-list-display:flex;--va-select-option-list-flex-direction:column;--va-select-option-list-width:100%;--va-select-option-list-list-style:none;--va-select-option-list-max-height:200px;--va-select-option-list-group-name-padding:1rem 12px 0.375rem;--va-select-option-list-group-name-font-size:0.6rem;--va-select-option-list-group-name-color:var(--va-primary);--va-select-option-list-group-name-font-weight:700;--va-select-option-list-option-cursor:pointer;--va-select-option-list-option-display:flex;--va-select-option-list-option-align-items:center;--va-select-option-list-option-padding:0.375rem 12px;--va-select-option-list-option-min-height:2.25rem;--va-select-option-list-option-word-break:break-word;--va-select-option-list-icon-margin-right:0.5rem;--va-select-option-list-selected-icon-margin-left:auto;--va-select-option-list-selected-icon-font-size:0.8rem}.va-select-option-list{display:var(--va-select-option-list-display);flex-direction:var(--va-select-option-list-flex-direction);font-family:var(--va-font-family);list-style:var(--va-select-option-list-list-style);max-height:var(--va-select-option-list-max-height);overflow:auto;scrollbar-color:grey transparent;scrollbar-width:thin;width:var(--va-select-option-list-width)}.va-select-option-list::-webkit-scrollbar{height:4px;width:4px}.va-select-option-list::-webkit-scrollbar-track{border-radius:10px;box-shadow:none}.va-select-option-list::-webkit-scrollbar-thumb{background:grey;border-radius:2px;opacity:.3}.va-select-option-list__group-name{color:var(--va-select-option-list-group-name-color);font-size:var(--va-select-option-list-group-name-font-size);font-weight:var(--va-select-option-list-group-name-font-weight);padding:var(--va-select-option-list-group-name-padding);text-transform:uppercase}.va-select-option-list__option{align-items:var(--va-select-option-list-option-align-items);cursor:var(--va-select-option-list-option-cursor);display:var(--va-select-option-list-option-display);min-height:var(--va-select-option-list-option-min-height);padding:var(--va-select-option-list-option-padding);word-break:var(--va-select-option-list-option-word-break)}.va-select-option-list__option--icon{margin-right:var(--va-select-option-list-icon-margin-right)}.va-select-option-list__option--selected-icon{font-size:var(--va-select-option-list-selected-icon-font-size);margin-left:var(--va-select-option-list-selected-icon-margin-left)}.va-select-option-list.no-options{padding:.5rem}\"), J.render = function render$1(e, o, t, r, l, x) {\n  const O = n(\"va-icon\");\n  return a(), s(\"div\", {\n    class: \"va-select-option-list\",\n    ref: \"rootElement\",\n    tabindex: e.tabindex,\n    onKeydown: [o[0] || (o[0] = i(p((...o) => e.hoverPreviousOption && e.hoverPreviousOption(...o), [\"stop\", \"prevent\"]), [\"up\"])), o[1] || (o[1] = i(p((...o) => e.hoverPreviousOption && e.hoverPreviousOption(...o), [\"stop\", \"prevent\"]), [\"left\"])), o[2] || (o[2] = i(p((...o) => e.hoverNextOption && e.hoverNextOption(...o), [\"stop\", \"prevent\"]), [\"down\"])), o[3] || (o[3] = i(p((...o) => e.hoverNextOption && e.hoverNextOption(...o), [\"stop\", \"prevent\"]), [\"right\"]))],\n    onScrollPassive: o[4] || (o[4] = (...o) => e.onScroll && e.onScroll(...o))\n  }, [(a(!0), s(c, null, u(e.optionGroups, (o, t) => (a(), s(c, {\n    key: t\n  }, [\"_noGroup\" !== t ? (a(), s(\"span\", X, d(t), 1)) : v(\"v-if\", !0), (a(!0), s(c, null, u(o, o => (a(), s(\"div\", {\n    key: e.$props.getTrackBy(o),\n    ref: e.setItemRef(o),\n    class: m(e.getOptionClass(o)),\n    style: g(e.getOptionStyle(o)),\n    onClick: p(t => e.selectOption(o), [\"stop\"]),\n    onMouseover: t => e.updateHoveredOption(o)\n  }, [e.getOptionIcon(o) ? (a(), f(O, {\n    key: 0,\n    size: \"small\",\n    class: \"va-select-option-list__option--icon\",\n    name: e.getOptionIcon(o)\n  }, null, 8, [\"name\"])) : v(\"v-if\", !0), h(\"span\", null, d(e.getText(o)), 1), y(b(O, {\n    class: \"va-select-option-list__option--selected-icon\",\n    size: \"small\",\n    name: \"done\",\n    color: e.getColor(e.$props.color)\n  }, null, 8, [\"color\"]), [[w, e.$props.getSelectedState(o)]])], 46, Y))), 128))], 64))), 128)), e.filteredOptions.length ? v(\"v-if\", !0) : (a(), s(\"div\", Z, d(e.noOptionsText), 1))], 40, Q);\n}, J.__file = \"src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue\";\nvar ee = e(J);\nconst {\n  getHoverColor: oe\n} = L();\nvar te = o({\n  name: \"VaSelect\",\n  components: {\n    VaSelectOptionList: ee,\n    VaIcon: K,\n    VaDropdown: G,\n    VaDropdownContent: z,\n    VaInput: U\n  },\n  emits: [\"update:modelValue\", \"update-search\", \"create-new\", \"scroll-bottom\", ...T, ...D],\n  props: { ...B,\n    ...V,\n    ...N,\n    ...W,\n    ...E,\n    ...A,\n    modelValue: {\n      type: [String, Number, Object],\n      default: \"\"\n    },\n    position: {\n      type: String,\n      default: \"bottom\",\n      validator: e => [\"top\", \"bottom\"].includes(e)\n    },\n    allowCreate: {\n      type: [Boolean, String],\n      default: !1,\n      validator: e => [!0, !1, \"unique\"].includes(e)\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    multiple: {\n      type: Boolean,\n      default: !1\n    },\n    searchable: {\n      type: Boolean,\n      default: !1\n    },\n    separator: {\n      type: String,\n      default: \", \"\n    },\n    width: {\n      type: String,\n      default: \"100%\"\n    },\n    maxHeight: {\n      type: String,\n      default: \"256px\"\n    },\n    noOptionsText: {\n      type: String,\n      default: \"Items not found\"\n    },\n    fixed: {\n      type: Boolean,\n      default: !0\n    },\n    hideSelected: {\n      type: Boolean,\n      default: !1\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    },\n    dropdownIcon: {\n      type: [String, Object],\n      default: () => ({\n        open: \"expand_more\",\n        close: \"expand_less\"\n      }),\n      validator: e => {\n        if (\"string\" == typeof e) return !0;\n        const o = \"string\" == typeof e.open,\n              t = \"string\" == typeof e.close;\n        return o && t;\n      }\n    },\n    outline: {\n      type: Boolean,\n      default: !1\n    },\n    bordered: {\n      type: Boolean,\n      default: !1\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    requiredMark: {\n      type: Boolean,\n      default: !1\n    }\n  },\n\n  setup(e, {\n    emit: o\n  }) {\n    const n = t(),\n          a = t(),\n          s = t(),\n          {\n      getOptionByValue: i,\n      getValue: p,\n      getText: c,\n      getTrackBy: u,\n      getGroupBy: d\n    } = j(e),\n          {\n      isFocused: v,\n      validate: m,\n      computedError: g,\n      computedErrorMessages: f\n    } = $(e, o, () => reset(), () => focus()),\n          {\n      colorComputed: h\n    } = P(e),\n          y = r(() => e.readonly ? oe(h.value) : h.value),\n          b = t(\"\"),\n          w = r(() => e.searchable || e.allowCreate);\n    l(() => b.value, e => {\n      o(\"update-search\", e), A.value = null;\n    });\n\n    const O = r({\n      get() {\n        const o = i(e.modelValue);\n        return e.multiple ? o ? Array.isArray(o) ? o : [o] : [] : Array.isArray(o) && (q(\"Model value should be a string or a number for a single Select.\"), o.length) ? o[o.length - 1] : o;\n      },\n\n      set(e) {\n        o(\"update:modelValue\", p(e));\n      }\n\n    }),\n          S = r(() => O.value ? \"string\" == typeof O.value || \"number\" == typeof O.value ? O.value : Array.isArray(O.value) ? O.value.map(e => c(e)).join(e.separator) || e.clearValue : c(O.value) : e.clearValue),\n          {\n      canBeCleared: k,\n      clearIconProps: C\n    } = F(e, O, v, g),\n          _ = r(() => e.multiple ? !!O.value.length : k.value),\n          I = r(() => e.dropdownIcon ? \"string\" == typeof e.dropdownIcon ? e.dropdownIcon : N.value ? e.dropdownIcon.close : e.dropdownIcon.open : \"\"),\n          B = r(() => e.options ? e.hideSelected ? e.options.filter(e => !checkIsOptionSelected(e)) : e.options : []),\n          checkIsOptionSelected = e => !!O.value && (Array.isArray(O.value) ? !!O.value.find(o => compareOptions(o, e)) : compareOptions(O.value, e)),\n          compareOptions = (e, o) => e === o || (\"string\" == typeof e && \"string\" == typeof o ? e === o : null !== e && null !== o && \"object\" == typeof e && \"object\" == typeof o && u(e) === u(o)),\n          {\n      exceedsMaxSelections: T,\n      addOption: V\n    } = function useMaxSelections(e, o, t) {\n      return {\n        exceedsMaxSelections: () => void 0 !== o.value && !isNaN(+o.value) && e.value.length >= o.value,\n        addOption: o => {\n          const r = [...e.value, o];\n          t(\"update:modelValue\", r);\n        }\n      };\n    }(O, t(e.maxSelections), o),\n          selectOption = o => {\n      if (null !== A.value) {\n        if (w.value && (b.value = \"\"), e.multiple) {\n          if (checkIsOptionSelected(o)) O.value = O.value.filter(e => !compareOptions(o, e));else {\n            if (T()) return;\n            V(o);\n          }\n        } else O.value = \"string\" == typeof o || \"number\" == typeof o ? o : { ...o\n        }, hideDropdown();\n      } else hideDropdown();\n    },\n          allowedToCreate = () => !(!e.allowCreate || \"\" === b.value),\n          addNewOption = () => {\n      var t;\n      const r = null === (t = e.options) || void 0 === t ? void 0 : t.some(e => c(e) === b.value);\n      \"unique\" === e.allowCreate && r || (o(\"create-new\", b.value), b.value = \"\");\n    },\n          A = t(null),\n          selectHoveredOption = () => {\n      N.value ? selectOption(A.value) : showDropdown();\n    },\n          N = t(!1),\n          H = r({\n      get: () => N.value,\n      set: e => {\n        e ? showDropdown() : hideDropdown();\n      }\n    }),\n          D = r(() => !(e.multiple || e.searchable || e.allowCreate)),\n          showDropdown = () => {\n      e.disabled || e.readonly || (N.value = !0, scrollToSelected(), focusSearchOrOptions());\n    },\n          hideDropdown = () => {\n      var e;\n      N.value = !1, b.value = \"\", m(), null === (e = a.value) || void 0 === e || e.focus();\n    },\n          toggleDropdown = () => {\n      N.value ? hideDropdown() : showDropdown();\n    },\n          focusSearchBar = () => {\n      var e;\n      null === (e = s.value) || void 0 === e || e.focus();\n    },\n          focusOptionList = () => {\n      var e, o;\n      null === (e = n.value) || void 0 === e || e.focus(), null === (o = n.value) || void 0 === o || o.hoverFirstOption();\n    },\n          focusSearchOrOptions = () => {\n      x(() => {\n        w.value ? focusSearchBar() : focusOptionList();\n      });\n    },\n          focus = () => {\n      var o;\n      e.disabled || null === (o = a.value) || void 0 === o || o.focus();\n    },\n          reset = () => {\n      e.multiple ? O.value = Array.isArray(e.clearValue) ? e.clearValue : [] : O.value = e.clearValue, b.value = \"\", o(\"clear\");\n    },\n          E = r(() => e.disabled ? -1 : e.tabindex),\n          scrollToSelected = () => {\n      const e = O.value;\n      if (!e.length && \"object\" != typeof e) return;\n      const o = Array.isArray(e) ? e[e.length - 1] : e;\n      A.value = o, x(() => {\n        var e;\n        return null === (e = n.value) || void 0 === e ? void 0 : e.scrollToOption(o);\n      });\n    };\n\n    let L,\n        M = \"\";\n    const G = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Enter\", \" \"];\n    return {\n      input: a,\n      optionList: n,\n      searchBar: s,\n      onInputFocus: () => {\n        v.value || (v.value = !0);\n      },\n      onInputBlur: () => {\n        H.value || (v.value ? v.value = !1 : m());\n      },\n      focusOptionList: focusOptionList,\n      reset: reset,\n      onSelectClick: () => {\n        e.disabled || e.readonly || toggleDropdown();\n      },\n      focusSearchBar: focusSearchBar,\n      searchInput: b,\n      showSearchInput: w,\n      hoveredOption: A,\n      tabIndexComputed: E,\n      valueComputed: O,\n      valueComputedString: S,\n      showClearIcon: _,\n      toggleIcon: I,\n      computedErrorMessages: f,\n      computedError: g,\n      filteredOptions: B,\n      checkIsOptionSelected: checkIsOptionSelected,\n      closeOnContentClick: D,\n      selectOption: selectOption,\n      selectOrAddOption: () => {\n        null === A.value ? allowedToCreate() && addNewOption() : selectHoveredOption();\n      },\n      selectHoveredOption: selectHoveredOption,\n      hoverPreviousOption: () => {\n        var e;\n        null === (e = n.value) || void 0 === e || e.hoverPreviousOption();\n      },\n      hoverNextOption: () => {\n        var e;\n        null === (e = n.value) || void 0 === e || e.hoverNextOption();\n      },\n      showDropdownContentComputed: H,\n      showDropdown: showDropdown,\n      hideDropdown: hideDropdown,\n      toggleDropdown: toggleDropdown,\n      toggleIconColor: y,\n      onHintedSearch: o => {\n        if (G.some(e => e === o.key)) return;\n        const t = 1 === o.key.length,\n              r = \"Backspace\" === o.key || \"Delete\" === o.key;\n        if (clearTimeout(L), r ? M = M ? M.slice(0, -1) : \"\" : t && (M += o.key), w.value) b.value = M;else {\n          if (M) {\n            const o = e.options.find(e => c(e).toLowerCase().startsWith(M.toLowerCase()));\n            o && (A.value = o);\n          }\n\n          L = setTimeout(() => {\n            M = \"\";\n          }, 1e3);\n        }\n      },\n      getText: c,\n      getTrackBy: u,\n      getGroupBy: d,\n      onScrollBottom: () => {\n        o(\"scroll-bottom\");\n      },\n      clearIconProps: C\n    };\n  },\n\n  methods: {\n    focus() {\n      var e;\n      this.$props.disabled || null === (e = this.input) || void 0 === e || e.focus();\n    },\n\n    blur() {\n      var e;\n      this.showDropdownContentComputed ? (this.showDropdownContentComputed = !1, x(() => {\n        var e;\n        null === (e = this.input) || void 0 === e || e.blur();\n      })) : null === (e = this.input) || void 0 === e || e.blur();\n    }\n\n  }\n});\nconst re = {\n  class: \"va-select\"\n},\n      le = {\n  class: \"va-select-dropdown__options-wrapper\"\n};\nR(\":root{--va-select-cursor:pointer;--va-select-dropdown-border-radius:4px;--va-select-dropdown-background:#fff;--va-select-scroll-color:grey;--va-select-box-shadow:0 4px 8px rgba(59,63,73,0.15)}.va-select,.va-select .va-input{cursor:var(--va-select-cursor)}.va-select-dropdown .va-dropdown__anchor{display:block}.va-select-dropdown__content{border-bottom-left-radius:var(--va-select-dropdown-border-radius);border-bottom-right-radius:var(--va-select-dropdown-border-radius);border-top-left-radius:0;border-top-right-radius:0;box-shadow:var(--va-select-box-shadow);overflow:hidden;padding:0}.va-select-dropdown__options-wrapper{background:var(--va-select-dropdown-background);overflow-y:auto;scrollbar-color:var(--va-select-scroll-color) transparent;scrollbar-width:thin}.va-select-dropdown__options-wrapper::-webkit-scrollbar{height:4px;width:4px}.va-select-dropdown__options-wrapper::-webkit-scrollbar-track{border-radius:10px;box-shadow:none}.va-select-dropdown__options-wrapper::-webkit-scrollbar-thumb{background:var(--va-select-scroll-color);border-radius:2px;opacity:.3}\"), te.render = function render(e, o, t, r, l, s) {\n  const c = n(\"va-icon\"),\n        u = n(\"va-input\"),\n        d = n(\"va-select-option-list\"),\n        m = n(\"va-dropdown-content\"),\n        y = n(\"va-dropdown\");\n  return a(), f(y, {\n    ref: \"dropdown\",\n    class: \"va-select__dropdown va-select-dropdown\",\n    trigger: \"none\",\n    anchorSelector: \".va-input-wrapper__input\",\n    position: e.$props.position,\n    disabled: e.$props.disabled,\n    \"max-height\": e.$props.maxHeight,\n    fixed: e.$props.fixed,\n    \"close-on-content-click\": e.closeOnContentClick,\n    stateful: !1,\n    offset: [0, 1],\n    \"keep-anchor-width\": \"\",\n    modelValue: e.showDropdownContentComputed,\n    \"onUpdate:modelValue\": o[18] || (o[18] = o => e.showDropdownContentComputed = o),\n    onKeydown: [o[19] || (o[19] = i(p(o => e.showDropdown(), [\"stop\", \"prevent\"]), [\"up\"])), o[20] || (o[20] = i(p(o => e.showDropdown(), [\"stop\", \"prevent\"]), [\"down\"])), o[21] || (o[21] = i(p(o => e.showDropdown(), [\"stop\", \"prevent\"]), [\"space\"]))],\n    onClick: o[22] || (o[22] = p(o => e.onSelectClick(), [\"prevent\"]))\n  }, {\n    anchor: O(() => [h(\"div\", re, [b(u, {\n      ref: \"input\",\n      \"model-value\": e.valueComputedString,\n      success: e.$props.success,\n      error: e.computedError,\n      color: e.$props.color,\n      label: e.$props.label,\n      placeholder: e.$props.placeholder,\n      loading: e.$props.loading,\n      disabled: e.$props.disabled,\n      outline: e.$props.outline,\n      bordered: e.$props.bordered,\n      \"required-mark\": e.$props.requiredMark,\n      tabindex: e.tabIndexComputed,\n      messages: e.$props.messages,\n      \"error-messages\": e.computedErrorMessages,\n      readonly: \"\",\n      onFocus: o[1] || (o[1] = o => e.onInputFocus()),\n      onBlur: o[2] || (o[2] = o => e.onInputBlur())\n    }, S({\n      icon: O(() => [e.showClearIcon ? (a(), f(c, k({\n        key: 0\n      }, e.clearIconProps, {\n        onClick: o[0] || (o[0] = p(o => e.reset(), [\"stop\"]))\n      }), null, 16)) : v(\"v-if\", !0)]),\n      appendInner: O(() => [e.$slots.appendInner ? C(e.$slots, \"appendInner\", {\n        key: 0\n      }) : v(\"v-if\", !0), b(c, {\n        color: e.toggleIconColor,\n        name: e.toggleIcon\n      }, null, 8, [\"color\", \"name\"])]),\n      _: 2\n    }, [e.$slots.prepend ? {\n      name: \"prepend\",\n      fn: O(() => [C(e.$slots, \"prepend\")])\n    } : void 0, e.$slots.append ? {\n      name: \"append\",\n      fn: O(() => [C(e.$slots, \"append\")])\n    } : void 0, e.$slots.prependInner ? {\n      name: \"prependInner\",\n      fn: O(() => [C(e.$slots, \"prependInner\")])\n    } : void 0, e.$slots.content ? {\n      name: \"content\",\n      fn: O(() => [C(e.$slots, \"content\", _(I({\n        valueString: e.valueComputedString,\n        value: e.valueComputed\n      })))])\n    } : void 0]), 1032, [\"model-value\", \"success\", \"error\", \"color\", \"label\", \"placeholder\", \"loading\", \"disabled\", \"outline\", \"bordered\", \"required-mark\", \"tabindex\", \"messages\", \"error-messages\"])])]),\n    default: O(() => [b(m, {\n      class: \"va-select-dropdown__content\",\n      style: g({\n        width: e.$props.width\n      }),\n      onKeyup: o[15] || (o[15] = i(p(() => {}, [\"stop\"]), [\"enter\"])),\n      onKeydown: [o[16] || (o[16] = i(p(() => {}, [\"stop\", \"prevent\"]), [\"tab\"])), o[17] || (o[17] = i(p(o => e.hideDropdown(), [\"prevent\"]), [\"esc\"]))]\n    }, {\n      default: O(() => [e.showSearchInput ? (a(), f(u, {\n        key: 0,\n        ref: \"searchBar\",\n        class: \"va-select__input\",\n        placeholder: \"Search\",\n        tabindex: e.tabindex + 1,\n        bordered: !0,\n        modelValue: e.searchInput,\n        \"onUpdate:modelValue\": o[3] || (o[3] = o => e.searchInput = o),\n        onKeydown: [o[4] || (o[4] = i(p(o => e.hoverPreviousOption(), [\"stop\", \"prevent\"]), [\"up\"])), o[5] || (o[5] = i(p(o => e.hoverPreviousOption(), [\"stop\", \"prevent\"]), [\"left\"])), o[6] || (o[6] = i(p(o => e.hoverNextOption(), [\"stop\", \"prevent\"]), [\"down\"])), o[7] || (o[7] = i(p(o => e.hoverNextOption(), [\"stop\", \"prevent\"]), [\"right\"])), o[8] || (o[8] = i(p(o => e.selectOrAddOption(), [\"prevent\"]), [\"enter\"]))],\n        onFocus: o[9] || (o[9] = o => e.hoveredOption = null)\n      }, null, 8, [\"tabindex\", \"modelValue\"])) : v(\"v-if\", !0), h(\"div\", le, [b(d, {\n        ref: \"optionList\",\n        hoveredOption: e.hoveredOption,\n        \"onUpdate:hoveredOption\": o[10] || (o[10] = o => e.hoveredOption = o),\n        style: g({\n          maxHeight: e.$props.maxHeight\n        }),\n        options: e.filteredOptions,\n        \"selected-value\": e.valueComputed,\n        \"get-selected-state\": e.checkIsOptionSelected,\n        \"get-text\": e.getText,\n        \"get-track-by\": e.getTrackBy,\n        \"get-group-by\": e.getGroupBy,\n        search: e.searchInput,\n        \"no-options-text\": e.$props.noOptionsText,\n        color: e.$props.color,\n        tabindex: e.tabindex + 1,\n        onSelectOption: e.selectOption,\n        onNoPreviousOptionToHover: o[11] || (o[11] = o => e.focusSearchBar()),\n        onKeydown: [o[12] || (o[12] = i(p(o => e.selectHoveredOption(), [\"stop\", \"prevent\"]), [\"enter\"])), o[13] || (o[13] = i(p(o => e.selectHoveredOption(), [\"stop\", \"prevent\"]), [\"space\"])), o[14] || (o[14] = i(p(o => e.searchBar && e.searchBar.focus(), [\"stop\", \"prevent\"]), [\"tab\"])), e.onHintedSearch],\n        onScrollBottom: e.onScrollBottom\n      }, null, 8, [\"hoveredOption\", \"style\", \"options\", \"selected-value\", \"get-selected-state\", \"get-text\", \"get-track-by\", \"get-group-by\", \"search\", \"no-options-text\", \"color\", \"tabindex\", \"onSelectOption\", \"onKeydown\", \"onScrollBottom\"])])]),\n      _: 1\n    }, 8, [\"style\"])]),\n    _: 3\n  }, 8, [\"position\", \"disabled\", \"max-height\", \"fixed\", \"close-on-content-click\", \"modelValue\"]);\n}, te.__file = \"src/components/va-select/VaSelect.vue\";\nconst ne = e(J);\nvar ae = e(te);\nexport { ne as VaSelectOptionList, ae as default };","map":{"version":3,"mappings":"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","names":["useMaxSelectionsProps","maxSelections","type","Number","String","default","undefined","defineComponent","name","components","VaIcon","emits","props","useColorProps","options","Array","noOptionsText","getSelectedState","Function","required","getText","getTrackBy","getGroupBy","multiple","Boolean","search","tabindex","hoveredOption","Object","setup","emit","getColor","useColors","itemRefs","ref","rootElement","hoveredOptionComputed","computed","get","set","value","filteredOptions","filter","option","optionText","toString","toUpperCase","includes","optionGroups","reduce","groups","group","groupBy","push","_noGroup","isHovered","updateHoveredOption","hoveredOptionIndex","findIndex","watch","newOption","element","scrollTarget","parentElement","verticalAlignment","smooth","top","viewHeight","offsetHeight","currentPosition","scrollTop","offsetTop","center","bottom","scroll","behavior","publicMethods","hoverPreviousOption","length","at","hoverNextOption","hoverFirstOption","focus","preventScroll","onScroll","target","clientHeight","scrollHeight","beforeUpdate","setItemRef","el","selectOption","getOptionIcon","icon","getOptionClass","getOptionStyle","color","backgroundColor","getHoverColor","methods","this","scrollToOption","class","Y","Z","key","R","_createElementBlock","_ctx","onKeydown","groupName","_hoisted_2","style","onClick","onMouseover","_createBlock","size","_createElementVNode","_createVNode","_hoisted_4","withConfigTransport","VaSelectOptionList","VaDropdown","VaDropdownContent","VaInput","useValidationEmits","useClearableEmits","useSelectableListProps","useValidationProps","useLoadingProps","useClearableProps","useFormProps","modelValue","position","validator","allowCreate","mode","searchable","separator","width","maxHeight","fixed","hideSelected","dropdownIcon","open","close","isOpenIconString","isCloseIconString","outline","bordered","label","placeholder","requiredMark","optionList","input","searchBar","getOptionByValue","getValue","useSelectableList","isFocused","validate","computedError","computedErrorMessages","useValidation","reset","colorComputed","useColor","toggleIconColor","readonly","searchInput","showSearchInput","valueComputed","isArray","warn","valueComputedString","map","join","clearValue","canBeCleared","clearIconProps","useClearable","showClearIcon","toggleIcon","showDropdownContent","checkIsOptionSelected","find","valueItem","compareOptions","one","two","exceedsMaxSelections","addOption","useMaxSelections","selections","isNaN","optionToAdd","newSelectedOptions","optionSelected","hideDropdown","allowedToCreate","addNewOption","hasAddedOption","some","selectHoveredOption","showDropdown","showDropdownContentComputed","show","closeOnContentClick","disabled","scrollToSelected","focusSearchOrOptions","toggleDropdown","focusSearchBar","focusOptionList","nextTick","tabIndexComputed","selected","scrollTo","hintedSearchQueryTimeoutIndex","hintedSearchQuery","navigationKeys","onInputFocus","onInputBlur","onSelectClick","selectOrAddOption","onHintedSearch","event","isLetter","isDeleteKey","clearTimeout","slice","appropriateOption","toLowerCase","startsWith","setTimeout","onScrollBottom","$props","blur","le","trigger","anchorSelector","stateful","offset","anchor","success","error","loading","messages","onFocus","onBlur","a","_mergeProps","appendInner","_renderSlot","prepend","fn","append","prependInner","content","_hoisted_1","onKeyup","o","onSelectOption","onNoPreviousOptionToHover","VaSelectOptionListBase","VaSelect"],"sources":["../../src/composables/useMaxSelections.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue","../../src/utils/scroll-to-element.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue?vue&type=template&id=59030744&lang.js","../../src/components/va-select/VaSelectOptionList/index.ts","../../src/components/va-select/VaSelect.vue","../../src/components/va-select/VaSelect.vue?vue&type=template&id=ef3afb70&lang.js","../../src/components/va-select/index.ts"],"sourcesContent":["import { PropType, Ref } from 'vue'\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useMaxSelectionsProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useMaxSelectionsProps = {\n  maxSelections: {\n    type: [Number, String] as PropType<number | string>,\n    default: undefined,\n  },\n}\n\nexport function useMaxSelections (\n  selections: Ref<any[]>,\n  maxSelections: Ref<number | string | undefined>,\n  emit: (event: 'update:modelValue', ...args: any[]) => void,\n) {\n  const exceedsMaxSelections = (): boolean => {\n    if (maxSelections.value === undefined || isNaN(+maxSelections.value)) { return false }\n    return selections.value.length >= maxSelections.value\n  }\n\n  const addOption = (optionToAdd: any): void => {\n    const newSelectedOptions = [...selections.value, optionToAdd]\n    emit('update:modelValue', newSelectedOptions)\n  }\n\n  return {\n    exceedsMaxSelections,\n    addOption,\n  }\n}\n","<template>\n  <div\n    class=\"va-select-option-list\"\n    ref=\"rootElement\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\n    @keydown.down.stop.prevent=\"hoverNextOption\"\n    @keydown.right.stop.prevent=\"hoverNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <div\n        v-for=\"option in options\"\n        :key=\"$props.getTrackBy(option)\"\n        :ref=\"setItemRef(option)\"\n        :class=\"getOptionClass(option)\"\n        :style=\"getOptionStyle(option)\"\n        @click.stop=\"selectOption(option)\"\n        @mouseover=\"updateHoveredOption(option)\"\n      >\n        <va-icon\n          v-if=\"getOptionIcon(option)\"\n          size=\"small\"\n          class=\"va-select-option-list__option--icon\"\n          :name=\"getOptionIcon(option)\"\n        />\n        <span>{{ getText(option) }}</span>\n        <va-icon\n          v-show=\"$props.getSelectedState(option)\"\n          class=\"va-select-option-list__option--selected-icon\"\n          size=\"small\"\n          name=\"done\"\n          :color=\"getColor($props.color)\"\n        />\n      </div>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list no-options\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, watch, ref, Ref, computed } from 'vue'\n\nimport { getHoverColor } from '../../../services/color-config/color-functions'\nimport { useColors, useColorProps } from '../../../composables/useColor'\nimport { SelectableOption } from '../../..//composables/useSelectableList'\nimport VaIcon from '../../va-icon/'\nimport { scrollToElement } from '../../../utils/scroll-to-element'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaIcon },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    getGroupBy: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    search: { type: String as PropType<string>, default: '' },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    hoveredOption: {\n      type: [String, Number, Object] as PropType<SelectableOption | null>,\n      default: null,\n    },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n\n    const itemRefs: Ref<Record<number, HTMLElement>> = ref({})\n    const rootElement: Ref<HTMLElement | null> = ref(null)\n\n    const onScroll = ({ target }: { target: HTMLDivElement }) => {\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        emit('scroll-bottom')\n      }\n    }\n\n    const beforeUpdate = () => { itemRefs.value = {} }\n\n    const setItemRef = (option: SelectableOption) => (el: HTMLElement) => {\n      if (el) {\n        itemRefs.value[props.getTrackBy(option)] = el\n      }\n    }\n\n    const hoveredOptionComputed = computed({\n      get: () => props.hoveredOption || null,\n      set: (value: SelectableOption | null) => emit('update:hoveredOption', value),\n    })\n\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options\n      }\n\n      return props.options.filter((option: SelectableOption) => {\n        const optionText = props.getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups: Record<string, SelectableOption[]>, option) => {\n      if (typeof option !== 'object' || !option.group) {\n        groups._noGroup.push(option)\n      } else {\n        const groupBy = props.getGroupBy(option)\n\n        if (!groups[groupBy]) { groups[groupBy] = [] }\n\n        groups[groupBy].push(option)\n      }\n\n      return groups\n    }, { _noGroup: [] }))\n\n    const selectOption = (option: SelectableOption) => emit('select-option', option)\n\n    const getOptionIcon = (option: SelectableOption) => typeof option === 'object' && option.icon\n\n    const getOptionClass = (option: SelectableOption) => ({\n      'va-select-option-list__option': true,\n      'va-select-option-list__option--selected': props.getSelectedState(option),\n    })\n\n    const getOptionStyle = (option: SelectableOption) => ({\n      color: props.getSelectedState(option) ? getColor(props.color) : 'inherit',\n      backgroundColor: isHovered(option) ? getHoverColor(getColor(props.color)) : 'transparent',\n    })\n\n    const isHovered = (option: SelectableOption) => {\n      if (!hoveredOptionComputed.value) { return false }\n      if (typeof option === 'string') { return option === hoveredOptionComputed.value }\n      if (!props.getTrackBy) { return false }\n\n      return props.getTrackBy(hoveredOptionComputed.value) === props.getTrackBy(option)\n    }\n\n    const updateHoveredOption = (option?: SelectableOption) => { hoveredOptionComputed.value = option || null }\n\n    const hoveredOptionIndex = computed(() => filteredOptions.value.findIndex((option) => {\n      return !!hoveredOptionComputed.value && props.getTrackBy(option) === props.getTrackBy(hoveredOptionComputed.value)\n    }))\n\n    const hoverPreviousOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover last option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value.at(-1))\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value - 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value - 1]\n        } else {\n          emit('no-previous-option-to-hover')\n        }\n      }\n    }\n\n    const hoverNextOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover first option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value[0])\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value + 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value + 1]\n        }\n      }\n    }\n\n    const hoverFirstOption = () => {\n      if (filteredOptions.value.length > 0) {\n        updateHoveredOption(filteredOptions.value[0])\n      }\n    }\n\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it cause scrolling to page end.\n      rootElement.value?.focus({ preventScroll: true })\n    }\n\n    const scrollToOption = (option: SelectableOption) => {\n      if (!option) { return }\n\n      const element = itemRefs.value[props.getTrackBy(option)]\n\n      if (element) {\n        scrollToElement(element)\n      }\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectableOption | null) => newOption && scrollToOption(newOption))\n\n    const publicMethods = {\n      hoverPreviousOption,\n      hoverNextOption,\n      hoverFirstOption,\n      focus,\n    }\n\n    return {\n      getColor,\n      filteredOptions,\n      optionGroups,\n      onScroll,\n      beforeUpdate,\n      setItemRef,\n      selectOption,\n      getOptionIcon,\n      getOptionClass,\n      getOptionStyle,\n      updateHoveredOption,\n      ...publicMethods,\n    }\n  },\n\n  // we will use this while we have 'withConfigTransport'\n  methods: {\n    hoverPreviousOption () { (this as any).rootElement?.hoverPreviousOption() },\n    hoverNextOption () { (this as any).rootElement?.hoverNextOption() },\n    hoverFirstOption () { (this as any).rootElement?.hoverFirstOption() },\n    focus () { (this as any).rootElement?.focus() },\n    scrollToOption () { (this as any).rootElement?.scrollToOption() },\n\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  display: var(--va-select-option-list-display);\n  flex-direction: var(--va-select-option-list-flex-direction);\n  width: var(--va-select-option-list-width);\n  list-style: var(--va-select-option-list-list-style);\n  max-height: var(--va-select-option-list-max-height);\n  font-family: var(--va-font-family);\n  overflow: auto;\n\n  @include va-scroll();\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: uppercase;\n  }\n\n  &__option {\n    cursor: var(--va-select-option-list-option-cursor);\n    display: var(--va-select-option-list-option-display);\n    align-items: var(--va-select-option-list-option-align-items);\n    padding: var(--va-select-option-list-option-padding);\n    min-height: var(--va-select-option-list-option-min-height);\n    word-break: var(--va-select-option-list-option-word-break);\n\n    &--icon {\n      margin-right: var(--va-select-option-list-icon-margin-right);\n    }\n\n    &--selected-icon {\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\n      font-size: var(--va-select-option-list-selected-icon-font-size);\n    }\n  }\n\n  &.no-options {\n    padding: 0.5rem;\n  }\n}\n</style>\n","const getTopCoordinate = (element: HTMLElement) => element.offsetTop\nconst getBottomCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight\nconst getCenterCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight / 2\n\nconst getScrollTop = (element: HTMLElement, scrollTarget: HTMLElement, verticalAlignment?: 'start' | 'end' | 'center' | 'any') => {\n  const viewHeight = scrollTarget.offsetHeight\n  const currentPosition = scrollTarget.scrollTop\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop\n\n  if (verticalAlignment === 'start') {\n    return top\n  }\n\n  if (verticalAlignment === 'end') {\n    return bottom - viewHeight\n  }\n\n  if (verticalAlignment === 'center') {\n    return center - viewHeight / 2\n  }\n\n  if (verticalAlignment === 'any') {\n    if (top - currentPosition < 0) {\n      return top\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight\n    }\n  }\n}\n\n/**\n * @param options.scrollTarget - element that will be scrolled\n */\nexport const scrollToElement = (element: HTMLElement, options: {\n  scrollTarget?: HTMLElement,\n  verticalAlignment?: 'start' | 'end' | 'center' | 'any',\n  smooth?: boolean,\n} = {\n  scrollTarget: element.parentElement!,\n  verticalAlignment: 'any',\n  smooth: false,\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement!\n\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment)\n\n  if (top === undefined) { return }\n\n  scrollTarget.scroll({\n    top: top,\n    behavior: options.smooth ? 'smooth' : 'auto',\n  })\n}\n","<template>\n  <div\n    class=\"va-select-option-list\"\n    ref=\"rootElement\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\n    @keydown.down.stop.prevent=\"hoverNextOption\"\n    @keydown.right.stop.prevent=\"hoverNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <div\n        v-for=\"option in options\"\n        :key=\"$props.getTrackBy(option)\"\n        :ref=\"setItemRef(option)\"\n        :class=\"getOptionClass(option)\"\n        :style=\"getOptionStyle(option)\"\n        @click.stop=\"selectOption(option)\"\n        @mouseover=\"updateHoveredOption(option)\"\n      >\n        <va-icon\n          v-if=\"getOptionIcon(option)\"\n          size=\"small\"\n          class=\"va-select-option-list__option--icon\"\n          :name=\"getOptionIcon(option)\"\n        />\n        <span>{{ getText(option) }}</span>\n        <va-icon\n          v-show=\"$props.getSelectedState(option)\"\n          class=\"va-select-option-list__option--selected-icon\"\n          size=\"small\"\n          name=\"done\"\n          :color=\"getColor($props.color)\"\n        />\n      </div>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list no-options\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, watch, ref, Ref, computed } from 'vue'\n\nimport { getHoverColor } from '../../../services/color-config/color-functions'\nimport { useColors, useColorProps } from '../../../composables/useColor'\nimport { SelectableOption } from '../../..//composables/useSelectableList'\nimport VaIcon from '../../va-icon/'\nimport { scrollToElement } from '../../../utils/scroll-to-element'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaIcon },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    getGroupBy: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    search: { type: String as PropType<string>, default: '' },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    hoveredOption: {\n      type: [String, Number, Object] as PropType<SelectableOption | null>,\n      default: null,\n    },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n\n    const itemRefs: Ref<Record<number, HTMLElement>> = ref({})\n    const rootElement: Ref<HTMLElement | null> = ref(null)\n\n    const onScroll = ({ target }: { target: HTMLDivElement }) => {\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        emit('scroll-bottom')\n      }\n    }\n\n    const beforeUpdate = () => { itemRefs.value = {} }\n\n    const setItemRef = (option: SelectableOption) => (el: HTMLElement) => {\n      if (el) {\n        itemRefs.value[props.getTrackBy(option)] = el\n      }\n    }\n\n    const hoveredOptionComputed = computed({\n      get: () => props.hoveredOption || null,\n      set: (value: SelectableOption | null) => emit('update:hoveredOption', value),\n    })\n\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options\n      }\n\n      return props.options.filter((option: SelectableOption) => {\n        const optionText = props.getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups: Record<string, SelectableOption[]>, option) => {\n      if (typeof option !== 'object' || !option.group) {\n        groups._noGroup.push(option)\n      } else {\n        const groupBy = props.getGroupBy(option)\n\n        if (!groups[groupBy]) { groups[groupBy] = [] }\n\n        groups[groupBy].push(option)\n      }\n\n      return groups\n    }, { _noGroup: [] }))\n\n    const selectOption = (option: SelectableOption) => emit('select-option', option)\n\n    const getOptionIcon = (option: SelectableOption) => typeof option === 'object' && option.icon\n\n    const getOptionClass = (option: SelectableOption) => ({\n      'va-select-option-list__option': true,\n      'va-select-option-list__option--selected': props.getSelectedState(option),\n    })\n\n    const getOptionStyle = (option: SelectableOption) => ({\n      color: props.getSelectedState(option) ? getColor(props.color) : 'inherit',\n      backgroundColor: isHovered(option) ? getHoverColor(getColor(props.color)) : 'transparent',\n    })\n\n    const isHovered = (option: SelectableOption) => {\n      if (!hoveredOptionComputed.value) { return false }\n      if (typeof option === 'string') { return option === hoveredOptionComputed.value }\n      if (!props.getTrackBy) { return false }\n\n      return props.getTrackBy(hoveredOptionComputed.value) === props.getTrackBy(option)\n    }\n\n    const updateHoveredOption = (option?: SelectableOption) => { hoveredOptionComputed.value = option || null }\n\n    const hoveredOptionIndex = computed(() => filteredOptions.value.findIndex((option) => {\n      return !!hoveredOptionComputed.value && props.getTrackBy(option) === props.getTrackBy(hoveredOptionComputed.value)\n    }))\n\n    const hoverPreviousOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover last option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value.at(-1))\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value - 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value - 1]\n        } else {\n          emit('no-previous-option-to-hover')\n        }\n      }\n    }\n\n    const hoverNextOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover first option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value[0])\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value + 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value + 1]\n        }\n      }\n    }\n\n    const hoverFirstOption = () => {\n      if (filteredOptions.value.length > 0) {\n        updateHoveredOption(filteredOptions.value[0])\n      }\n    }\n\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it cause scrolling to page end.\n      rootElement.value?.focus({ preventScroll: true })\n    }\n\n    const scrollToOption = (option: SelectableOption) => {\n      if (!option) { return }\n\n      const element = itemRefs.value[props.getTrackBy(option)]\n\n      if (element) {\n        scrollToElement(element)\n      }\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectableOption | null) => newOption && scrollToOption(newOption))\n\n    const publicMethods = {\n      hoverPreviousOption,\n      hoverNextOption,\n      hoverFirstOption,\n      focus,\n    }\n\n    return {\n      getColor,\n      filteredOptions,\n      optionGroups,\n      onScroll,\n      beforeUpdate,\n      setItemRef,\n      selectOption,\n      getOptionIcon,\n      getOptionClass,\n      getOptionStyle,\n      updateHoveredOption,\n      ...publicMethods,\n    }\n  },\n\n  // we will use this while we have 'withConfigTransport'\n  methods: {\n    hoverPreviousOption () { (this as any).rootElement?.hoverPreviousOption() },\n    hoverNextOption () { (this as any).rootElement?.hoverNextOption() },\n    hoverFirstOption () { (this as any).rootElement?.hoverFirstOption() },\n    focus () { (this as any).rootElement?.focus() },\n    scrollToOption () { (this as any).rootElement?.scrollToOption() },\n\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  display: var(--va-select-option-list-display);\n  flex-direction: var(--va-select-option-list-flex-direction);\n  width: var(--va-select-option-list-width);\n  list-style: var(--va-select-option-list-list-style);\n  max-height: var(--va-select-option-list-max-height);\n  font-family: var(--va-font-family);\n  overflow: auto;\n\n  @include va-scroll();\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: uppercase;\n  }\n\n  &__option {\n    cursor: var(--va-select-option-list-option-cursor);\n    display: var(--va-select-option-list-option-display);\n    align-items: var(--va-select-option-list-option-align-items);\n    padding: var(--va-select-option-list-option-padding);\n    min-height: var(--va-select-option-list-option-min-height);\n    word-break: var(--va-select-option-list-option-word-break);\n\n    &--icon {\n      margin-right: var(--va-select-option-list-icon-margin-right);\n    }\n\n    &--selected-icon {\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\n      font-size: var(--va-select-option-list-selected-icon-font-size);\n    }\n  }\n\n  &.no-options {\n    padding: 0.5rem;\n  }\n}\n</style>\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\nimport VaSelectOptionList from './VaSelectOptionList.vue'\n\nexport default withConfigTransport(VaSelectOptionList)\n","<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select__dropdown va-select-dropdown\"\n    trigger=\"none\"\n    anchorSelector=\".va-input-wrapper__input\"\n    :position=\"$props.position\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :fixed=\"$props.fixed\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[0, 1]\"\n    keep-anchor-width\n    v-model=\"showDropdownContentComputed\"\n    @keydown.up.stop.prevent=\"showDropdown()\"\n    @keydown.down.stop.prevent=\"showDropdown()\"\n    @keydown.space.stop.prevent=\"showDropdown()\"\n    @click.prevent=\"onSelectClick()\"\n  >\n    <template #anchor>\n      <div class=\"va-select\">\n        <va-input\n          ref=\"input\"\n          :model-value=\"valueComputedString\"\n          :success=\"$props.success\"\n          :error=\"computedError\"\n          :color=\"$props.color\"\n          :label=\"$props.label\"\n          :placeholder=\"$props.placeholder\"\n          :loading=\"$props.loading\"\n          :disabled=\"$props.disabled\"\n          :outline=\"$props.outline\"\n          :bordered=\"$props.bordered\"\n          :required-mark=\"$props.requiredMark\"\n          :tabindex=\"tabIndexComputed\"\n          :messages=\"$props.messages\"\n          :error-messages=\"computedErrorMessages\"\n          readonly\n          @focus=\"onInputFocus()\"\n          @blur=\"onInputBlur()\"\n        >\n          <template\n            v-if=\"$slots.prepend\"\n            #prepend\n          >\n            <slot name=\"prepend\" />\n          </template>\n\n          <template\n            v-if=\"$slots.append\"\n            #append\n          >\n            <slot name=\"append\" />\n          </template>\n\n          <template\n            v-if=\"$slots.prependInner\"\n            #prependInner\n          >\n            <slot name=\"prependInner\" />\n          </template>\n\n          <template #icon>\n            <va-icon\n              v-if=\"showClearIcon\"\n              v-bind=\"clearIconProps\"\n              @click.stop=\"reset()\"\n            />\n          </template>\n\n          <template #appendInner>\n            <slot\n              v-if=\"$slots.appendInner\"\n              name=\"appendInner\"\n            />\n            <va-icon\n              :color=\"toggleIconColor\"\n              :name=\"toggleIcon\"\n            />\n          </template>\n\n          <template v-if=\"$slots.content\" #content>\n            <slot\n              name=\"content\"\n              v-bind=\"{ valueString: valueComputedString, value: valueComputed }\"\n            />\n          </template>\n        </va-input>\n      </div>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keyup.enter.stop\n      @keydown.tab.stop.prevent\n      @keydown.esc.prevent=\"hideDropdown()\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select__input\"\n        placeholder=\"Search\"\n        :tabindex=\"tabindex + 1\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.down.stop.prevent=\"hoverNextOption()\"\n        @keydown.right.stop.prevent=\"hoverNextOption()\"\n        @keydown.enter.prevent=\"selectOrAddOption()\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabindex + 1\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar()\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption()\"\n          @keydown.space.stop.prevent=\"selectHoveredOption()\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick } from 'vue'\n\nimport { useSelectableList, useSelectableListProps, SelectableOption } from '../../composables/useSelectableList'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useFormProps } from '../../composables/useForm'\nimport { useLoadingProps } from '../../composables/useLoading'\nimport { useColor } from '../../composables/useColor'\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { useColors } from '../../services/color-config/color-config'\nimport { warn } from '../../services/utils'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaIcon from '../va-icon'\nimport VaInput from '../va-input'\nimport VaSelectOptionList from './VaSelectOptionList'\n\nconst { getHoverColor } = useColors()\n\ntype DropdownIcon = {\n  open: string,\n  close: string\n}\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Object] as PropType<SelectableOption>,\n      default: '',\n    },\n\n    // Dropdown position\n    position: {\n      type: String as PropType<string>,\n      default: 'bottom',\n      validator: (position: string) => ['top', 'bottom'].includes(position),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | string>,\n      default: false,\n      validator: (mode: string | boolean) => {\n        return [true, false, 'unique'].includes(mode)\n      },\n    },\n\n    color: { type: String as PropType<string>, default: 'primary' },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    searchable: { type: Boolean as PropType<boolean>, default: false },\n    separator: { type: String as PropType<string>, default: ', ' },\n    width: { type: String as PropType<string>, default: '100%' },\n    maxHeight: { type: String as PropType<string>, default: '256px' },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    fixed: { type: Boolean as PropType<boolean>, default: true },\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | DropdownIcon>,\n      default: (): DropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: any) => {\n        if (typeof value === 'string') { return true }\n\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    bordered: { type: Boolean as PropType<boolean>, default: false },\n    label: { type: String as PropType<string>, default: '' },\n    placeholder: { type: String as PropType<string>, default: '' },\n    requiredMark: { type: Boolean as PropType<boolean>, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = ref<InstanceType<typeof VaSelectOptionList>>()\n    const input = ref<InstanceType<typeof VaInput>>()\n    const searchBar = ref<InstanceType<typeof VaInput>>()\n\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      isFocused,\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const { colorComputed } = useColor(props)\n    const toggleIconColor = computed(() => (\n      props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value\n    ))\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => {\n      return props.searchable || props.allowCreate\n    })\n\n    watch(() => searchInput.value, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: any) {\n        emit('update:modelValue', getValue(value))\n      },\n    })\n\n    const valueComputedString = computed((): string | number => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    // Icons\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueComputed, isFocused, computedError)\n\n    const showClearIcon = computed(() => {\n      if (props.multiple) { return !!valueComputed.value.length }\n      return canBeCleared.value\n    })\n\n    const toggleIcon = computed((): string => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed((): any[] => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return (props.options).filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: any): boolean => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem: any) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (one: any, two: any) => {\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n    const selectOption = (option: any): void => {\n      if (hoveredOption.value === null) {\n        hideDropdown()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple) {\n        const isSelected = checkIsOptionSelected(option)\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected: any) => !compareOptions(option, optionSelected))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(option)\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideDropdown()\n      }\n    }\n\n    const selectOrAddOption = () => {\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n        return\n      }\n\n      if (allowedToCreate()) {\n        addNewOption()\n      }\n    }\n\n    const allowedToCreate = (): boolean => {\n      return !!(props.allowCreate && searchInput.value !== '')\n    }\n\n    const addNewOption = (): void => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption: boolean = props.options?.some((option: any) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref(null as any)\n\n    const selectHoveredOption = () => {\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => {\n        return showDropdownContent.value\n      },\n      set: (show: boolean) => {\n        show\n          ? showDropdown()\n          : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n      input.value?.focus()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideDropdown()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => {\n      nextTick(() => {\n        if (showSearchInput.value) {\n          focusSearchBar()\n        } else { focusOptionList() }\n      })\n    }\n\n    const onInputFocus = (): void => {\n      if (!isFocused.value) {\n        isFocused.value = true\n      }\n    }\n\n    const onInputBlur = (): void => {\n      if (!showDropdownContentComputed.value) {\n        isFocused.value\n          ? isFocused.value = false\n          : validate()\n      }\n    }\n\n    /** @public */\n    const focus = (): void => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = (): void => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n        nextTick(() => {\n          input.value?.blur()\n        })\n      } else {\n        input.value?.blur()\n      }\n    }\n\n    /** @public */\n    const reset = (): void => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => {\n      return props.disabled ? -1 : props.tabindex\n    })\n\n    const scrollToSelected = (): void => {\n      const selected = valueComputed.value\n      const nothingSelected = !selected.length && typeof selected !== 'object'\n\n      if (nothingSelected) {\n        return\n      }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: any\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      input,\n      optionList,\n      searchBar,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      reset,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n    }\n  },\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () {\n      if (this.$props.disabled) { return }\n      this.input?.focus()\n    },\n    blur () {\n      if (this.showDropdownContentComputed) {\n        this.showDropdownContentComputed = false\n        nextTick(() => {\n          this.input?.blur()\n        })\n      } else {\n        this.input?.blur()\n      }\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import 'variables';\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  .va-input {\n    cursor: var(--va-select-cursor);\n  }\n}\n\n.va-select-dropdown {\n  .va-dropdown__anchor {\n    display: block;\n  }\n\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll(var(--va-select-scroll-color));\n  }\n}\n\n</style>\n","<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select__dropdown va-select-dropdown\"\n    trigger=\"none\"\n    anchorSelector=\".va-input-wrapper__input\"\n    :position=\"$props.position\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :fixed=\"$props.fixed\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[0, 1]\"\n    keep-anchor-width\n    v-model=\"showDropdownContentComputed\"\n    @keydown.up.stop.prevent=\"showDropdown()\"\n    @keydown.down.stop.prevent=\"showDropdown()\"\n    @keydown.space.stop.prevent=\"showDropdown()\"\n    @click.prevent=\"onSelectClick()\"\n  >\n    <template #anchor>\n      <div class=\"va-select\">\n        <va-input\n          ref=\"input\"\n          :model-value=\"valueComputedString\"\n          :success=\"$props.success\"\n          :error=\"computedError\"\n          :color=\"$props.color\"\n          :label=\"$props.label\"\n          :placeholder=\"$props.placeholder\"\n          :loading=\"$props.loading\"\n          :disabled=\"$props.disabled\"\n          :outline=\"$props.outline\"\n          :bordered=\"$props.bordered\"\n          :required-mark=\"$props.requiredMark\"\n          :tabindex=\"tabIndexComputed\"\n          :messages=\"$props.messages\"\n          :error-messages=\"computedErrorMessages\"\n          readonly\n          @focus=\"onInputFocus()\"\n          @blur=\"onInputBlur()\"\n        >\n          <template\n            v-if=\"$slots.prepend\"\n            #prepend\n          >\n            <slot name=\"prepend\" />\n          </template>\n\n          <template\n            v-if=\"$slots.append\"\n            #append\n          >\n            <slot name=\"append\" />\n          </template>\n\n          <template\n            v-if=\"$slots.prependInner\"\n            #prependInner\n          >\n            <slot name=\"prependInner\" />\n          </template>\n\n          <template #icon>\n            <va-icon\n              v-if=\"showClearIcon\"\n              v-bind=\"clearIconProps\"\n              @click.stop=\"reset()\"\n            />\n          </template>\n\n          <template #appendInner>\n            <slot\n              v-if=\"$slots.appendInner\"\n              name=\"appendInner\"\n            />\n            <va-icon\n              :color=\"toggleIconColor\"\n              :name=\"toggleIcon\"\n            />\n          </template>\n\n          <template v-if=\"$slots.content\" #content>\n            <slot\n              name=\"content\"\n              v-bind=\"{ valueString: valueComputedString, value: valueComputed }\"\n            />\n          </template>\n        </va-input>\n      </div>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keyup.enter.stop\n      @keydown.tab.stop.prevent\n      @keydown.esc.prevent=\"hideDropdown()\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select__input\"\n        placeholder=\"Search\"\n        :tabindex=\"tabindex + 1\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.down.stop.prevent=\"hoverNextOption()\"\n        @keydown.right.stop.prevent=\"hoverNextOption()\"\n        @keydown.enter.prevent=\"selectOrAddOption()\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabindex + 1\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar()\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption()\"\n          @keydown.space.stop.prevent=\"selectHoveredOption()\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick } from 'vue'\n\nimport { useSelectableList, useSelectableListProps, SelectableOption } from '../../composables/useSelectableList'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useFormProps } from '../../composables/useForm'\nimport { useLoadingProps } from '../../composables/useLoading'\nimport { useColor } from '../../composables/useColor'\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { useColors } from '../../services/color-config/color-config'\nimport { warn } from '../../services/utils'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaIcon from '../va-icon'\nimport VaInput from '../va-input'\nimport VaSelectOptionList from './VaSelectOptionList'\n\nconst { getHoverColor } = useColors()\n\ntype DropdownIcon = {\n  open: string,\n  close: string\n}\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Object] as PropType<SelectableOption>,\n      default: '',\n    },\n\n    // Dropdown position\n    position: {\n      type: String as PropType<string>,\n      default: 'bottom',\n      validator: (position: string) => ['top', 'bottom'].includes(position),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | string>,\n      default: false,\n      validator: (mode: string | boolean) => {\n        return [true, false, 'unique'].includes(mode)\n      },\n    },\n\n    color: { type: String as PropType<string>, default: 'primary' },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    searchable: { type: Boolean as PropType<boolean>, default: false },\n    separator: { type: String as PropType<string>, default: ', ' },\n    width: { type: String as PropType<string>, default: '100%' },\n    maxHeight: { type: String as PropType<string>, default: '256px' },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    fixed: { type: Boolean as PropType<boolean>, default: true },\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | DropdownIcon>,\n      default: (): DropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: any) => {\n        if (typeof value === 'string') { return true }\n\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    bordered: { type: Boolean as PropType<boolean>, default: false },\n    label: { type: String as PropType<string>, default: '' },\n    placeholder: { type: String as PropType<string>, default: '' },\n    requiredMark: { type: Boolean as PropType<boolean>, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = ref<InstanceType<typeof VaSelectOptionList>>()\n    const input = ref<InstanceType<typeof VaInput>>()\n    const searchBar = ref<InstanceType<typeof VaInput>>()\n\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      isFocused,\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const { colorComputed } = useColor(props)\n    const toggleIconColor = computed(() => (\n      props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value\n    ))\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => {\n      return props.searchable || props.allowCreate\n    })\n\n    watch(() => searchInput.value, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: any) {\n        emit('update:modelValue', getValue(value))\n      },\n    })\n\n    const valueComputedString = computed((): string | number => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    // Icons\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, valueComputed, isFocused, computedError)\n\n    const showClearIcon = computed(() => {\n      if (props.multiple) { return !!valueComputed.value.length }\n      return canBeCleared.value\n    })\n\n    const toggleIcon = computed((): string => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed((): any[] => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return (props.options).filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: any): boolean => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem: any) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (one: any, two: any) => {\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n    const selectOption = (option: any): void => {\n      if (hoveredOption.value === null) {\n        hideDropdown()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple) {\n        const isSelected = checkIsOptionSelected(option)\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected: any) => !compareOptions(option, optionSelected))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(option)\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideDropdown()\n      }\n    }\n\n    const selectOrAddOption = () => {\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n        return\n      }\n\n      if (allowedToCreate()) {\n        addNewOption()\n      }\n    }\n\n    const allowedToCreate = (): boolean => {\n      return !!(props.allowCreate && searchInput.value !== '')\n    }\n\n    const addNewOption = (): void => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption: boolean = props.options?.some((option: any) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref(null as any)\n\n    const selectHoveredOption = () => {\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => {\n        return showDropdownContent.value\n      },\n      set: (show: boolean) => {\n        show\n          ? showDropdown()\n          : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n      input.value?.focus()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideDropdown()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => {\n      nextTick(() => {\n        if (showSearchInput.value) {\n          focusSearchBar()\n        } else { focusOptionList() }\n      })\n    }\n\n    const onInputFocus = (): void => {\n      if (!isFocused.value) {\n        isFocused.value = true\n      }\n    }\n\n    const onInputBlur = (): void => {\n      if (!showDropdownContentComputed.value) {\n        isFocused.value\n          ? isFocused.value = false\n          : validate()\n      }\n    }\n\n    /** @public */\n    const focus = (): void => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = (): void => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n        nextTick(() => {\n          input.value?.blur()\n        })\n      } else {\n        input.value?.blur()\n      }\n    }\n\n    /** @public */\n    const reset = (): void => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => {\n      return props.disabled ? -1 : props.tabindex\n    })\n\n    const scrollToSelected = (): void => {\n      const selected = valueComputed.value\n      const nothingSelected = !selected.length && typeof selected !== 'object'\n\n      if (nothingSelected) {\n        return\n      }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: any\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      input,\n      optionList,\n      searchBar,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      reset,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n    }\n  },\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () {\n      if (this.$props.disabled) { return }\n      this.input?.focus()\n    },\n    blur () {\n      if (this.showDropdownContentComputed) {\n        this.showDropdownContentComputed = false\n        nextTick(() => {\n          this.input?.blur()\n        })\n      } else {\n        this.input?.blur()\n      }\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import 'variables';\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  .va-input {\n    cursor: var(--va-select-cursor);\n  }\n}\n\n.va-select-dropdown {\n  .va-dropdown__anchor {\n    display: block;\n  }\n\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll(var(--va-select-scroll-color));\n  }\n}\n\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaSelect from './VaSelect.vue'\nimport VaSelectOptionListBase from './VaSelectOptionList/VaSelectOptionList.vue'\n\nexport const VaSelectOptionList = withConfigTransport(VaSelectOptionListBase)\n\nexport default withConfigTransport(VaSelect)\n"]},"metadata":{},"sourceType":"module"}