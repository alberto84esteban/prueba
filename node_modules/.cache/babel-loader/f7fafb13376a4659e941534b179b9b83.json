{"ast":null,"code":"import { t as o } from \"./toNumber.js\";\n\nvar r = function baseClamp$1(o, r, i) {\n  return o == o && (void 0 !== i && (o = o <= i ? o : i), void 0 !== r && (o = o >= r ? o : r)), o;\n},\n    i = o;\n\nvar t = function clamp(o, t, v) {\n  return void 0 === v && (v = t, t = void 0), void 0 !== v && (v = (v = i(v)) == v ? v : 0), void 0 !== t && (t = (t = i(t)) == t ? t : 0), r(i(o), t, v);\n};\n\nexport { t as c };","map":{"version":3,"mappings":";;IAAIA,ICSJ,SAASA,WAAT,CAAmBC,CAAnB,EAA2BC,CAA3B,EAAkCC,CAAlC,EAAkCA;AAShC,SARIF,KAAWA,CAAXA,KAAWA,KACCG,CADDH,KACTE,CADSF,KAEXA,IAASA,KAAUE,CAAVF,GAAkBA,CAAlBA,GAA2BE,CAFzBF,GAEyBE,KAExBC,CAFwBD,KAElCD,CAFkCC,KAGpCF,IAASA,KAAUC,CAAVD,GAAkBA,CAAlBA,GAA2BC,CAHAC,CAFpCF,GAQGA,CAAP;AAAOA;IDjBLI,IAAWC;;AAAAA,QAqBf,SAASC,KAAT,CAAeN,CAAf,EAAuBC,CAAvB,EAA8BC,CAA9B,EAA8BA;AAa5B,cAZcC,CAYd,KAZID,CAYJ,KAXEA,IAAQD,CAARC,EACAD,SAAQE,CAUV,GAVUA,KAEIA,CAFJA,KAEND,CAFMC,KAIRD,KADAA,IAAQE,EAASF,CAATE,CACRF,KAAkBA,CAAlBA,GAA0BA,CAA1BA,GAAkC,CAJ1BC,CAUV,EANoC,KAEtBA,CAFsB,KAEhCF,CAFgC,KAIlCA,KADAA,IAAQG,EAASH,CAATG,CACRH,KAAkBA,CAAlBA,GAA0BA,CAA1BA,GAAkC,CAJA,CAMpC,EAAOF,EAAUK,EAASJ,CAATI,CAAVL,EAA4BE,CAA5BF,EAAmCG,CAAnCH,CAAP;AAA0CG,CAlC7BG;;AAkC6BH","names":["baseClamp","number","lower","upper","undefined","toNumber","require$$1","clamp"],"sources":["../../../../node_modules/lodash/clamp.js","../../../../node_modules/lodash/_baseClamp.js"],"sourcesContent":["var baseClamp = require('./_baseClamp'),\n    toNumber = require('./toNumber');\n\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n  if (upper !== undefined) {\n    upper = toNumber(upper);\n    upper = upper === upper ? upper : 0;\n  }\n  if (lower !== undefined) {\n    lower = toNumber(lower);\n    lower = lower === lower ? lower : 0;\n  }\n  return baseClamp(toNumber(number), lower, upper);\n}\n\nmodule.exports = clamp;\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n"]},"metadata":{},"sourceType":"module"}