{"ast":null,"code":"import { w as a } from \"./withConfigTransport.js\";\nimport { __decorate as t } from \"tslib\";\nimport { V as e, m as i, O as r, p as l } from \"./vue-class-component.esm-bundler.js\";\nimport { openBlock as s, createElementBlock as n, normalizeStyle as o, createElementVNode as p, renderSlot as m } from \"vue\";\nimport { s as v } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nconst h = e.with(class ParallaxProps {\n  constructor() {\n    this.target = l({\n      type: [Object, String],\n      default: \"\"\n    }), this.src = l({\n      type: String,\n      default: \"\",\n      required: !0\n    }), this.alt = l({\n      type: String,\n      default: \"parallax\"\n    }), this.height = l({\n      type: Number,\n      default: 400\n    }), this.reversed = l({\n      type: Boolean,\n      default: !1\n    }), this.speed = l({\n      type: Number,\n      default: .5,\n      validator: a => a >= 0 && a <= 1\n    });\n  }\n\n});\nlet g = class VaParallax extends i(h) {\n  constructor() {\n    super(...arguments), this.elOffsetTop = 0, this.parallax = 0, this.parallaxDist = 0, this.percentScrolled = 0, this.scrollTop = 0, this.windowHeight = 0, this.windowBottom = 0, this.isLoaded = !1;\n  }\n\n  get computedWrapperStyles() {\n    return {\n      height: this.$props.height + \"px\"\n    };\n  }\n\n  get targetElement() {\n    return \"string\" == typeof this.$props.target ? document.querySelector(this.$props.target) : this.$props.target || this.$el.parentElement;\n  }\n\n  get computedImgStyles() {\n    return {\n      display: \"block\",\n      transform: `translate(-50%, ${this.parallax}px)`,\n      opacity: this.isLoaded ? 1 : 0,\n      top: this.$props.reversed ? 0 : \"auto\"\n    };\n  }\n\n  get imgHeight() {\n    return this.$refs.img.naturalHeight;\n  }\n\n  calcDimensions() {\n    const a = this.$el.getBoundingClientRect();\n    this.scrollTop = this.targetElement.scrollTop, this.parallaxDist = this.imgHeight - this.$props.height, this.elOffsetTop = a.top + this.scrollTop, this.windowHeight = window.innerHeight, this.windowBottom = this.scrollTop + this.windowHeight;\n  }\n\n  translate() {\n    this.calcDimensions(), this.percentScrolled = (this.windowBottom - this.elOffsetTop) / (this.$props.height + this.windowHeight), this.parallax = Math.round(this.parallaxDist * this.percentScrolled) * this.$props.speed, this.$props.reversed && (this.parallax = -this.parallax);\n  }\n\n  addEventListeners() {\n    this.targetElement.addEventListener(\"scroll\", this.translate), this.targetElement.addEventListener(\"resize\", this.translate);\n  }\n\n  removeEventListeners() {\n    this.targetElement.removeEventListener(\"scroll\", this.translate), this.targetElement.removeEventListener(\"resize\", this.translate);\n  }\n\n  initImage() {\n    const a = this.$refs.img;\n    a.complete ? (this.translate(), this.addEventListeners()) : a.addEventListener(\"load\", () => {\n      this.translate(), this.addEventListeners();\n    }, !1), this.isLoaded = !0;\n  }\n\n  mounted() {\n    this.initImage();\n  }\n\n  beforeUnmount() {\n    this.removeEventListeners();\n  }\n\n};\ng = t([r({\n  name: \"VaParallax\"\n})], g);\nvar c = g;\nconst d = {\n  class: \"va-parallax__image-container\"\n},\n      x = [\"src\", \"alt\"],\n      u = {\n  class: \"va-parallax__item-container\"\n};\nv(\":root{--va-parallax-display:block;--va-parallax-position:relative;--va-parallax-overflow:hidden;--va-parallax-width:auto;--va-parallax-z-index:0;--va-parallax-image-container-position:absolute;--va-parallax-image-container-top:0;--va-parallax-image-container-left:0;--va-parallax-image-container-right:0;--va-parallax-image-container-bottom:0;--va-parallax-image-container-z-index:1;--va-parallax-image-container-contain:strict;--va-parallax-image-container-user-select:none;--va-parallax-image-position:absolute;--va-parallax-image-bottom:0;--va-parallax-image-left:50%;--va-parallax-image-min-width:100%;--va-parallax-image-min-height:100%;--va-parallax-image-display:none;--va-parallax-image-transform:translate(-50%);--va-parallax-image-will-change:transform;--va-parallax-image-transition:0.3s opacity linear;--va-parallax-image-z-index:1}.va-parallax{display:var(--va-parallax-display);font-family:var(--va-font-family);overflow:var(--va-parallax-overflow);position:var(--va-parallax-position);width:var(--va-parallax-width);z-index:var(--va-parallax-z-index)}.va-parallax__image-container{bottom:var(--va-parallax-image-container-bottom);contain:var(--va-parallax-image-container-contain);left:var(--va-parallax-image-container-left);position:var(--va-parallax-image-container-position);right:var(--va-parallax-image-container-right);top:var(--va-parallax-image-container-top);-webkit-user-select:var(--va-parallax-image-container-user-select);-moz-user-select:var(--va-parallax-image-container-user-select);-ms-user-select:var(--va-parallax-image-container-user-select);user-select:var(--va-parallax-image-container-user-select);z-index:var(--va-parallax-image-container-z-index)}.va-parallax__image{bottom:var(--va-parallax-image-bottom);display:var(--va-parallax-image-display);left:var(--va-parallax-image-left);min-height:var(--va-parallax-image-min-height);min-width:var(--va-parallax-image-min-width);position:var(--va-parallax-image-position);transform:var(--va-parallax-image-transform);transition:var(--va-parallax-image-transition);will-change:var(--va-parallax-image-will-change);z-index:var(--va-parallax-image-z-index)}.va-parallax__item-container{bottom:0;contain:strict;left:0;position:absolute;right:0;top:0;z-index:2}\"), c.render = function render(a, t, e, i, r, l) {\n  return s(), n(\"div\", {\n    class: \"va-parallax\",\n    style: o(a.computedWrapperStyles)\n  }, [p(\"div\", d, [p(\"img\", {\n    class: \"va-parallax__image\",\n    ref: \"img\",\n    src: a.$props.src,\n    alt: a.$props.alt,\n    style: o(a.computedImgStyles)\n  }, null, 12, x)]), p(\"div\", u, [m(a.$slots, \"default\")])], 4);\n}, c.__file = \"src/components/va-parallax/VaParallax.vue\";\nvar f = a(c);\nexport { f as default };","map":{"version":3,"mappings":";;;;;;AAsCA,MAAMA,IAAqBC,EAAIC,IAAJD,CAf3B,MAAME,aAAN,CAAMA;AAANC;AACEC,kBAASC,EAAuB;AAAEC,YAAM,CAACC,MAAD,EAASC,MAAT,CAAR;AAA0BC,eAAS;AAAnC,KAAvBJ,CAATD,EACAA,WAAMC,EAAa;AAAEC,YAAME,MAAR;AAAgBC,eAAS,EAAzB;AAA6BC,iBAAU;AAAvC,KAAbL,CADND,EAEAA,WAAMC,EAAa;AAAEC,YAAME,MAAR;AAAgBC,eAAS;AAAzB,KAAbJ,CAFND,EAGAA,cAASC,EAAa;AAAEC,YAAMK,MAAR;AAAgBF,eAAS;AAAzB,KAAbJ,CAHTD,EAIAA,gBAAWC,EAAc;AAAEC,YAAMM,OAAR;AAAiBH,gBAAS;AAA1B,KAAdJ,CAJXD,EAKAA,aAAQC,EAAa;AACnBC,YAAMK,MADa;AAEnBF,eAAS,EAFU;AAGnBI,iBAAYC,KACHA,KAAS,CAATA,IAAcA,KAAS;AAJb,KAAbT,CALRD;AASkC;;AAV9BF,CAeqBF,CAA3B;AAKA,IAAqBe,IAArB,MAAqBA,UAArB,SAAwCC,EACtCjB,CADsCiB,CAAxC,CACEjB;AADFI;AAAAA,yBAGEC,mBAAc,CAHhBD,EAIEC,gBAAW,CAJbD,EAKEC,oBAAe,CALjBD,EAMEC,uBAAkB,CANpBD,EAOEC,iBAAY,CAPdD,EAQEC,oBAAe,CARjBD,EASEC,oBAAe,CATjBD,EAUEC,iBAAW,CAVbD;AAYEc;;AAAAA;AACE,WAAO;AACLC,cAAQd,KAAKe,MAALf,CAAYc,MAAZd,GAAqB;AADxB,KAAP;AAKFgB;;AAAAA;AACE,WAAqC,mBAAvBhB,KAAKe,MAALf,CAAYiB,MAAW,GACjCC,SAASC,aAATD,CAAuBlB,KAAKe,MAALf,CAAYiB,MAAnCC,CADiC,GAEjClB,KAAKe,MAALf,CAAYiB,MAAZjB,IAAsBA,KAAKoB,GAALpB,CAASqB,aAFnC;AAKFC;;AAAAA;AACE,WAAO;AACLC,eAAS,OADJ;AAELC,iBAAW,mBAAmBxB,KAAKyB,aAF9B;AAGLC,eAAS1B,KAAK2B,QAAL3B,GAAgB,CAAhBA,GAAoB,CAHxB;AAIL4B,WAAK5B,KAAKe,MAALf,CAAY6B,QAAZ7B,GAAuB,CAAvBA,GAA2B;AAJ3B,KAAP;AAQF8B;;AAAAA;AAEE,WAAO9B,KAAK+B,KAAL/B,CAAWgC,GAAXhC,CAAeiC,aAAtB;AAGFC;;AAAAA;AACE,UAAMC,IAASnC,KAAKoB,GAALpB,CAASoC,qBAATpC,EAAf;AAEAA,SAAKqC,SAALrC,GAAiBA,KAAKgB,aAALhB,CAAmBqC,SAApCrC,EACAA,KAAKsC,YAALtC,GAAoBA,KAAK8B,SAAL9B,GAAkBA,KAAKe,MAALf,CAAYc,MADlDd,EAEAA,KAAKuC,WAALvC,GAAmBmC,EAAOP,GAAPO,GAAanC,KAAKqC,SAFrCrC,EAGAA,KAAKwC,YAALxC,GAAoByC,OAAOC,WAH3B1C,EAIAA,KAAK2C,YAAL3C,GAAoBA,KAAKqC,SAALrC,GAAiBA,KAAKwC,YAJ1CxC;AAOF4C;;AAAAA;AACE5C,SAAKkC,cAALlC,IACAA,KAAK6C,eAAL7C,GAAK6C,CACF7C,KAAK2C,YAAL3C,GAAoBA,KAAKuC,WADvBM,KAED7C,KAAKe,MAALf,CAAYc,MAAZd,GAAgCA,KAAKwC,YAFpCK,CADL7C,EAKAA,KAAKyB,QAALzB,GAAgB8C,KAAKC,KAALD,CAAW9C,KAAKsC,YAALtC,GAAoBA,KAAK6C,eAApCC,IAAwD9C,KAAKe,MAALf,CAAYgD,KALpFhD,EAMIA,KAAKe,MAALf,CAAY6B,QAAZ7B,KACFA,KAAKyB,QAALzB,GAAKyB,CAAYzB,KAAKyB,QADpBzB,CANJA;AAWFiD;;AAAAA;AACEjD,SAAKgB,aAALhB,CAAmBkD,gBAAnBlD,CAAoC,QAApCA,EAA8CA,KAAK4C,SAAnD5C,GACAA,KAAKgB,aAALhB,CAAmBkD,gBAAnBlD,CAAoC,QAApCA,EAA8CA,KAAK4C,SAAnD5C,CADAA;AAIFmD;;AAAAA;AACEnD,SAAKgB,aAALhB,CAAmBoD,mBAAnBpD,CAAuC,QAAvCA,EAAiDA,KAAK4C,SAAtD5C,GACAA,KAAKgB,aAALhB,CAAmBoD,mBAAnBpD,CAAuC,QAAvCA,EAAiDA,KAAK4C,SAAtD5C,CADAA;AAIFqD;;AAAAA;AACE,UAAMrB,IAAwBhC,KAAK+B,KAAL/B,CAAWgC,GAAzC;AACIA,MAAIsB,QAAJtB,IACFhC,KAAK4C,SAAL5C,IACAA,KAAKiD,iBAALjD,EAFEgC,IAIFA,EAAIkB,gBAAJlB,CAAqB,MAArBA,EAA6B;AAC3BhC,WAAK4C,SAAL5C,IACAA,KAAKiD,iBAALjD,EADAA;AACKiD,KAFPjB,EAEOiB,CACJ,CAHHjB,CAJEA,EASJhC,KAAK2B,QAAL3B,GAAK2B,CAAW,CATZK;AAYNuB;;AAAAA;AACEvD,SAAKqD,SAALrD;AAGFwD;;AAAAA;AACExD,SAAKmD,oBAALnD;AAAKmD;;AAxFPxD,CADF;AAAqBgB,OAHpB8C,EAAQ;AACPC,QAAM;AADC,CAARD,CAGoB9C;AAAAA;AAAAA;ACtCZgD,SAAM;ADsCMhD;AAAAA,MCtCNiD,kBDsCMjD;AAAAA,MCtCNkD;AASNF,SAAM;AATA,CDsCMhD;AC7BNmD;AAAA,cAbbC;AACEJ,WAAM,aADRI;AAEGC,aAAOC,uBAAPD;AAFHD,KAEUE,CAERC,aACEA;AACEP,WAAM,oBADRO;AAEEC,SAAI,KAFND;AAGGE,SAAKH,SAAOG,GAHfF;AAIGG,SAAKJ,SAAOI,GAJfH;AAKGF,aAAOC,mBAAPD;AALHE,KAKUD,IALVC,EAKUD,EALVC,EAKUD,CALVC,CADFI,EAFQL,EAWRC,aACEK,sBADFC,EAXQP,CAFVF,EAcIQ,CAdJR,CAaa;AACTQ,CADS,EACTA,sDADS;ACXf,QAAeE,EAAoB9D,CAApB8D,CAAf;AAAmC9D","names":["ParallaxPropsMixin","Vue","with","ParallaxProps","constructor","this","prop","type","Object","String","default","required","Number","Boolean","validator","value","VaParallax","mixins","computedWrapperStyles","height","$props","targetElement","target","document","querySelector","$el","parentElement","computedImgStyles","display","transform","parallax","opacity","isLoaded","top","reversed","imgHeight","$refs","img","naturalHeight","calcDimensions","offset","getBoundingClientRect","scrollTop","parallaxDist","elOffsetTop","windowHeight","window","innerHeight","windowBottom","translate","percentScrolled","Math","round","speed","addEventListeners","addEventListener","removeEventListeners","removeEventListener","initImage","complete","mounted","beforeUnmount","Options","name","class","x","u","v","_createElementBlock","style","_ctx","_createElementVNode","ref","src","alt","_hoisted_1","_renderSlot","_hoisted_3","withConfigTransport"],"sources":["../../src/components/va-parallax/VaParallax.vue","../../src/components/va-parallax/VaParallax.vue?vue&type=template&id=a3c5ce30&lang.js","../../src/components/va-parallax/index.ts"],"sourcesContent":["<template>\n  <div\n    class=\"va-parallax\"\n    :style=\"computedWrapperStyles\"\n  >\n    <div class=\"va-parallax__image-container\">\n      <img\n        class=\"va-parallax__image\"\n        ref=\"img\"\n        :src=\"$props.src\"\n        :alt=\"$props.alt\"\n        :style=\"computedImgStyles\"\n      />\n    </div>\n    <div class=\"va-parallax__item-container\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\n\nclass ParallaxProps {\n  target = prop<Element | string>({ type: [Object, String], default: '' })\n  src = prop<string>({ type: String, default: '', required: true })\n  alt = prop<string>({ type: String, default: 'parallax' })\n  height = prop<number>({ type: Number, default: 400 })\n  reversed = prop<boolean>({ type: Boolean, default: false })\n  speed = prop<number>({\n    type: Number,\n    default: 0.5,\n    validator: (value: number) => {\n      return value >= 0 && value <= 1\n    },\n  })\n}\n\nconst ParallaxPropsMixin = Vue.with(ParallaxProps)\n\n@Options({\n  name: 'VaParallax',\n})\nexport default class VaParallax extends mixins(\n  ParallaxPropsMixin,\n) {\n  elOffsetTop = 0\n  parallax = 0\n  parallaxDist = 0\n  percentScrolled = 0\n  scrollTop = 0\n  windowHeight = 0\n  windowBottom = 0\n  isLoaded = false\n\n  get computedWrapperStyles (): Record<string, unknown> {\n    return {\n      height: this.$props.height + 'px',\n    }\n  }\n\n  get targetElement () {\n    return typeof this.$props.target === 'string'\n      ? document.querySelector(this.$props.target)\n      : this.$props.target || this.$el.parentElement\n  }\n\n  get computedImgStyles (): Record<string, unknown> {\n    return {\n      display: 'block',\n      transform: `translate(-50%, ${this.parallax}px)`,\n      opacity: this.isLoaded ? 1 : 0,\n      top: this.$props.reversed ? 0 : 'auto',\n    }\n  }\n\n  get imgHeight (): number {\n    // @ts-ignore\n    return this.$refs.img.naturalHeight\n  }\n\n  calcDimensions (): void {\n    const offset = this.$el.getBoundingClientRect()\n\n    this.scrollTop = this.targetElement.scrollTop\n    this.parallaxDist = this.imgHeight - (this.$props.height as number)\n    this.elOffsetTop = offset.top + this.scrollTop\n    this.windowHeight = window.innerHeight\n    this.windowBottom = this.scrollTop + this.windowHeight\n  }\n\n  translate (): void {\n    this.calcDimensions()\n    this.percentScrolled = (\n      (this.windowBottom - this.elOffsetTop) /\n      ((this.$props.height as number) + this.windowHeight)\n    )\n    this.parallax = Math.round(this.parallaxDist * this.percentScrolled) * (this.$props.speed as number)\n    if (this.$props.reversed) {\n      this.parallax = -this.parallax\n    }\n  }\n\n  addEventListeners (): void {\n    this.targetElement.addEventListener('scroll', this.translate)\n    this.targetElement.addEventListener('resize', this.translate)\n  }\n\n  removeEventListeners (): void {\n    this.targetElement.removeEventListener('scroll', this.translate)\n    this.targetElement.removeEventListener('resize', this.translate)\n  }\n\n  initImage (): void {\n    const img: HTMLImageElement = this.$refs.img as HTMLImageElement\n    if (img.complete) {\n      this.translate()\n      this.addEventListeners()\n    } else {\n      img.addEventListener('load', () => {\n        this.translate()\n        this.addEventListeners()\n      }, false)\n    }\n    this.isLoaded = true\n  }\n\n  mounted () {\n    this.initImage()\n  }\n\n  beforeUnmount () {\n    this.removeEventListeners()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n@import 'variables';\n\n.va-parallax {\n  display: var(--va-parallax-display);\n  position: var(--va-parallax-position);\n  overflow: var(--va-parallax-overflow);\n  width: var(--va-parallax-width);\n  z-index: var(--va-parallax-z-index);\n  font-family: var(--va-font-family);\n\n  &__image-container {\n    position: var(--va-parallax-image-container-position);\n    top: var(--va-parallax-image-container-top);\n    left: var(--va-parallax-image-container-left);\n    right: var(--va-parallax-image-container-right);\n    bottom: var(--va-parallax-image-container-bottom);\n    z-index: var(--va-parallax-image-container-z-index);\n    contain: var(--va-parallax-image-container-contain);\n    user-select: var(--va-parallax-image-container-user-select);\n  }\n\n  &__image {\n    position: var(--va-parallax-image-position);\n    bottom: var(--va-parallax-image-bottom);\n    left: var(--va-parallax-image-left);\n    min-width: var(--va-parallax-image-min-width);\n    min-height: var(--va-parallax-image-min-height);\n    display: var(--va-parallax-image-display);\n    transform: var(--va-parallax-image-transform);\n    will-change: var(--va-parallax-image-will-change);\n    transition: var(--va-parallax-image-transition);\n    z-index: var(--va-parallax-image-z-index);\n  }\n\n  &__item-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 2;\n    contain: strict;\n  }\n}\n</style>\n","<template>\n  <div\n    class=\"va-parallax\"\n    :style=\"computedWrapperStyles\"\n  >\n    <div class=\"va-parallax__image-container\">\n      <img\n        class=\"va-parallax__image\"\n        ref=\"img\"\n        :src=\"$props.src\"\n        :alt=\"$props.alt\"\n        :style=\"computedImgStyles\"\n      />\n    </div>\n    <div class=\"va-parallax__item-container\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\n\nclass ParallaxProps {\n  target = prop<Element | string>({ type: [Object, String], default: '' })\n  src = prop<string>({ type: String, default: '', required: true })\n  alt = prop<string>({ type: String, default: 'parallax' })\n  height = prop<number>({ type: Number, default: 400 })\n  reversed = prop<boolean>({ type: Boolean, default: false })\n  speed = prop<number>({\n    type: Number,\n    default: 0.5,\n    validator: (value: number) => {\n      return value >= 0 && value <= 1\n    },\n  })\n}\n\nconst ParallaxPropsMixin = Vue.with(ParallaxProps)\n\n@Options({\n  name: 'VaParallax',\n})\nexport default class VaParallax extends mixins(\n  ParallaxPropsMixin,\n) {\n  elOffsetTop = 0\n  parallax = 0\n  parallaxDist = 0\n  percentScrolled = 0\n  scrollTop = 0\n  windowHeight = 0\n  windowBottom = 0\n  isLoaded = false\n\n  get computedWrapperStyles (): Record<string, unknown> {\n    return {\n      height: this.$props.height + 'px',\n    }\n  }\n\n  get targetElement () {\n    return typeof this.$props.target === 'string'\n      ? document.querySelector(this.$props.target)\n      : this.$props.target || this.$el.parentElement\n  }\n\n  get computedImgStyles (): Record<string, unknown> {\n    return {\n      display: 'block',\n      transform: `translate(-50%, ${this.parallax}px)`,\n      opacity: this.isLoaded ? 1 : 0,\n      top: this.$props.reversed ? 0 : 'auto',\n    }\n  }\n\n  get imgHeight (): number {\n    // @ts-ignore\n    return this.$refs.img.naturalHeight\n  }\n\n  calcDimensions (): void {\n    const offset = this.$el.getBoundingClientRect()\n\n    this.scrollTop = this.targetElement.scrollTop\n    this.parallaxDist = this.imgHeight - (this.$props.height as number)\n    this.elOffsetTop = offset.top + this.scrollTop\n    this.windowHeight = window.innerHeight\n    this.windowBottom = this.scrollTop + this.windowHeight\n  }\n\n  translate (): void {\n    this.calcDimensions()\n    this.percentScrolled = (\n      (this.windowBottom - this.elOffsetTop) /\n      ((this.$props.height as number) + this.windowHeight)\n    )\n    this.parallax = Math.round(this.parallaxDist * this.percentScrolled) * (this.$props.speed as number)\n    if (this.$props.reversed) {\n      this.parallax = -this.parallax\n    }\n  }\n\n  addEventListeners (): void {\n    this.targetElement.addEventListener('scroll', this.translate)\n    this.targetElement.addEventListener('resize', this.translate)\n  }\n\n  removeEventListeners (): void {\n    this.targetElement.removeEventListener('scroll', this.translate)\n    this.targetElement.removeEventListener('resize', this.translate)\n  }\n\n  initImage (): void {\n    const img: HTMLImageElement = this.$refs.img as HTMLImageElement\n    if (img.complete) {\n      this.translate()\n      this.addEventListeners()\n    } else {\n      img.addEventListener('load', () => {\n        this.translate()\n        this.addEventListeners()\n      }, false)\n    }\n    this.isLoaded = true\n  }\n\n  mounted () {\n    this.initImage()\n  }\n\n  beforeUnmount () {\n    this.removeEventListeners()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n@import 'variables';\n\n.va-parallax {\n  display: var(--va-parallax-display);\n  position: var(--va-parallax-position);\n  overflow: var(--va-parallax-overflow);\n  width: var(--va-parallax-width);\n  z-index: var(--va-parallax-z-index);\n  font-family: var(--va-font-family);\n\n  &__image-container {\n    position: var(--va-parallax-image-container-position);\n    top: var(--va-parallax-image-container-top);\n    left: var(--va-parallax-image-container-left);\n    right: var(--va-parallax-image-container-right);\n    bottom: var(--va-parallax-image-container-bottom);\n    z-index: var(--va-parallax-image-container-z-index);\n    contain: var(--va-parallax-image-container-contain);\n    user-select: var(--va-parallax-image-container-user-select);\n  }\n\n  &__image {\n    position: var(--va-parallax-image-position);\n    bottom: var(--va-parallax-image-bottom);\n    left: var(--va-parallax-image-left);\n    min-width: var(--va-parallax-image-min-width);\n    min-height: var(--va-parallax-image-min-height);\n    display: var(--va-parallax-image-display);\n    transform: var(--va-parallax-image-transform);\n    will-change: var(--va-parallax-image-will-change);\n    transition: var(--va-parallax-image-transition);\n    z-index: var(--va-parallax-image-z-index);\n  }\n\n  &__item-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 2;\n    contain: strict;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaParallax from './VaParallax.vue'\n\nexport default withConfigTransport(VaParallax)\n"]},"metadata":{},"sourceType":"module"}