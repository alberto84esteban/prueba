{"ast":null,"code":"import { a as t } from \"./utils.js\";\nconst e = {\n  options: {\n    type: Array,\n    default: () => []\n  },\n  textBy: {\n    type: [String, Function],\n    default: \"text\"\n  },\n  valueBy: {\n    type: [String, Function],\n    default: \"\"\n  },\n  trackBy: {\n    type: [String, Function],\n    default: \"value\"\n  },\n  disabledBy: {\n    type: [String, Function],\n    default: \"disabled\"\n  },\n  groupBy: {\n    type: [String, Function],\n    default: \"group\"\n  }\n};\n\nfunction useSelectableList(e) {\n  const getOptionProperty = (e, n) => n ? (t => {\n    const e = typeof t;\n    return \"string\" === e || \"number\" === e;\n  })(e) ? e : t(e, n) : e,\n        getValue = t => getOptionProperty(t, e.valueBy);\n\n  return {\n    isSelectableListComponent: !0,\n    getValue: getValue,\n    getOptionByValue: t => e.valueBy && e.options.find(e => t === getValue(e)) || t,\n    getText: t => getOptionProperty(t, e.textBy),\n    getDisabled: t => getOptionProperty(t, e.disabledBy),\n    getTrackBy: t => getOptionProperty(t, e.trackBy),\n    getGroupBy: t => getOptionProperty(t, e.groupBy)\n  };\n}\n\nexport { useSelectableList as a, e as u };","map":{"version":3,"mappings":";MAkBaA,IAAyB;AACpCC,WAAS;AAAEC,UAAMC,KAAR;AAA+CC,aAAS,MAAM;AAA9D,GAD2B;AAEpCC,UAAQ;AAAEH,UAAM,CAACI,MAAD,EAASC,QAAT,CAAR;AAA0DH,aAAS;AAAnE,GAF4B;AAGpCI,WAAS;AAAEN,UAAM,CAACI,MAAD,EAASC,QAAT,CAAR;AAA0DH,aAAS;AAAnE,GAH2B;AAIpCK,WAAS;AAAEP,UAAM,CAACI,MAAD,EAASC,QAAT,CAAR;AAA0DH,aAAS;AAAnE,GAJ2B;AAKpCM,cAAY;AAAER,UAAM,CAACI,MAAD,EAASC,QAAT,CAAR;AAA0DH,aAAS;AAAnE,GALwB;AAMpCO,WAAS;AAAET,UAAM,CAACI,MAAD,EAASC,QAAT,CAAR;AAA0DH,aAAS;AAAnE;AAN2B;;AAMwC,SAG9DQ,iBAH8D,CAG3CC,CAH2C,EAG3CA;AACjC,QAOMC,oBAAoB,CAACC,CAAD,EAA2BC,CAA3B,KACnBA,IANkB,CAACD;AACxB,UAAME,WAAsBF,CAA5B;AACA,WAAwB,aAAjBE,CAAiB,IAA6B,aAAjBA,CAApC;AAAoCA,GAFb,EAQCF,CARD,IASnBA,CATmB,GAUnBG,EAAQH,CAARG,EAAgBF,CAAhBE,CAJCF,GAAmBD,CAR1B;AAAA,QAeMI,WAAYJ,KAA6BD,kBAAkBC,CAAlBD,EAA0BD,EAAML,OAAhCM,CAf/C;;AA0BA,SAAO;AACLM,gCA3BgC,CA0B3B;AAELD,sBAFK;AAGLE,sBAbwBC,KACnBT,EAAML,OAANK,IAEEA,EAAMZ,OAANY,CAAcU,IAAdV,CAAoBE,KAA6BO,MAAUH,SAASJ,CAATI,CAA3DN,CAFFA,IAAwBS,CASxB;AAILE,aATeT,KAA6BD,kBAAkBC,CAAlBD,EAA0BD,EAAMR,MAAhCS,CAKvC;AAKLW,iBATmBV,KAA6BD,kBAAkBC,CAAlBD,EAA0BD,EAAMH,UAAhCI,CAI3C;AAMLY,gBATkBX,KAA6BD,kBAAkBC,CAAlBD,EAA0BD,EAAMJ,OAAhCK,CAG1C;AAOLa,gBATkBZ,KAA6BD,kBAAkBC,CAAlBD,EAA0BD,EAAMF,OAAhCG;AAE1C,GAAP;AAFiFH;;AAAAA","names":["useSelectableListProps","options","type","Array","default","textBy","String","Function","valueBy","trackBy","disabledBy","groupBy","useSelectableList","props","getOptionProperty","option","selector","typeOfOption","getProp","getValue","isSelectableListComponent","getOptionByValue","value","find","getText","getDisabled","getTrackBy","getGroupBy"],"sources":["../../src/composables/useSelectableList.ts"],"sourcesContent":["// It's another implementation of SelectableListMixin functionality but for Composition API usage\n\nimport { getProp } from '../services/utils'\nimport { PropType } from 'vue'\n\nexport type SelectableOption = string | number | Record<string, unknown>\n\ntype StringOrFunction = string | ((option: SelectableOption) => string)\n\nexport type SelectableListProps = {\n  options: SelectableOption[]\n  textBy: StringOrFunction\n  valueBy: StringOrFunction\n  trackBy: StringOrFunction\n  disabledBy: StringOrFunction\n  groupBy: StringOrFunction\n}\n\nexport const useSelectableListProps = {\n  options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\n  groupBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'group' },\n}\n\nexport function useSelectableList (props: SelectableListProps) {\n  const isSelectableListComponent = true\n\n  const isStringOrNumber = (option: SelectableOption): option is (string | number) => {\n    const typeOfOption = typeof option\n    return typeOfOption === 'string' || typeOfOption === 'number'\n  }\n\n  const getOptionProperty = (option: SelectableOption, selector: StringOrFunction) => {\n    if (!selector) { return option }\n\n    return isStringOrNumber(option)\n      ? option\n      : getProp(option, selector)\n  }\n\n  const getValue = (option: SelectableOption) => getOptionProperty(option, props.valueBy)\n  const getOptionByValue = (value: SelectableOption) => {\n    if (!props.valueBy) { return value }\n\n    return props.options.find((option: SelectableOption) => value === getValue(option)) || value\n  }\n  const getText = (option: SelectableOption) => getOptionProperty(option, props.textBy)\n  const getDisabled = (option: SelectableOption) => getOptionProperty(option, props.disabledBy)\n  const getTrackBy = (option: SelectableOption) => getOptionProperty(option, props.trackBy)\n  const getGroupBy = (option: SelectableOption) => getOptionProperty(option, props.groupBy)\n\n  return {\n    isSelectableListComponent,\n    getValue,\n    getOptionByValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}