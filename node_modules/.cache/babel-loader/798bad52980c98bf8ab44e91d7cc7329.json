{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { w as o } from \"./withConfigTransport.js\";\nimport { defineComponent as e, resolveComponent as t, openBlock as a, createElementBlock as l, createElementVNode as r, Fragment as s, renderList as i, createBlock as n } from \"vue\";\nimport { b as p, u as c, a as u } from \"./useStateful.js\";\nimport d from \"./index17.js\";\nimport { s as m } from \"./style-inject.es.js\";\nimport \"./VaConfig.js\";\nimport \"./color-config.js\";\nimport \"colortranslator\";\nvar v = e({\n  name: \"VaColorPalette\",\n  components: {\n    VaColorIndicator: d\n  },\n  emits: p,\n  props: { ...c,\n    modelValue: {\n      type: String,\n      default: null\n    },\n    palette: {\n      type: Array,\n      default: () => []\n    },\n    indicator: {\n      type: String,\n      default: \"dot\",\n      validator: o => [\"dot\", \"square\"].includes(o)\n    }\n  },\n\n  setup(o, {\n    emit: e\n  }) {\n    const {\n      valueComputed: t\n    } = u(o, e);\n    return {\n      valueComputed: t,\n      isSelected: o => t.value === o\n    };\n  }\n\n});\nconst f = {\n  class: \"va-color-palette\"\n},\n      g = {\n  class: \"va-color-palette__colors\"\n};\nm(\".va-color-palette{padding-top:3px}.va-color-palette__colors{display:flex}.va-color-palette__colors>*{margin-right:.25rem}.va-color-palette__colors>:last-child{margin-right:0}\"), v.render = function render(o, e, p, c, u, d) {\n  const m = t(\"va-color-indicator\");\n  return a(), l(\"div\", f, [r(\"ul\", g, [(a(!0), l(s, null, i(o.palette, (e, t) => (a(), n(m, {\n    modelValue: o.valueComputed === e,\n    key: t,\n    color: e,\n    square: \"square\" === o.indicator,\n    \"onUpdate:modelValue\": t => o.valueComputed = e\n  }, null, 8, [\"modelValue\", \"color\", \"square\", \"onUpdate:modelValue\"]))), 128))])]);\n}, v.__file = \"src/components/va-color-palette/VaColorPalette.vue\";\n\nconst _ = o(v);\n\nexport { _ as VaColorPalette };","map":{"version":3,"mappings":";;;;;;;;;AAqBA,QAAeA,EAAgB;AAC7BC,QAAM,gBADuB;AAE7BC,cAAY;AAAEC;AAAF,GAFiB;AAG7BC,SAAOC,CAHsB;AAI7BC,SAAO,KACFC,CADE;AAELC,gBAAY;AAAEC,YAAMC,MAAR;AAAoCC,eAAS;AAA7C,KAFP;AAGLC,aAAS;AAAEH,YAAMI,KAAR;AAA0CF,eAAS,MAAM;AAAzD,KAHJ;AAILG,eAAW;AACTL,YAAMC,MADG;AAETC,eAAS,KAFA;AAGTI,iBAAYC,KAAkB,CAAC,KAAD,EAAQ,QAAR,EAAkBC,QAAlB,CAA2BD,CAA3B;AAHrB;AAJN,GAJsB;;AAc7BE,QAAOZ,CAAPY,EAAOZ;AAAOa,UAAEA;AAATb,GAAPY,EAAgBC;AACd;AAAMC,qBAAEA;AAAR,QAA0BC,EAAYf,CAAZe,EAAmBF,CAAnBE,CAA1B;AAEA,WAAO;AACLD,sBADK;AAELE,kBAAaC,KAAkBH,EAAcJ,KAAdI,KAAwBG;AAFlD,KAAP;AAEyDA;;AAnB9B,CAAhBvB,CAAf;AAmB6DuB;ACvCtDC,SAAM;ADuCgDD;AAAAA,MCvChDE;AACLD,SAAM;AADD,CDuCgDD;ACtC/CG;AAAA;AAAA,cADZC,aACEC,oBACED,aAC2BE,SAD3BF,EAC2BE,CAAjBN,CAAiBM,EAAVC,CAAUD,MAAVC,KADjBC;AAEGvB,gBAAYqB,oBAAkBN,CAFjCQ;AAGGC,SAAKF,CAHRC;AAIGR,WAAOA,CAJVQ;AAKGE,yBAAQJ,WALXE;AAMG,gCAAmBF,kBAAgBN;AANtCQ,KAMsCR,IANtCQ,EAMsCR,CANtCQ,EAMsCR,wDANtCQ,CAC2BF,CAD3BF,GAMsCJ,GANtCI,CADFO,GADFC,EACY;AAO8BZ,CAP9B,EAO8BA,+DAP9B;;AAO8BA,MCL/Ba,IAAiBC,EAAoBC,CAApBD,CDKcd;;ACLMe","names":["defineComponent","name","components","VaColorIndicator","emits","useStatefulEmits","props","useStatefulProps","modelValue","type","String","default","palette","Array","indicator","validator","value","includes","setup","emit","valueComputed","useStateful","isSelected","color","class","g","m","_createElementBlock","_createElementVNode","_ctx","index","_createBlock","key","square","_hoisted_2","_hoisted_1","VaColorPalette","withConfigTransport","VaColorPaletteComponent"],"sources":["../../src/components/va-color-palette/VaColorPalette.vue","../../src/components/va-color-palette/VaColorPalette.vue?vue&type=template&id=07dc5043&lang.js","../../src/components/va-color-palette/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-color-palette\">\n    <ul class=\"va-color-palette__colors\">\n      <va-color-indicator\n        v-for=\"(color, index) in palette\"\n        :modelValue=\"valueComputed === color\"\n        :key=\"index\"\n        :color=\"color\"\n        :square=\"indicator === 'square'\"\n        @update:modelValue=\"valueComputed = color\"\n      />\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\n\nimport { useStatefulProps, useStateful, useStatefulEmits } from '../../composables/useStateful'\nimport VaColorIndicator from '../va-color-indicator'\n\nexport default defineComponent({\n  name: 'VaColorPalette',\n  components: { VaColorIndicator },\n  emits: useStatefulEmits,\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: String as PropType<string>, default: null },\n    palette: { type: Array as PropType<Array<string>>, default: () => [] },\n    indicator: {\n      type: String as PropType<'dot' | 'square'>,\n      default: 'dot',\n      validator: (value: string) => ['dot', 'square'].includes(value),\n    },\n  },\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit)\n\n    return {\n      valueComputed,\n      isSelected: (color: string) => valueComputed.value === color,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-color-palette {\n  padding-top: 3px;\n\n  &__colors {\n    display: flex;\n\n    & > * {\n      margin-right: 0.25rem;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-color-palette\">\n    <ul class=\"va-color-palette__colors\">\n      <va-color-indicator\n        v-for=\"(color, index) in palette\"\n        :modelValue=\"valueComputed === color\"\n        :key=\"index\"\n        :color=\"color\"\n        :square=\"indicator === 'square'\"\n        @update:modelValue=\"valueComputed = color\"\n      />\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\n\nimport { useStatefulProps, useStateful, useStatefulEmits } from '../../composables/useStateful'\nimport VaColorIndicator from '../va-color-indicator'\n\nexport default defineComponent({\n  name: 'VaColorPalette',\n  components: { VaColorIndicator },\n  emits: useStatefulEmits,\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: String as PropType<string>, default: null },\n    palette: { type: Array as PropType<Array<string>>, default: () => [] },\n    indicator: {\n      type: String as PropType<'dot' | 'square'>,\n      default: 'dot',\n      validator: (value: string) => ['dot', 'square'].includes(value),\n    },\n  },\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit)\n\n    return {\n      valueComputed,\n      isSelected: (color: string) => valueComputed.value === color,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-color-palette {\n  padding-top: 3px;\n\n  &__colors {\n    display: flex;\n\n    & > * {\n      margin-right: 0.25rem;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\n\nimport VaColorPaletteComponent from './VaColorPalette.vue'\n\nexport const VaColorPalette = withConfigTransport(VaColorPaletteComponent)\n"]},"metadata":{},"sourceType":"module"}